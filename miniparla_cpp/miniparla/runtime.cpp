/* Generated by Cython 0.29.28 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "miniparla/cpp_runtime.hpp"
        ],
        "extra_compile_args": [
            "-std=c++20",
            "-fopenmp",
            "-lpthread",
            "-lgomp",
            "-lm",
            "-g",
            "-O0"
        ],
        "include_dirs": [
            "miniparla"
        ],
        "language": "c++",
        "library_dirs": [
            "miniparla"
        ],
        "name": "miniparla.runtime",
        "sources": [
            "miniparla/runtime.pyx",
            "miniparla/cpp_runtime.cpp"
        ]
    },
    "module_name": "miniparla.runtime"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_28"
#define CYTHON_HEX_VERSION 0x001D1CF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__miniparla__runtime
#define __PYX_HAVE_API__miniparla__runtime
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "cpp_runtime.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "miniparla/runtime.pyx",
  "stringsource",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/*--- Type declarations ---*/
struct __pyx_obj_9miniparla_7runtime_PyInnerTask;
struct __pyx_obj_9miniparla_7runtime_PyInnerWorker;
struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler;
struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name;
struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr;
struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__;
struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__;

/* "miniparla/runtime.pyx":190
 *         return (yield TaskAwaitTasks([self.task], self.task))
 * 
 * cdef class PyInnerTask:             # <<<<<<<<<<<<<<
 *     cdef InnerTask* task
 * 
 */

#line 190 "miniparla/runtime.pyx"
struct __pyx_obj_9miniparla_7runtime_PyInnerTask {

#line 190 "miniparla/runtime.pyx"
  PyObject_HEAD

#line 190 "miniparla/runtime.pyx"
  struct __pyx_vtabstruct_9miniparla_7runtime_PyInnerTask *__pyx_vtab;

#line 190 "miniparla/runtime.pyx"
  InnerTask *task;

#line 190 "miniparla/runtime.pyx"
};

#line 190 "miniparla/runtime.pyx"


/* "miniparla/runtime.pyx":450
 *         pass
 * 
 * cdef class PyInnerWorker:             # <<<<<<<<<<<<<<
 *     cdef InnerWorker* inner_worker
 * 
 */

#line 450 "miniparla/runtime.pyx"
struct __pyx_obj_9miniparla_7runtime_PyInnerWorker {

#line 450 "miniparla/runtime.pyx"
  PyObject_HEAD

#line 450 "miniparla/runtime.pyx"
  InnerWorker *inner_worker;

#line 450 "miniparla/runtime.pyx"
};

#line 450 "miniparla/runtime.pyx"


/* "miniparla/runtime.pyx":543
 * 
 * 
 * cdef class PyInnerScheduler:             # <<<<<<<<<<<<<<
 * 
 *     cdef InnerScheduler* scheduler
 */

#line 543 "miniparla/runtime.pyx"
struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler {

#line 543 "miniparla/runtime.pyx"
  PyObject_HEAD

#line 543 "miniparla/runtime.pyx"
  InnerScheduler *scheduler;

#line 543 "miniparla/runtime.pyx"
};

#line 543 "miniparla/runtime.pyx"


/* "miniparla/runtime.pyx":173
 * 
 *     @property
 *     def full_name(self):             # <<<<<<<<<<<<<<
 *         return "_".join(str(i) for i in (self._name, *self._id))
 * 
 */

#line 173 "miniparla/runtime.pyx"
struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name {

#line 173 "miniparla/runtime.pyx"
  PyObject_HEAD

#line 173 "miniparla/runtime.pyx"
  PyObject *__pyx_v_self;

#line 173 "miniparla/runtime.pyx"
};

#line 173 "miniparla/runtime.pyx"


/* "miniparla/runtime.pyx":174
 *     @property
 *     def full_name(self):
 *         return "_".join(str(i) for i in (self._name, *self._id))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 174 "miniparla/runtime.pyx"
struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr {

#line 174 "miniparla/runtime.pyx"
  PyObject_HEAD

#line 174 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *__pyx_outer_scope;

#line 174 "miniparla/runtime.pyx"
  PyObject *__pyx_v_i;

#line 174 "miniparla/runtime.pyx"
};

#line 174 "miniparla/runtime.pyx"


/* "miniparla/runtime.pyx":187
 *         return hash(self.full_name)
 * 
 *     def __await__(self):             # <<<<<<<<<<<<<<
 *         return (yield TaskAwaitTasks([self.task], self.task))
 * 
 */

#line 187 "miniparla/runtime.pyx"
struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ {

#line 187 "miniparla/runtime.pyx"
  PyObject_HEAD

#line 187 "miniparla/runtime.pyx"
  PyObject *__pyx_v_self;

#line 187 "miniparla/runtime.pyx"
};

#line 187 "miniparla/runtime.pyx"


/* "miniparla/runtime.pyx":360
 * 
 * 
 *     def __await__(self):             # <<<<<<<<<<<<<<
 *         return (yield TaskAwaitTasks([self], self))
 * 
 */

#line 360 "miniparla/runtime.pyx"
struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ {

#line 360 "miniparla/runtime.pyx"
  PyObject_HEAD

#line 360 "miniparla/runtime.pyx"
  PyObject *__pyx_v_self;

#line 360 "miniparla/runtime.pyx"
};

#line 360 "miniparla/runtime.pyx"


#line 360 "miniparla/runtime.pyx"


/* "miniparla/runtime.pyx":190
 *         return (yield TaskAwaitTasks([self.task], self.task))
 * 
 * cdef class PyInnerTask:             # <<<<<<<<<<<<<<
 *     cdef InnerTask* task
 * 
 */

#line 190 "miniparla/runtime.pyx"


#line 190 "miniparla/runtime.pyx"
struct __pyx_vtabstruct_9miniparla_7runtime_PyInnerTask {

#line 190 "miniparla/runtime.pyx"
  PyObject *(*set_dependencies)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, PyObject *, int __pyx_skip_dispatch);

#line 190 "miniparla/runtime.pyx"
  PyObject *(*add_dependency)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, int __pyx_skip_dispatch);

#line 190 "miniparla/runtime.pyx"
  PyObject *(*blocked)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, int __pyx_skip_dispatch);

#line 190 "miniparla/runtime.pyx"
  PyObject *(*blocked_unsafe)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, int __pyx_skip_dispatch);

#line 190 "miniparla/runtime.pyx"
  PyObject *(*notify_dependents)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *, int __pyx_skip_dispatch);

#line 190 "miniparla/runtime.pyx"
  PyObject *(*get_num_deps)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, int __pyx_skip_dispatch);

#line 190 "miniparla/runtime.pyx"
};

#line 190 "miniparla/runtime.pyx"
static struct __pyx_vtabstruct_9miniparla_7runtime_PyInnerTask *__pyx_vtabptr_9miniparla_7runtime_PyInnerTask;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ReturnWithStopIteration.proto */
#define __Pyx_ReturnWithStopIteration(value)\
    if (value == Py_None) PyErr_SetNone(PyExc_StopIteration); else __Pyx__ReturnWithStopIteration(value)
static void __Pyx__ReturnWithStopIteration(PyObject* value);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* pop.proto */
static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L);
#define __Pyx_PyObject_Pop(L) (likely(PyList_CheckExact(L)) ?\
    __Pyx_PyList_Pop(L) : __Pyx__PyObject_Pop(L))
#else
#define __Pyx_PyList_Pop(L)  __Pyx__PyObject_Pop(L)
#define __Pyx_PyObject_Pop(L)  __Pyx__PyObject_Pop(L)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchInspect.proto */
static PyObject* __Pyx_patch_inspect(PyObject* module);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CyFunctionClassCell.proto */
static int __Pyx_CyFunction_InitClassCell(PyObject *cyfunctions, PyObject *classobj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_set_dependencies(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, PyObject *__pyx_v_dependencies, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_add_dependency(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_dependency, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_blocked(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_blocked_unsafe(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_notify_dependents(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_scheduler, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_get_num_deps(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'miniparla.runtime' */
static PyTypeObject *__pyx_ptype_9miniparla_7runtime_PyInnerTask = 0;
static PyTypeObject *__pyx_ptype_9miniparla_7runtime_PyInnerWorker = 0;
static PyTypeObject *__pyx_ptype_9miniparla_7runtime_PyInnerScheduler = 0;
static PyTypeObject *__pyx_ptype_9miniparla_7runtime___pyx_scope_struct__full_name = 0;
static PyTypeObject *__pyx_ptype_9miniparla_7runtime___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_9miniparla_7runtime___pyx_scope_struct_2___await__ = 0;
static PyTypeObject *__pyx_ptype_9miniparla_7runtime___pyx_scope_struct_3___await__ = 0;
static void __pyx_f_9miniparla_7runtime_callback_add(void *, void *, void *); /*proto*/
static void __pyx_f_9miniparla_7runtime_callback_stop(void *); /*proto*/
#define __Pyx_MODULE_NAME "miniparla.runtime"
extern int __pyx_module_is_main_miniparla__runtime;
int __pyx_module_is_main_miniparla__runtime = 0;

/* Implementation of 'miniparla.runtime' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_StopIteration;
static const char __pyx_k_e[] = "e";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k__2[] = "_";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_Any[] = "Any";
static const char __pyx_k_abc[] = "abc";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_ctx[] = "ctx";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_exc[] = "exc";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_req[] = "req";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_Dict[] = "Dict";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_Lock[] = "Lock";
static const char __pyx_k_Task[] = "Task";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_body[] = "body";
static const char __pyx_k_done[] = "done";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_func[] = "func";
static const char __pyx_k_hash[] = "__hash__";
static const char __pyx_k_id_2[] = "_id";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_task[] = "_task";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_vcus[] = "vcus";
static const char __pyx_k_wait[] = "wait";
static const char __pyx_k_Tuple[] = "Tuple";
static const char __pyx_k_Union[] = "Union";
static const char __pyx_k_await[] = "__await__";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_ctx_2[] = "_ctx";
static const char __pyx_k_deque[] = "deque";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_flush[] = "flush";
static const char __pyx_k_hello[] = "hello";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_local[] = "local";
static const char __pyx_k_mutex[] = "_mutex";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_req_2[] = "_req";
static const char __pyx_k_sleep[] = "sleep";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "_state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_TaskID[] = "TaskID";
static const char __pyx_k_Thread[] = "Thread";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_args_2[] = "_args";
static const char __pyx_k_exc_tb[] = "exc_tb";
static const char __pyx_k_finish[] = "_finish";
static const char __pyx_k_func_2[] = "_func";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "_name";
static const char __pyx_k_name_3[] = "__name__";
static const char __pyx_k_notify[] = "notify";
static const char __pyx_k_period[] = "period";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_setter[] = "setter";
static const char __pyx_k_task_2[] = "task";
static const char __pyx_k_taskid[] = "taskid";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_worker[] = "worker";
static const char __pyx_k_ABCMeta[] = "ABCMeta";
static const char __pyx_k_blocked[] = "blocked";
static const char __pyx_k_cleanup[] = "_cleanup";
static const char __pyx_k_context[] = "context";
static const char __pyx_k_exc_val[] = "exc_val";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_inspect[] = "inspect";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_monitor[] = "_monitor";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_success[] = "success";
static const char __pyx_k_Iterable[] = "Iterable";
static const char __pyx_k_TaskDict[] = "TaskDict";
static const char __pyx_k_Task_req[] = "Task.req";
static const char __pyx_k_Task_run[] = "Task.run";
static const char __pyx_k_exc_type[] = "exc_type";
static const char __pyx_k_function[] = "function";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_in_value[] = "in_value";
static const char __pyx_k_property[] = "property";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_taskid_2[] = "_taskid";
static const char __pyx_k_Awaitable[] = "Awaitable";
static const char __pyx_k_Condition[] = "Condition";
static const char __pyx_k_Resources[] = "Resources";
static const char __pyx_k_Scheduler[] = "Scheduler";
static const char __pyx_k_TaskID_id[] = "TaskID.id";
static const char __pyx_k_TaskState[] = "TaskState";
static const char __pyx_k_Task_task[] = "Task.task";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_full_name[] = "full_name";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_n_threads[] = "n_threads";
static const char __pyx_k_new_state[] = "new_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_scheduler[] = "scheduler";
static const char __pyx_k_set_state[] = "_set_state";
static const char __pyx_k_threading[] = "threading";
static const char __pyx_k_AwaitTasks[] = "AwaitTasks";
static const char __pyx_k_Collection[] = "Collection";
static const char __pyx_k_TaskLocals[] = "_TaskLocals";
static const char __pyx_k_contextlib[] = "contextlib";
static const char __pyx_k_exceptions[] = "_exceptions";
static const char __pyx_k_get_status[] = "get_status";
static const char __pyx_k_inner_task[] = "inner_task";
static const char __pyx_k_namedtuple[] = "namedtuple";
static const char __pyx_k_notify_all[] = "notify_all";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_should_run[] = "_should_run";
static const char __pyx_k_spawn_task[] = "spawn_task";
static const char __pyx_k_task_inner[] = "task_inner";
static const char __pyx_k_task_state[] = "task_state";
static const char __pyx_k_value_task[] = "value_task";
static const char __pyx_k_PyInnerTask[] = "PyInnerTask";
static const char __pyx_k_TaskID_name[] = "TaskID.name";
static const char __pyx_k_TaskID_task[] = "TaskID.task";
static const char __pyx_k_TaskRunning[] = "TaskRunning";
static const char __pyx_k_Task___init[] = "Task.__init__";
static const char __pyx_k_assign_task[] = "assign_task";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_defaultdict[] = "defaultdict";
static const char __pyx_k_is_terminal[] = "is_terminal";
static const char __pyx_k_iscoroutine[] = "iscoroutine";
static const char __pyx_k_num_threads[] = "num_threads";
static const char __pyx_k_python_task[] = "python_task";
static const char __pyx_k_remove_task[] = "_remove_task";
static const char __pyx_k_scheduler_2[] = "_scheduler";
static const char __pyx_k_task_locals[] = "task_locals";
static const char __pyx_k_task_scopes[] = "task_scopes";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_TaskDict_add[] = "TaskDict.add";
static const char __pyx_k_TaskDict_get[] = "TaskDict.get";
static const char __pyx_k_Task___await[] = "Task.__await__";
static const char __pyx_k_Task__finish[] = "Task._finish";
static const char __pyx_k_Task_blocked[] = "Task.blocked";
static const char __pyx_k_WorkerThread[] = "WorkerThread";
static const char __pyx_k_cpp_callback[] = "cpp_callback";
static const char __pyx_k_dependencies[] = "_dependencies";
static const char __pyx_k_enqueue_task[] = "enqueue_task";
static const char __pyx_k_execute_task[] = "_execute_task";
static const char __pyx_k_get_num_deps[] = "get_num_deps";
static const char __pyx_k_global_tasks[] = "_global_tasks";
static const char __pyx_k_set_callback[] = "set_callback";
static const char __pyx_k_PyInnerWorker[] = "PyInnerWorker";
static const char __pyx_k_Scheduler_run[] = "Scheduler.run";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_TaskCompleted[] = "TaskCompleted";
static const char __pyx_k_TaskException[] = "TaskException";
static const char __pyx_k_TaskID___hash[] = "TaskID.__hash__";
static const char __pyx_k_TaskID___init[] = "TaskID.__init__";
static const char __pyx_k_Task__cleanup[] = "Task._cleanup";
static const char __pyx_k_Unknown_Error[] = "Unknown Error";
static const char __pyx_k_get_resources[] = "get_resources";
static const char __pyx_k_in_value_task[] = "in_value_task";
static const char __pyx_k_max_resources[] = "max_resources";
static const char __pyx_k_new_task_info[] = "new_task_info";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_run_scheduler[] = "run_scheduler";
static const char __pyx_k_task_callback[] = "_task_callback";
static const char __pyx_k_Scheduler_stop[] = "Scheduler.stop";
static const char __pyx_k_TaskAwaitTasks[] = "TaskAwaitTasks";
static const char __pyx_k_TaskDict__dict[] = "_TaskDict__dict";
static const char __pyx_k_TaskID___await[] = "TaskID.__await__";
static const char __pyx_k_TaskLocals_ctx[] = "_TaskLocals.ctx";
static const char __pyx_k_abstractmethod[] = "abstractmethod";
static const char __pyx_k_add_dependency[] = "add_dependency";
static const char __pyx_k_blocked_unsafe[] = "blocked_unsafe";
static const char __pyx_k_contextmanager[] = "contextmanager";
static const char __pyx_k_decr_resources[] = "decr_resources";
static const char __pyx_k_dependencies_2[] = "dependencies";
static const char __pyx_k_enqueue_worker[] = "enqueue_worker";
static const char __pyx_k_global_tasks_2[] = "global_tasks";
static const char __pyx_k_incr_resources[] = "incr_resources";
static const char __pyx_k_worker_threads[] = "_worker_threads";
static const char __pyx_k_SchedulerLocals[] = "_SchedulerLocals";
static const char __pyx_k_Scheduler_ready[] = "Scheduler ready";
static const char __pyx_k_TaskDict___init[] = "TaskDict.__init__";
static const char __pyx_k_TaskDict__mutex[] = "_TaskDict__mutex";
static const char __pyx_k_TaskDict_remove[] = "TaskDict.remove";
static const char __pyx_k_Task__set_state[] = "Task._set_state";
static const char __pyx_k_inner_scheduler[] = "inner_scheduler";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_PyInnerScheduler[] = "PyInnerScheduler";
static const char __pyx_k_Resources___init[] = "Resources.__init__";
static const char __pyx_k_SchedulerContext[] = "SchedulerContext";
static const char __pyx_k_Scheduler___exit[] = "Scheduler.__exit__";
static const char __pyx_k_Scheduler___init[] = "Scheduler.__init__";
static const char __pyx_k_TaskID_full_name[] = "TaskID.full_name";
static const char __pyx_k_WorkerThread_run[] = "WorkerThread.run";
static const char __pyx_k_add_dependency_2[] = "_add_dependency";
static const char __pyx_k_decr_active_task[] = "decr_active_task";
static const char __pyx_k_get_active_tasks[] = "get_active_tasks";
static const char __pyx_k_get_free_threads[] = "get_free_threads";
static const char __pyx_k_scheduler_locals[] = "_scheduler_locals";
static const char __pyx_k_set_dependencies[] = "set_dependencies";
static const char __pyx_k_Hello_from_python[] = "Hello from python";
static const char __pyx_k_Scheduler___enter[] = "Scheduler.__enter__";
static const char __pyx_k_TaskID_inner_task[] = "TaskID.inner_task";
static const char __pyx_k_TaskLocals___init[] = "_TaskLocals.__init__";
static const char __pyx_k_WorkerThread_stop[] = "WorkerThread.stop";
static const char __pyx_k_current_resources[] = "current_resources";
static const char __pyx_k_decr_active_tasks[] = "decr_active_tasks";
static const char __pyx_k_decr_free_threads[] = "decr_free_threads";
static const char __pyx_k_get_running_tasks[] = "get_running_tasks";
static const char __pyx_k_incr_active_tasks[] = "incr_active_tasks";
static const char __pyx_k_incr_free_threads[] = "incr_free_threads";
static const char __pyx_k_miniparla_runtime[] = "miniparla.runtime";
static const char __pyx_k_notify_dependents[] = "notify_dependents";
static const char __pyx_k_scheduler_context[] = "scheduler_context";
static const char __pyx_k_ControllableThread[] = "ControllableThread";
static const char __pyx_k_How_did_I_get_here[] = "How did I get here?";
static const char __pyx_k_Task_Queueing_Cont[] = "Task Queueing Cont.";
static const char __pyx_k_Task__execute_task[] = "Task._execute_task";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_decr_running_tasks[] = "decr_running_tasks";
static const char __pyx_k_incr_running_tasks[] = "incr_running_tasks";
static const char __pyx_k_Scheduler_scheduler[] = "Scheduler.scheduler";
static const char __pyx_k_TaskID_dependencies[] = "TaskID.dependencies";
static const char __pyx_k_Task_blocked_unsafe[] = "Task.blocked_unsafe";
static const char __pyx_k_WorkerThread___init[] = "WorkerThread.__init__";
static const char __pyx_k_enqueue_task_unsafe[] = "enqueue_task_unsafe";
static const char __pyx_k_iscoroutinefunction[] = "iscoroutinefunction";
static const char __pyx_k_notify_dependents_2[] = "_notify_dependents";
static const char __pyx_k_Created_Inner_Worker[] = "Created Inner Worker";
static const char __pyx_k_No_scheduler_context[] = "No scheduler context";
static const char __pyx_k_Task__add_dependency[] = "Task._add_dependency";
static const char __pyx_k_Task_set_dependencies[] = "Task.set_dependencies";
static const char __pyx_k_WorkerThreadException[] = "WorkerThreadException";
static const char __pyx_k_get_scheduler_context[] = "get_scheduler_context";
static const char __pyx_k_miniparla_runtime_pyx[] = "miniparla/runtime.pyx";
static const char __pyx_k_miniparla_task_states[] = "miniparla.task_states";
static const char __pyx_k_ControllableThread_run[] = "ControllableThread.run";
static const char __pyx_k_SchedulerLocals___init[] = "_SchedulerLocals.__init__";
static const char __pyx_k_Scheduler_cpp_callback[] = "Scheduler.cpp_callback";
static const char __pyx_k_Scheduler_enqueue_task[] = "Scheduler.enqueue_task";
static const char __pyx_k_WorkerThread_scheduler[] = "WorkerThread.scheduler";
static const char __pyx_k_ControllableThread_stop[] = "ControllableThread.stop";
static const char __pyx_k_SchedulerContext___exit[] = "SchedulerContext.__exit__";
static const char __pyx_k_Scheduler_run_scheduler[] = "Scheduler.run_scheduler";
static const char __pyx_k_TaskLocals_global_tasks[] = "_TaskLocals.global_tasks";
static const char __pyx_k_Task__notify_dependents[] = "Task._notify_dependents";
static const char __pyx_k_launching_phase_monitor[] = "_launching_phase_monitor";
static const char __pyx_k_scheduler_context_stack[] = "_scheduler_context_stack";
static const char __pyx_k_SchedulerContext___enter[] = "SchedulerContext.__enter__";
static const char __pyx_k_Scheduler_decr_resources[] = "Scheduler.decr_resources";
static const char __pyx_k_Scheduler_enqueue_worker[] = "Scheduler.enqueue_worker";
static const char __pyx_k_Scheduler_incr_resources[] = "Scheduler.incr_resources";
static const char __pyx_k_WorkerThread_assign_task[] = "WorkerThread.assign_task";
static const char __pyx_k_ControllableThread___init[] = "ControllableThread.__init__";
static const char __pyx_k_WorkerThread__remove_task[] = "WorkerThread._remove_task";
static const char __pyx_k_Worker_already_has_a_task[] = "Worker already has a task";
static const char __pyx_k_Scheduler_decr_active_task[] = "Scheduler.decr_active_task";
static const char __pyx_k_Scheduler_get_active_tasks[] = "Scheduler.get_active_tasks";
static const char __pyx_k_Scheduler_get_free_threads[] = "Scheduler.get_free_threads";
static const char __pyx_k_Task_Spawning_Continuation[] = "Task Spawning Continuation";
static const char __pyx_k_SchedulerContext_spawn_task[] = "SchedulerContext.spawn_task";
static const char __pyx_k_Scheduler_current_resources[] = "Scheduler.current_resources";
static const char __pyx_k_Scheduler_decr_free_threads[] = "Scheduler.decr_free_threads";
static const char __pyx_k_Scheduler_get_running_tasks[] = "Scheduler.get_running_tasks";
static const char __pyx_k_Scheduler_incr_active_tasks[] = "Scheduler.incr_active_tasks";
static const char __pyx_k_Scheduler_incr_free_threads[] = "Scheduler.incr_free_threads";
static const char __pyx_k_Worker_does_not_have_a_task[] = "Worker does not have a task";
static const char __pyx_k_Scheduler_decr_running_tasks[] = "Scheduler.decr_running_tasks";
static const char __pyx_k_Scheduler_incr_running_tasks[] = "Scheduler.incr_running_tasks";
static const char __pyx_k_Scheduler_enqueue_task_unsafe[] = "Scheduler.enqueue_task_unsafe";
static const char __pyx_k_SchedulerLocals_scheduler_conte[] = "_SchedulerLocals.scheduler_context";
static const char __pyx_k_TaskID_full_name_locals_genexpr[] = "TaskID.full_name.<locals>.genexpr";
static const char __pyx_k_Parla_coroutine_tasks_must_yield[] = "Parla coroutine tasks must yield a TaskAwaitTasks";
static const char __pyx_k_Scheduler_context_can_only_be_en[] = "Scheduler context can only be entered once";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_n_s_ABCMeta;
static PyObject *__pyx_n_s_Any;
static PyObject *__pyx_n_u_AwaitTasks;
static PyObject *__pyx_n_s_Awaitable;
static PyObject *__pyx_n_s_Collection;
static PyObject *__pyx_n_s_Condition;
static PyObject *__pyx_n_s_ControllableThread;
static PyObject *__pyx_n_s_ControllableThread___init;
static PyObject *__pyx_n_s_ControllableThread_run;
static PyObject *__pyx_n_s_ControllableThread_stop;
static PyObject *__pyx_kp_u_Created_Inner_Worker;
static PyObject *__pyx_n_s_Dict;
static PyObject *__pyx_kp_u_Hello_from_python;
static PyObject *__pyx_kp_u_How_did_I_get_here;
static PyObject *__pyx_n_s_Iterable;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_n_s_Lock;
static PyObject *__pyx_kp_u_No_scheduler_context;
static PyObject *__pyx_kp_u_Parla_coroutine_tasks_must_yield;
static PyObject *__pyx_n_s_PyInnerScheduler;
static PyObject *__pyx_n_s_PyInnerTask;
static PyObject *__pyx_n_s_PyInnerWorker;
static PyObject *__pyx_n_s_Resources;
static PyObject *__pyx_n_s_Resources___init;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_Scheduler;
static PyObject *__pyx_n_s_SchedulerContext;
static PyObject *__pyx_n_s_SchedulerContext___enter;
static PyObject *__pyx_n_s_SchedulerContext___exit;
static PyObject *__pyx_n_s_SchedulerContext_spawn_task;
static PyObject *__pyx_n_s_SchedulerLocals;
static PyObject *__pyx_n_s_SchedulerLocals___init;
static PyObject *__pyx_n_s_SchedulerLocals_scheduler_conte;
static PyObject *__pyx_n_s_Scheduler___enter;
static PyObject *__pyx_n_s_Scheduler___exit;
static PyObject *__pyx_n_s_Scheduler___init;
static PyObject *__pyx_kp_u_Scheduler_context_can_only_be_en;
static PyObject *__pyx_n_s_Scheduler_cpp_callback;
static PyObject *__pyx_n_s_Scheduler_current_resources;
static PyObject *__pyx_n_s_Scheduler_decr_active_task;
static PyObject *__pyx_n_s_Scheduler_decr_free_threads;
static PyObject *__pyx_n_s_Scheduler_decr_resources;
static PyObject *__pyx_n_s_Scheduler_decr_running_tasks;
static PyObject *__pyx_n_s_Scheduler_enqueue_task;
static PyObject *__pyx_n_s_Scheduler_enqueue_task_unsafe;
static PyObject *__pyx_n_s_Scheduler_enqueue_worker;
static PyObject *__pyx_n_s_Scheduler_get_active_tasks;
static PyObject *__pyx_n_s_Scheduler_get_free_threads;
static PyObject *__pyx_n_s_Scheduler_get_running_tasks;
static PyObject *__pyx_n_s_Scheduler_incr_active_tasks;
static PyObject *__pyx_n_s_Scheduler_incr_free_threads;
static PyObject *__pyx_n_s_Scheduler_incr_resources;
static PyObject *__pyx_n_s_Scheduler_incr_running_tasks;
static PyObject *__pyx_kp_u_Scheduler_ready;
static PyObject *__pyx_n_s_Scheduler_run;
static PyObject *__pyx_n_s_Scheduler_run_scheduler;
static PyObject *__pyx_n_s_Scheduler_scheduler;
static PyObject *__pyx_n_s_Scheduler_stop;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_Task;
static PyObject *__pyx_n_s_TaskAwaitTasks;
static PyObject *__pyx_n_s_TaskCompleted;
static PyObject *__pyx_n_s_TaskDict;
static PyObject *__pyx_n_s_TaskDict___init;
static PyObject *__pyx_n_s_TaskDict__dict;
static PyObject *__pyx_n_s_TaskDict__mutex;
static PyObject *__pyx_n_s_TaskDict_add;
static PyObject *__pyx_n_s_TaskDict_get;
static PyObject *__pyx_n_s_TaskDict_remove;
static PyObject *__pyx_n_s_TaskException;
static PyObject *__pyx_n_s_TaskID;
static PyObject *__pyx_n_s_TaskID___await;
static PyObject *__pyx_n_s_TaskID___hash;
static PyObject *__pyx_n_s_TaskID___init;
static PyObject *__pyx_n_s_TaskID_dependencies;
static PyObject *__pyx_n_s_TaskID_full_name;
static PyObject *__pyx_n_s_TaskID_full_name_locals_genexpr;
static PyObject *__pyx_n_s_TaskID_id;
static PyObject *__pyx_n_s_TaskID_inner_task;
static PyObject *__pyx_n_s_TaskID_name;
static PyObject *__pyx_n_s_TaskID_task;
static PyObject *__pyx_n_s_TaskLocals;
static PyObject *__pyx_n_s_TaskLocals___init;
static PyObject *__pyx_n_s_TaskLocals_ctx;
static PyObject *__pyx_n_s_TaskLocals_global_tasks;
static PyObject *__pyx_n_s_TaskRunning;
static PyObject *__pyx_n_s_TaskState;
static PyObject *__pyx_kp_u_Task_Queueing_Cont;
static PyObject *__pyx_kp_u_Task_Spawning_Continuation;
static PyObject *__pyx_n_s_Task___await;
static PyObject *__pyx_n_s_Task___init;
static PyObject *__pyx_n_s_Task__add_dependency;
static PyObject *__pyx_n_s_Task__cleanup;
static PyObject *__pyx_n_s_Task__execute_task;
static PyObject *__pyx_n_s_Task__finish;
static PyObject *__pyx_n_s_Task__notify_dependents;
static PyObject *__pyx_n_s_Task__set_state;
static PyObject *__pyx_n_s_Task_blocked;
static PyObject *__pyx_n_s_Task_blocked_unsafe;
static PyObject *__pyx_n_s_Task_req;
static PyObject *__pyx_n_s_Task_run;
static PyObject *__pyx_n_s_Task_set_dependencies;
static PyObject *__pyx_n_s_Task_task;
static PyObject *__pyx_n_s_Thread;
static PyObject *__pyx_n_s_Tuple;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_Union;
static PyObject *__pyx_kp_u_Unknown_Error;
static PyObject *__pyx_n_s_WorkerThread;
static PyObject *__pyx_n_s_WorkerThreadException;
static PyObject *__pyx_n_s_WorkerThread___init;
static PyObject *__pyx_n_s_WorkerThread__remove_task;
static PyObject *__pyx_n_s_WorkerThread_assign_task;
static PyObject *__pyx_n_s_WorkerThread_run;
static PyObject *__pyx_n_s_WorkerThread_scheduler;
static PyObject *__pyx_n_s_WorkerThread_stop;
static PyObject *__pyx_kp_u_Worker_already_has_a_task;
static PyObject *__pyx_kp_u_Worker_does_not_have_a_task;
static PyObject *__pyx_n_u__2;
static PyObject *__pyx_n_s_abc;
static PyObject *__pyx_n_s_abstractmethod;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_add_dependency;
static PyObject *__pyx_n_s_add_dependency_2;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_args_2;
static PyObject *__pyx_n_s_assign_task;
static PyObject *__pyx_n_s_await;
static PyObject *__pyx_n_s_blocked;
static PyObject *__pyx_n_s_blocked_unsafe;
static PyObject *__pyx_n_s_body;
static PyObject *__pyx_n_s_cleanup;
static PyObject *__pyx_n_s_clear;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_context;
static PyObject *__pyx_n_s_contextlib;
static PyObject *__pyx_n_s_contextmanager;
static PyObject *__pyx_n_s_cpp_callback;
static PyObject *__pyx_n_s_ctx;
static PyObject *__pyx_n_s_ctx_2;
static PyObject *__pyx_n_u_ctx_2;
static PyObject *__pyx_n_s_current_resources;
static PyObject *__pyx_n_s_decr_active_task;
static PyObject *__pyx_n_s_decr_active_tasks;
static PyObject *__pyx_n_s_decr_free_threads;
static PyObject *__pyx_n_s_decr_resources;
static PyObject *__pyx_n_s_decr_running_tasks;
static PyObject *__pyx_n_s_defaultdict;
static PyObject *__pyx_n_s_dependencies;
static PyObject *__pyx_n_s_dependencies_2;
static PyObject *__pyx_n_u_dependencies_2;
static PyObject *__pyx_n_s_deque;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_done;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_enqueue_task;
static PyObject *__pyx_n_s_enqueue_task_unsafe;
static PyObject *__pyx_n_s_enqueue_worker;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_exc;
static PyObject *__pyx_n_s_exc_tb;
static PyObject *__pyx_n_s_exc_type;
static PyObject *__pyx_n_s_exc_val;
static PyObject *__pyx_n_s_exceptions;
static PyObject *__pyx_n_s_execute_task;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_finish;
static PyObject *__pyx_n_s_flush;
static PyObject *__pyx_n_s_full_name;
static PyObject *__pyx_n_s_func;
static PyObject *__pyx_n_s_func_2;
static PyObject *__pyx_n_s_function;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_active_tasks;
static PyObject *__pyx_n_s_get_free_threads;
static PyObject *__pyx_n_s_get_num_deps;
static PyObject *__pyx_n_s_get_resources;
static PyObject *__pyx_n_s_get_running_tasks;
static PyObject *__pyx_n_s_get_scheduler_context;
static PyObject *__pyx_n_s_get_status;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_global_tasks;
static PyObject *__pyx_n_u_global_tasks;
static PyObject *__pyx_n_s_global_tasks_2;
static PyObject *__pyx_n_s_hash;
static PyObject *__pyx_n_s_hello;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_id_2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_value;
static PyObject *__pyx_n_s_in_value_task;
static PyObject *__pyx_n_s_incr_active_tasks;
static PyObject *__pyx_n_s_incr_free_threads;
static PyObject *__pyx_n_s_incr_resources;
static PyObject *__pyx_n_s_incr_running_tasks;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_inner_scheduler;
static PyObject *__pyx_n_s_inner_task;
static PyObject *__pyx_n_s_inspect;
static PyObject *__pyx_n_s_is_terminal;
static PyObject *__pyx_n_s_iscoroutine;
static PyObject *__pyx_n_s_iscoroutinefunction;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_launching_phase_monitor;
static PyObject *__pyx_n_s_local;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_resources;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_miniparla_runtime;
static PyObject *__pyx_kp_s_miniparla_runtime_pyx;
static PyObject *__pyx_n_s_miniparla_task_states;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_monitor;
static PyObject *__pyx_n_s_mutex;
static PyObject *__pyx_n_s_n_threads;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_name_3;
static PyObject *__pyx_n_s_namedtuple;
static PyObject *__pyx_n_s_new_state;
static PyObject *__pyx_n_s_new_task_info;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_notify;
static PyObject *__pyx_n_s_notify_all;
static PyObject *__pyx_n_s_notify_dependents;
static PyObject *__pyx_n_s_notify_dependents_2;
static PyObject *__pyx_n_s_num_threads;
static PyObject *__pyx_n_s_period;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_python_task;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_remove_task;
static PyObject *__pyx_n_s_req;
static PyObject *__pyx_n_s_req_2;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_run;
static PyObject *__pyx_n_s_run_scheduler;
static PyObject *__pyx_n_s_scheduler;
static PyObject *__pyx_n_s_scheduler_2;
static PyObject *__pyx_n_s_scheduler_context;
static PyObject *__pyx_n_s_scheduler_context_stack;
static PyObject *__pyx_n_s_scheduler_locals;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set_callback;
static PyObject *__pyx_n_s_set_dependencies;
static PyObject *__pyx_n_s_set_state;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_setter;
static PyObject *__pyx_n_s_should_run;
static PyObject *__pyx_n_s_sleep;
static PyObject *__pyx_n_s_spawn_task;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_success;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_task;
static PyObject *__pyx_n_s_task_2;
static PyObject *__pyx_n_s_task_callback;
static PyObject *__pyx_n_s_task_inner;
static PyObject *__pyx_n_s_task_locals;
static PyObject *__pyx_n_s_task_scopes;
static PyObject *__pyx_n_s_task_state;
static PyObject *__pyx_n_s_taskid;
static PyObject *__pyx_n_s_taskid_2;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_threading;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_value_task;
static PyObject *__pyx_n_u_value_task;
static PyObject *__pyx_n_s_vcus;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_wait;
static PyObject *__pyx_n_s_worker;
static PyObject *__pyx_n_s_worker_threads;
static PyObject *__pyx_pf_9miniparla_7runtime_hello(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_task); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_2task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_4inner_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_6task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_8id(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_10name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_9full_name_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_12full_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_14dependencies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_16dependencies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_18__hash__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_20__await__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_9miniparla_7runtime_11PyInnerTask___cinit__(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self); /* proto */
static int __pyx_pf_9miniparla_7runtime_11PyInnerTask_2__init__(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, long __pyx_v_id, PyObject *__pyx_v_python_task, float __pyx_v_vcus); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_4set_dependencies(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, PyObject *__pyx_v_dependencies); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_6add_dependency(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_dependency); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_8blocked(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_10blocked_unsafe(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_12notify_dependents(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_scheduler); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_14get_num_deps(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self); /* proto */
static void __pyx_pf_9miniparla_7runtime_11PyInnerTask_16__dealloc__(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_func, PyObject *__pyx_v_args, PyObject *__pyx_v_dependencies, PyObject *__pyx_v_taskid, PyObject *__pyx_v_req, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_2req(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_4_execute_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_6task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_8_finish(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_ctx); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_10run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_12_cleanup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_14_set_state(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_new_state, PyObject *__pyx_v_ctx); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_16__await__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_19_notify_dependents(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_scheduler); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_21_add_dependency(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_23blocked(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_25blocked_unsafe(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_27set_dependencies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11_TaskLocals___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11_TaskLocals_2ctx(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11_TaskLocals_4ctx(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11_TaskLocals_6global_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_11_TaskLocals_8global_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16SchedulerContext_spawn_task(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_function, PyObject *__pyx_v_args, PyObject *__pyx_v_dependencies, PyObject *__pyx_v_taskid, PyObject *__pyx_v_req, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16SchedulerContext_2__enter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16SchedulerContext_4__exit__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16_SchedulerLocals___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16_SchedulerLocals_2scheduler_context(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_2get_scheduler_context(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_18ControllableThread___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_18ControllableThread_2stop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_18ControllableThread_4run(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_9miniparla_7runtime_13PyInnerWorker___cinit__(struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *__pyx_v_self, PyObject *__pyx_v_worker); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_13PyInnerWorker_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_13PyInnerWorker_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_scheduler, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread_2scheduler(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread_4assign_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread_6_remove_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread_8run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread_10stop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_8TaskDict___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_8TaskDict_2add(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_8TaskDict_4get(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task_inner); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_8TaskDict_6remove(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task); /* proto */
static int __pyx_pf_9miniparla_7runtime_16PyInnerScheduler___cinit__(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static int __pyx_pf_9miniparla_7runtime_16PyInnerScheduler_2__init__(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, CYTHON_UNUSED int __pyx_v_num_threads, float __pyx_v_max_resources); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_4set_callback(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static void __pyx_pf_9miniparla_7runtime_16PyInnerScheduler_6__dealloc__(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_8run(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_10stop(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_12incr_active_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_14decr_active_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_16incr_running_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_18decr_running_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_20incr_free_threads(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_22decr_free_threads(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_24incr_resources(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, float __pyx_v_resources); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_26decr_resources(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, float __pyx_v_resources); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_28get_active_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_30get_running_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_32get_free_threads(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_34run_scheduler(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_36enqueue_task(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_task); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_38enqueue_worker(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *__pyx_v_worker); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_40get_status(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_n_threads, CYTHON_UNUSED PyObject *__pyx_v_period); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_2scheduler(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_4__enter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_6__exit__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_exc_type, PyObject *__pyx_v_exc_val, PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_8incr_resources(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_vcus); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_10decr_resources(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_vcus); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_12current_resources(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_14incr_active_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_16decr_active_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_18cpp_callback(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_task, PyObject *__pyx_v_worker); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_20incr_free_threads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_22decr_free_threads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_24get_free_threads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_26get_active_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_28incr_running_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_30decr_running_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_32get_running_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_34enqueue_worker(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_worker); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_36enqueue_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_38enqueue_task_unsafe(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_40run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_42stop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_44run_scheduler(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_9Resources___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_vcus); /* proto */
static PyObject *__pyx_pf_9miniparla_7runtime_4_task_callback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_task, PyObject *__pyx_v_body); /* proto */
static PyObject *__pyx_tp_new_9miniparla_7runtime_PyInnerTask(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9miniparla_7runtime_PyInnerWorker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9miniparla_7runtime_PyInnerScheduler(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct__full_name(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_2___await__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_3___await__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_pop = {0, &__pyx_n_s_pop, 0, 0, 0};
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_0_001;
static PyObject *__pyx_float_0_0001;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_8;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__168;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__96;
static PyObject *__pyx_codeobj__98;
static PyObject *__pyx_codeobj__100;
static PyObject *__pyx_codeobj__102;
static PyObject *__pyx_codeobj__104;
static PyObject *__pyx_codeobj__106;
static PyObject *__pyx_codeobj__108;
static PyObject *__pyx_codeobj__110;
static PyObject *__pyx_codeobj__112;
static PyObject *__pyx_codeobj__114;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__120;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__133;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__137;
static PyObject *__pyx_codeobj__139;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__149;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__153;
static PyObject *__pyx_codeobj__155;
static PyObject *__pyx_codeobj__157;
static PyObject *__pyx_codeobj__159;
static PyObject *__pyx_codeobj__161;
static PyObject *__pyx_codeobj__163;
static PyObject *__pyx_codeobj__165;
static PyObject *__pyx_codeobj__167;
static PyObject *__pyx_codeobj__169;
/* Late includes */

/* "miniparla/runtime.pyx":109
 * 
 * 
 * def hello(task):             # <<<<<<<<<<<<<<
 *     print("Hello from python", flush=True)
 *     print(task.id)
 */

#line 109 "miniparla/runtime.pyx"


#line 109 "miniparla/runtime.pyx"
/* Python wrapper */

#line 109 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_1hello(PyObject *__pyx_self, PyObject *__pyx_v_task); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_1hello = 
#line 109 "miniparla/runtime.pyx"
{"hello", (PyCFunction)__pyx_pw_9miniparla_7runtime_1hello, METH_O, 0};

#line 109 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_1hello(PyObject *__pyx_self, PyObject *__pyx_v_task) {

#line 109 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 109 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 109 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("hello (wrapper)", 0);
  __pyx_r = 
#line 109 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_hello(__pyx_self, ((PyObject *)__pyx_v_task));

#line 109 "miniparla/runtime.pyx"


#line 109 "miniparla/runtime.pyx"
  /* function exit code */

#line 109 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 109 "miniparla/runtime.pyx"
  return __pyx_r;

#line 109 "miniparla/runtime.pyx"
}

#line 109 "miniparla/runtime.pyx"


#line 109 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_hello(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_task) {

#line 109 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 109 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 109 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 109 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 109 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 109 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 109 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 109 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("hello", 0);

  /* "miniparla/runtime.pyx":110
 * 
 * def hello(task):
 *     print("Hello from python", flush=True)             # <<<<<<<<<<<<<<
 *     print(task.id)
 * 
 */

#line 110 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)

#line 110 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 110 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_flush, Py_True) < 0) __PYX_ERR(0, 110, __pyx_L1_error)

#line 110 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple_, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)

#line 110 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 110 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 110 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":111
 * def hello(task):
 *     print("Hello from python", flush=True)
 *     print(task.id)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 111 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_task, __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)

#line 111 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 111 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)

#line 111 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 111 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 111 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":109
 * 
 * 
 * def hello(task):             # <<<<<<<<<<<<<<
 *     print("Hello from python", flush=True)
 *     print(task.id)
 */

#line 109 "miniparla/runtime.pyx"


#line 109 "miniparla/runtime.pyx"
  /* function exit code */

#line 109 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 109 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 109 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 109 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 109 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 109 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.hello", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 109 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 109 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 109 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 109 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 109 "miniparla/runtime.pyx"
  return __pyx_r;

#line 109 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":114
 * 
 * 
 * cdef void callback_add(void* python_scheduler, void* python_task, void*             # <<<<<<<<<<<<<<
 *         python_worker) nogil:
 *     with gil:
 */

#line 114 "miniparla/runtime.pyx"


#line 114 "miniparla/runtime.pyx"
static void __pyx_f_9miniparla_7runtime_callback_add(void *__pyx_v_python_scheduler, void *__pyx_v_python_task, void *__pyx_v_python_worker) {
  PyObject *__pyx_v_task = NULL
#line 114 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_scheduler = NULL
#line 114 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_worker = NULL
#line 114 "miniparla/runtime.pyx"
;

#line 114 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 114 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 114 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 114 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 114 "miniparla/runtime.pyx"
  int __pyx_t_4;

#line 114 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 114 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 114 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 114 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 114 "miniparla/runtime.pyx"
  #ifdef WITH_THREAD

#line 114 "miniparla/runtime.pyx"
  PyGILState_STATE __pyx_gilstate_save;

#line 114 "miniparla/runtime.pyx"
  #endif

#line 114 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("callback_add", 1);

  /* "miniparla/runtime.pyx":116
 * cdef void callback_add(void* python_scheduler, void* python_task, void*
 *         python_worker) nogil:
 *     with gil:             # <<<<<<<<<<<<<<
 *         #print("Inside callback to cython", flush=True)
 *         task = <object>python_task
 */

#line 116 "miniparla/runtime.pyx"
  /*try:*/ {

#line 116 "miniparla/runtime.pyx"
    {

#line 116 "miniparla/runtime.pyx"
        #ifdef WITH_THREAD
        PyGILState_STATE 
#line 116 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 116 "miniparla/runtime.pyx"
        #endif

#line 116 "miniparla/runtime.pyx"
        /*try:*/ {

          /* "miniparla/runtime.pyx":118
 *     with gil:
 *         #print("Inside callback to cython", flush=True)
 *         task = <object>python_task             # <<<<<<<<<<<<<<
 *         scheduler = <object>python_scheduler
 *         worker = <object>python_worker
 */

#line 118 "miniparla/runtime.pyx"
          __pyx_t_1 = ((PyObject *)__pyx_v_python_task);

#line 118 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_t_1);

#line 118 "miniparla/runtime.pyx"
          __pyx_v_task = __pyx_t_1;

#line 118 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":119
 *         #print("Inside callback to cython", flush=True)
 *         task = <object>python_task
 *         scheduler = <object>python_scheduler             # <<<<<<<<<<<<<<
 *         worker = <object>python_worker
 * 
 */

#line 119 "miniparla/runtime.pyx"
          __pyx_t_1 = ((PyObject *)__pyx_v_python_scheduler);

#line 119 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_t_1);

#line 119 "miniparla/runtime.pyx"
          __pyx_v_scheduler = __pyx_t_1;

#line 119 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":120
 *         task = <object>python_task
 *         scheduler = <object>python_scheduler
 *         worker = <object>python_worker             # <<<<<<<<<<<<<<
 * 
 *         scheduler.cpp_callback(task, worker)
 */

#line 120 "miniparla/runtime.pyx"
          __pyx_t_1 = ((PyObject *)__pyx_v_python_worker);

#line 120 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_t_1);

#line 120 "miniparla/runtime.pyx"
          __pyx_v_worker = __pyx_t_1;

#line 120 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":122
 *         worker = <object>python_worker
 * 
 *         scheduler.cpp_callback(task, worker)             # <<<<<<<<<<<<<<
 *         #print("Done with callback", flush=True)
 *         #(<object>python_function)(<object>python_input)
 */

#line 122 "miniparla/runtime.pyx"
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_scheduler, __pyx_n_s_cpp_callback); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L7_error)

#line 122 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 122 "miniparla/runtime.pyx"
          __pyx_t_3 = NULL;

#line 122 "miniparla/runtime.pyx"
          __pyx_t_4 = 0;

#line 122 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 122 "miniparla/runtime.pyx"
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 122 "miniparla/runtime.pyx"
            if (likely(__pyx_t_3)) {

#line 122 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 122 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_3);

#line 122 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 122 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_2, function);

#line 122 "miniparla/runtime.pyx"
              __pyx_t_4 = 1;

#line 122 "miniparla/runtime.pyx"
            }

#line 122 "miniparla/runtime.pyx"
          }

#line 122 "miniparla/runtime.pyx"
          #if CYTHON_FAST_PYCALL

#line 122 "miniparla/runtime.pyx"
          if (PyFunction_Check(__pyx_t_2)) {

#line 122 "miniparla/runtime.pyx"
            PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_task, __pyx_v_worker};

#line 122 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L7_error)

#line 122 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 122 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 122 "miniparla/runtime.pyx"
          } else

#line 122 "miniparla/runtime.pyx"
          #endif

#line 122 "miniparla/runtime.pyx"
          #if CYTHON_FAST_PYCCALL

#line 122 "miniparla/runtime.pyx"
          if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {

#line 122 "miniparla/runtime.pyx"
            PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_task, __pyx_v_worker};

#line 122 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L7_error)

#line 122 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 122 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 122 "miniparla/runtime.pyx"
          } else

#line 122 "miniparla/runtime.pyx"
          #endif

#line 122 "miniparla/runtime.pyx"
          {

#line 122 "miniparla/runtime.pyx"
            __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 122, __pyx_L7_error)

#line 122 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_5);

#line 122 "miniparla/runtime.pyx"
            if (__pyx_t_3) {

#line 122 "miniparla/runtime.pyx"
              __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;

#line 122 "miniparla/runtime.pyx"
            }

#line 122 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_v_task);

#line 122 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_v_task);

#line 122 "miniparla/runtime.pyx"
            PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_task);

#line 122 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_v_worker);

#line 122 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_v_worker);

#line 122 "miniparla/runtime.pyx"
            PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_worker);

#line 122 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L7_error)

#line 122 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 122 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 122 "miniparla/runtime.pyx"
          }

#line 122 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 122 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 122 "miniparla/runtime.pyx"
        }

        /* "miniparla/runtime.pyx":116
 * cdef void callback_add(void* python_scheduler, void* python_task, void*
 *         python_worker) nogil:
 *     with gil:             # <<<<<<<<<<<<<<
 *         #print("Inside callback to cython", flush=True)
 *         task = <object>python_task
 */

#line 116 "miniparla/runtime.pyx"
        /*finally:*/ {

#line 116 "miniparla/runtime.pyx"
          /*normal exit:*/{

#line 116 "miniparla/runtime.pyx"
            #ifdef WITH_THREAD

#line 116 "miniparla/runtime.pyx"
            __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 116 "miniparla/runtime.pyx"
            #endif

#line 116 "miniparla/runtime.pyx"
            goto __pyx_L8;

#line 116 "miniparla/runtime.pyx"
          }

#line 116 "miniparla/runtime.pyx"
          __pyx_L7_error: {

#line 116 "miniparla/runtime.pyx"
            #ifdef WITH_THREAD

#line 116 "miniparla/runtime.pyx"
            __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 116 "miniparla/runtime.pyx"
            #endif

#line 116 "miniparla/runtime.pyx"
            goto __pyx_L4_error;

#line 116 "miniparla/runtime.pyx"
          }

#line 116 "miniparla/runtime.pyx"
          __pyx_L8:;

#line 116 "miniparla/runtime.pyx"
        }

#line 116 "miniparla/runtime.pyx"
    }

#line 116 "miniparla/runtime.pyx"
  }

#line 116 "miniparla/runtime.pyx"
  /*finally:*/ {

#line 116 "miniparla/runtime.pyx"
    /*normal exit:*/{

#line 116 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 116 "miniparla/runtime.pyx"
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 116 "miniparla/runtime.pyx"
      #endif

#line 116 "miniparla/runtime.pyx"
      goto __pyx_L5;

#line 116 "miniparla/runtime.pyx"
    }

#line 116 "miniparla/runtime.pyx"
    __pyx_L4_error: {

#line 116 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 116 "miniparla/runtime.pyx"
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 116 "miniparla/runtime.pyx"
      #endif

#line 116 "miniparla/runtime.pyx"
      goto __pyx_L1_error;

#line 116 "miniparla/runtime.pyx"
    }

#line 116 "miniparla/runtime.pyx"
    __pyx_L5:;

#line 116 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":114
 * 
 * 
 * cdef void callback_add(void* python_scheduler, void* python_task, void*             # <<<<<<<<<<<<<<
 *         python_worker) nogil:
 *     with gil:
 */

#line 114 "miniparla/runtime.pyx"


#line 114 "miniparla/runtime.pyx"
  /* function exit code */

#line 114 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 114 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 114 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 114 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 114 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 114 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 114 "miniparla/runtime.pyx"
  __Pyx_WriteUnraisable("miniparla.runtime.callback_add", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 114 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 114 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_task);

#line 114 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_scheduler);

#line 114 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_worker);

#line 114 "miniparla/runtime.pyx"
  #ifdef WITH_THREAD

#line 114 "miniparla/runtime.pyx"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 114 "miniparla/runtime.pyx"
  #endif

#line 114 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":126
 *         #(<object>python_function)(<object>python_input)
 * 
 * cdef void callback_stop(void* python_function) nogil:             # <<<<<<<<<<<<<<
 *     with gil:
 *         #print("Inside callback to cython (stop)", flush=True)
 */

#line 126 "miniparla/runtime.pyx"


#line 126 "miniparla/runtime.pyx"
static void __pyx_f_9miniparla_7runtime_callback_stop(void *__pyx_v_python_function) {
  PyObject *__pyx_v_scheduler = NULL
#line 126 "miniparla/runtime.pyx"
;

#line 126 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 126 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 126 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 126 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 126 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 126 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 126 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 126 "miniparla/runtime.pyx"
  #ifdef WITH_THREAD

#line 126 "miniparla/runtime.pyx"
  PyGILState_STATE __pyx_gilstate_save;

#line 126 "miniparla/runtime.pyx"
  #endif

#line 126 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("callback_stop", 1);

  /* "miniparla/runtime.pyx":127
 * 
 * cdef void callback_stop(void* python_function) nogil:
 *     with gil:             # <<<<<<<<<<<<<<
 *         #print("Inside callback to cython (stop)", flush=True)
 *         scheduler = <object>python_function
 */

#line 127 "miniparla/runtime.pyx"
  /*try:*/ {

#line 127 "miniparla/runtime.pyx"
    {

#line 127 "miniparla/runtime.pyx"
        #ifdef WITH_THREAD
        PyGILState_STATE 
#line 127 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 127 "miniparla/runtime.pyx"
        #endif

#line 127 "miniparla/runtime.pyx"
        /*try:*/ {

          /* "miniparla/runtime.pyx":129
 *     with gil:
 *         #print("Inside callback to cython (stop)", flush=True)
 *         scheduler = <object>python_function             # <<<<<<<<<<<<<<
 *         scheduler.stop()
 * 
 */

#line 129 "miniparla/runtime.pyx"
          __pyx_t_1 = ((PyObject *)__pyx_v_python_function);

#line 129 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_t_1);

#line 129 "miniparla/runtime.pyx"
          __pyx_v_scheduler = __pyx_t_1;

#line 129 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":130
 *         #print("Inside callback to cython (stop)", flush=True)
 *         scheduler = <object>python_function
 *         scheduler.stop()             # <<<<<<<<<<<<<<
 * 
 *         #(<object>python_function)(<object>python_input)
 */

#line 130 "miniparla/runtime.pyx"
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_scheduler, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L7_error)

#line 130 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 130 "miniparla/runtime.pyx"
          __pyx_t_3 = NULL;

#line 130 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 130 "miniparla/runtime.pyx"
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 130 "miniparla/runtime.pyx"
            if (likely(__pyx_t_3)) {

#line 130 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 130 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_3);

#line 130 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 130 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_2, function);

#line 130 "miniparla/runtime.pyx"
            }

#line 130 "miniparla/runtime.pyx"
          }

#line 130 "miniparla/runtime.pyx"
          __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);

#line 130 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 130 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L7_error)

#line 130 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 130 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 130 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 130 "miniparla/runtime.pyx"
        }

        /* "miniparla/runtime.pyx":127
 * 
 * cdef void callback_stop(void* python_function) nogil:
 *     with gil:             # <<<<<<<<<<<<<<
 *         #print("Inside callback to cython (stop)", flush=True)
 *         scheduler = <object>python_function
 */

#line 127 "miniparla/runtime.pyx"
        /*finally:*/ {

#line 127 "miniparla/runtime.pyx"
          /*normal exit:*/{

#line 127 "miniparla/runtime.pyx"
            #ifdef WITH_THREAD

#line 127 "miniparla/runtime.pyx"
            __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 127 "miniparla/runtime.pyx"
            #endif

#line 127 "miniparla/runtime.pyx"
            goto __pyx_L8;

#line 127 "miniparla/runtime.pyx"
          }

#line 127 "miniparla/runtime.pyx"
          __pyx_L7_error: {

#line 127 "miniparla/runtime.pyx"
            #ifdef WITH_THREAD

#line 127 "miniparla/runtime.pyx"
            __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 127 "miniparla/runtime.pyx"
            #endif

#line 127 "miniparla/runtime.pyx"
            goto __pyx_L4_error;

#line 127 "miniparla/runtime.pyx"
          }

#line 127 "miniparla/runtime.pyx"
          __pyx_L8:;

#line 127 "miniparla/runtime.pyx"
        }

#line 127 "miniparla/runtime.pyx"
    }

#line 127 "miniparla/runtime.pyx"
  }

#line 127 "miniparla/runtime.pyx"
  /*finally:*/ {

#line 127 "miniparla/runtime.pyx"
    /*normal exit:*/{

#line 127 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 127 "miniparla/runtime.pyx"
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 127 "miniparla/runtime.pyx"
      #endif

#line 127 "miniparla/runtime.pyx"
      goto __pyx_L5;

#line 127 "miniparla/runtime.pyx"
    }

#line 127 "miniparla/runtime.pyx"
    __pyx_L4_error: {

#line 127 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 127 "miniparla/runtime.pyx"
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 127 "miniparla/runtime.pyx"
      #endif

#line 127 "miniparla/runtime.pyx"
      goto __pyx_L1_error;

#line 127 "miniparla/runtime.pyx"
    }

#line 127 "miniparla/runtime.pyx"
    __pyx_L5:;

#line 127 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":126
 *         #(<object>python_function)(<object>python_input)
 * 
 * cdef void callback_stop(void* python_function) nogil:             # <<<<<<<<<<<<<<
 *     with gil:
 *         #print("Inside callback to cython (stop)", flush=True)
 */

#line 126 "miniparla/runtime.pyx"


#line 126 "miniparla/runtime.pyx"
  /* function exit code */

#line 126 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 126 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 126 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 126 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 126 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 126 "miniparla/runtime.pyx"
  __Pyx_WriteUnraisable("miniparla.runtime.callback_stop", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 126 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 126 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_scheduler);

#line 126 "miniparla/runtime.pyx"
  #ifdef WITH_THREAD

#line 126 "miniparla/runtime.pyx"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 126 "miniparla/runtime.pyx"
  #endif

#line 126 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":142
 * class TaskID:
 * 
 *     def __init__(self, name, id):             # <<<<<<<<<<<<<<
 *         self._name = name
 *         self._id = id
 */

#line 142 "miniparla/runtime.pyx"


#line 142 "miniparla/runtime.pyx"
/* Python wrapper */

#line 142 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_6TaskID_1__init__ = 
#line 142 "miniparla/runtime.pyx"
{"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_6TaskID_1__init__, METH_VARARGS|METH_KEYWORDS, 0};

#line 142 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 142 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_name = 0
#line 142 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_id = 0
#line 142 "miniparla/runtime.pyx"
;

#line 142 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 142 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 142 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 142 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 142 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 142 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 142 "miniparla/runtime.pyx"
  {

#line 142 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_name,&__pyx_n_s_id,0};

#line 142 "miniparla/runtime.pyx"
    PyObject* values[3] = {0,0,0};

#line 142 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 142 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 142 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 142 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  3: 
#line 142 "miniparla/runtime.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 142 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 142 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 142 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 142 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 142 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 142 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 142 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 142 "miniparla/runtime.pyx"
      }

#line 142 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 142 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 142 "miniparla/runtime.pyx"
        case  0:

#line 142 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 142 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 142 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 142 "miniparla/runtime.pyx"
        case  1:

#line 142 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;

#line 142 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); 
#line 142 "miniparla/runtime.pyx"
__PYX_ERR(0, 142, __pyx_L3_error)

#line 142 "miniparla/runtime.pyx"
        }

#line 142 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 142 "miniparla/runtime.pyx"
        case  2:

#line 142 "miniparla/runtime.pyx"
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;

#line 142 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); 
#line 142 "miniparla/runtime.pyx"
__PYX_ERR(0, 142, __pyx_L3_error)

#line 142 "miniparla/runtime.pyx"
        }

#line 142 "miniparla/runtime.pyx"
      }

#line 142 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 142 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 142, __pyx_L3_error)

#line 142 "miniparla/runtime.pyx"
      }

#line 142 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 142 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 142 "miniparla/runtime.pyx"
    } else {

#line 142 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 142 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 142 "miniparla/runtime.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 142 "miniparla/runtime.pyx"
    }

#line 142 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 142 "miniparla/runtime.pyx"
    __pyx_v_name = values[1];

#line 142 "miniparla/runtime.pyx"
    __pyx_v_id = values[2];

#line 142 "miniparla/runtime.pyx"
  }

#line 142 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 142 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 142 "miniparla/runtime.pyx"
__PYX_ERR(0, 142, __pyx_L3_error)

#line 142 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 142 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 142 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 142 "miniparla/runtime.pyx"
  return NULL;

#line 142 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 142 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_6TaskID___init__(__pyx_self, __pyx_v_self, __pyx_v_name, __pyx_v_id);

#line 142 "miniparla/runtime.pyx"


#line 142 "miniparla/runtime.pyx"
  /* function exit code */

#line 142 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 142 "miniparla/runtime.pyx"
  return __pyx_r;

#line 142 "miniparla/runtime.pyx"
}

#line 142 "miniparla/runtime.pyx"


#line 142 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_id) {

#line 142 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 142 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 142 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 142 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 142 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 142 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "miniparla/runtime.pyx":143
 * 
 *     def __init__(self, name, id):
 *         self._name = name             # <<<<<<<<<<<<<<
 *         self._id = id
 *         self._task = None
 */

#line 143 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name_2, __pyx_v_name) < 0) __PYX_ERR(0, 143, __pyx_L1_error)

  /* "miniparla/runtime.pyx":144
 *     def __init__(self, name, id):
 *         self._name = name
 *         self._id = id             # <<<<<<<<<<<<<<
 *         self._task = None
 * 
 */

#line 144 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_id_2, __pyx_v_id) < 0) __PYX_ERR(0, 144, __pyx_L1_error)

  /* "miniparla/runtime.pyx":145
 *         self._name = name
 *         self._id = id
 *         self._task = None             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 145 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_task, Py_None) < 0) __PYX_ERR(0, 145, __pyx_L1_error)

  /* "miniparla/runtime.pyx":142
 * class TaskID:
 * 
 *     def __init__(self, name, id):             # <<<<<<<<<<<<<<
 *         self._name = name
 *         self._id = id
 */

#line 142 "miniparla/runtime.pyx"


#line 142 "miniparla/runtime.pyx"
  /* function exit code */

#line 142 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 142 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 142 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 142 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 142 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 142 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 142 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 142 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 142 "miniparla/runtime.pyx"
  return __pyx_r;

#line 142 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":148
 * 
 *     @property
 *     def task(self):             # <<<<<<<<<<<<<<
 *         if not self._task:
 *             return None
 */

#line 148 "miniparla/runtime.pyx"


#line 148 "miniparla/runtime.pyx"
/* Python wrapper */

#line 148 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_3task(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_6TaskID_3task = 
#line 148 "miniparla/runtime.pyx"
{"task", (PyCFunction)__pyx_pw_9miniparla_7runtime_6TaskID_3task, METH_O, 0};

#line 148 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_3task(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 148 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 148 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 148 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("task (wrapper)", 0);
  __pyx_r = 
#line 148 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_6TaskID_2task(__pyx_self, ((PyObject *)__pyx_v_self));

#line 148 "miniparla/runtime.pyx"


#line 148 "miniparla/runtime.pyx"
  /* function exit code */

#line 148 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 148 "miniparla/runtime.pyx"
  return __pyx_r;

#line 148 "miniparla/runtime.pyx"
}

#line 148 "miniparla/runtime.pyx"


#line 148 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_2task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 148 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 148 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 148 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 148 "miniparla/runtime.pyx"
  int __pyx_t_2;

#line 148 "miniparla/runtime.pyx"
  int __pyx_t_3;

#line 148 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 148 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 148 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 148 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("task", 0);

  /* "miniparla/runtime.pyx":149
 *     @property
 *     def task(self):
 *         if not self._task:             # <<<<<<<<<<<<<<
 *             return None
 *         return self._task
 */

#line 149 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)

#line 149 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 149 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 149, __pyx_L1_error)

#line 149 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 149 "miniparla/runtime.pyx"
  __pyx_t_3 = ((!__pyx_t_2) != 0);

#line 149 "miniparla/runtime.pyx"
  if (__pyx_t_3) {

    /* "miniparla/runtime.pyx":150
 *     def task(self):
 *         if not self._task:
 *             return None             # <<<<<<<<<<<<<<
 *         return self._task
 * 
 */

#line 150 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 150 "miniparla/runtime.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 150 "miniparla/runtime.pyx"
    goto __pyx_L0;

    /* "miniparla/runtime.pyx":149
 *     @property
 *     def task(self):
 *         if not self._task:             # <<<<<<<<<<<<<<
 *             return None
 *         return self._task
 */

#line 149 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":151
 *         if not self._task:
 *             return None
 *         return self._task             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 151 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 151 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)

#line 151 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 151 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 151 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 151 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":148
 * 
 *     @property
 *     def task(self):             # <<<<<<<<<<<<<<
 *         if not self._task:
 *             return None
 */

#line 148 "miniparla/runtime.pyx"


#line 148 "miniparla/runtime.pyx"
  /* function exit code */

#line 148 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 148 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 148 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 148 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 148 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 148 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 148 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 148 "miniparla/runtime.pyx"
  return __pyx_r;

#line 148 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":154
 * 
 *     @property
 *     def inner_task(self):             # <<<<<<<<<<<<<<
 *         if not self._task:
 *             return None
 */

#line 154 "miniparla/runtime.pyx"


#line 154 "miniparla/runtime.pyx"
/* Python wrapper */

#line 154 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_5inner_task(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_6TaskID_5inner_task = 
#line 154 "miniparla/runtime.pyx"
{"inner_task", (PyCFunction)__pyx_pw_9miniparla_7runtime_6TaskID_5inner_task, METH_O, 0};

#line 154 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_5inner_task(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 154 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 154 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 154 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("inner_task (wrapper)", 0);
  __pyx_r = 
#line 154 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_6TaskID_4inner_task(__pyx_self, ((PyObject *)__pyx_v_self));

#line 154 "miniparla/runtime.pyx"


#line 154 "miniparla/runtime.pyx"
  /* function exit code */

#line 154 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 154 "miniparla/runtime.pyx"
  return __pyx_r;

#line 154 "miniparla/runtime.pyx"
}

#line 154 "miniparla/runtime.pyx"


#line 154 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_4inner_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 154 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 154 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 154 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 154 "miniparla/runtime.pyx"
  int __pyx_t_2;

#line 154 "miniparla/runtime.pyx"
  int __pyx_t_3;

#line 154 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 154 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 154 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 154 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 154 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("inner_task", 0);

  /* "miniparla/runtime.pyx":155
 *     @property
 *     def inner_task(self):
 *         if not self._task:             # <<<<<<<<<<<<<<
 *             return None
 *         return self._task.inner_task
 */

#line 155 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)

#line 155 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 155 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 155, __pyx_L1_error)

#line 155 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 155 "miniparla/runtime.pyx"
  __pyx_t_3 = ((!__pyx_t_2) != 0);

#line 155 "miniparla/runtime.pyx"
  if (__pyx_t_3) {

    /* "miniparla/runtime.pyx":156
 *     def inner_task(self):
 *         if not self._task:
 *             return None             # <<<<<<<<<<<<<<
 *         return self._task.inner_task
 * 
 */

#line 156 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 156 "miniparla/runtime.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 156 "miniparla/runtime.pyx"
    goto __pyx_L0;

    /* "miniparla/runtime.pyx":155
 *     @property
 *     def inner_task(self):
 *         if not self._task:             # <<<<<<<<<<<<<<
 *             return None
 *         return self._task.inner_task
 */

#line 155 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":157
 *         if not self._task:
 *             return None
 *         return self._task.inner_task             # <<<<<<<<<<<<<<
 * 
 *     @task.setter
 */

#line 157 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 157 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)

#line 157 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 157 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_inner_task); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)

#line 157 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 157 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 157 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_4;

#line 157 "miniparla/runtime.pyx"
  __pyx_t_4 = 0;

#line 157 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":154
 * 
 *     @property
 *     def inner_task(self):             # <<<<<<<<<<<<<<
 *         if not self._task:
 *             return None
 */

#line 154 "miniparla/runtime.pyx"


#line 154 "miniparla/runtime.pyx"
  /* function exit code */

#line 154 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 154 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 154 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 154 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.inner_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 154 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 154 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 154 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 154 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 154 "miniparla/runtime.pyx"
  return __pyx_r;

#line 154 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":160
 * 
 *     @task.setter
 *     def task(self, v):             # <<<<<<<<<<<<<<
 *         assert not self._task
 *         self._task = v
 */

#line 160 "miniparla/runtime.pyx"


#line 160 "miniparla/runtime.pyx"
/* Python wrapper */

#line 160 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_7task(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_6TaskID_7task = 
#line 160 "miniparla/runtime.pyx"
{"task", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_6TaskID_7task, METH_VARARGS|METH_KEYWORDS, 0};

#line 160 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_7task(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 160 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_v = 0
#line 160 "miniparla/runtime.pyx"
;

#line 160 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 160 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 160 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 160 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 160 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 160 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("task (wrapper)", 0);

#line 160 "miniparla/runtime.pyx"
  {

#line 160 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_v,0};

#line 160 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 160 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 160 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 160 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 160 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 160 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 160 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 160 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 160 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 160 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 160 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 160 "miniparla/runtime.pyx"
      }

#line 160 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 160 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 160 "miniparla/runtime.pyx"
        case  0:

#line 160 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 160 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 160 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 160 "miniparla/runtime.pyx"
        case  1:

#line 160 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;

#line 160 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("task", 1, 2, 2, 1); 
#line 160 "miniparla/runtime.pyx"
__PYX_ERR(0, 160, __pyx_L3_error)

#line 160 "miniparla/runtime.pyx"
        }

#line 160 "miniparla/runtime.pyx"
      }

#line 160 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 160 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "task") < 0)) __PYX_ERR(0, 160, __pyx_L3_error)

#line 160 "miniparla/runtime.pyx"
      }

#line 160 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 160 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 160 "miniparla/runtime.pyx"
    } else {

#line 160 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 160 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 160 "miniparla/runtime.pyx"
    }

#line 160 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 160 "miniparla/runtime.pyx"
    __pyx_v_v = values[1];

#line 160 "miniparla/runtime.pyx"
  }

#line 160 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 160 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("task", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 160 "miniparla/runtime.pyx"
__PYX_ERR(0, 160, __pyx_L3_error)

#line 160 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 160 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 160 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 160 "miniparla/runtime.pyx"
  return NULL;

#line 160 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 160 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_6TaskID_6task(__pyx_self, __pyx_v_self, __pyx_v_v);

#line 160 "miniparla/runtime.pyx"


#line 160 "miniparla/runtime.pyx"
  /* function exit code */

#line 160 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 160 "miniparla/runtime.pyx"
  return __pyx_r;

#line 160 "miniparla/runtime.pyx"
}

#line 160 "miniparla/runtime.pyx"


#line 160 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_6task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_v) {

#line 160 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 160 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 160 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 160 "miniparla/runtime.pyx"
  int __pyx_t_2;

#line 160 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 160 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 160 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 160 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("task", 0);

  /* "miniparla/runtime.pyx":161
 *     @task.setter
 *     def task(self, v):
 *         assert not self._task             # <<<<<<<<<<<<<<
 *         self._task = v
 * 
 */

#line 161 "miniparla/runtime.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 161 "miniparla/runtime.pyx"
  if (unlikely(!Py_OptimizeFlag)) {

#line 161 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)

#line 161 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 161 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 161, __pyx_L1_error)

#line 161 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 161 "miniparla/runtime.pyx"
    if (unlikely(!((!__pyx_t_2) != 0))) {

#line 161 "miniparla/runtime.pyx"
      PyErr_SetNone(PyExc_AssertionError);

#line 161 "miniparla/runtime.pyx"
      __PYX_ERR(0, 161, __pyx_L1_error)

#line 161 "miniparla/runtime.pyx"
    }

#line 161 "miniparla/runtime.pyx"
  }

#line 161 "miniparla/runtime.pyx"
  #endif

  /* "miniparla/runtime.pyx":162
 *     def task(self, v):
 *         assert not self._task
 *         self._task = v             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 162 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_task, __pyx_v_v) < 0) __PYX_ERR(0, 162, __pyx_L1_error)

  /* "miniparla/runtime.pyx":160
 * 
 *     @task.setter
 *     def task(self, v):             # <<<<<<<<<<<<<<
 *         assert not self._task
 *         self._task = v
 */

#line 160 "miniparla/runtime.pyx"


#line 160 "miniparla/runtime.pyx"
  /* function exit code */

#line 160 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 160 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 160 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 160 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 160 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 160 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 160 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 160 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 160 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 160 "miniparla/runtime.pyx"
  return __pyx_r;

#line 160 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":165
 * 
 *     @property
 *     def id(self):             # <<<<<<<<<<<<<<
 *         return self._id
 * 
 */

#line 165 "miniparla/runtime.pyx"


#line 165 "miniparla/runtime.pyx"
/* Python wrapper */

#line 165 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_9id(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_6TaskID_9id = 
#line 165 "miniparla/runtime.pyx"
{"id", (PyCFunction)__pyx_pw_9miniparla_7runtime_6TaskID_9id, METH_O, 0};

#line 165 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_9id(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 165 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 165 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 165 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("id (wrapper)", 0);
  __pyx_r = 
#line 165 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_6TaskID_8id(__pyx_self, ((PyObject *)__pyx_v_self));

#line 165 "miniparla/runtime.pyx"


#line 165 "miniparla/runtime.pyx"
  /* function exit code */

#line 165 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 165 "miniparla/runtime.pyx"
  return __pyx_r;

#line 165 "miniparla/runtime.pyx"
}

#line 165 "miniparla/runtime.pyx"


#line 165 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_8id(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 165 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 165 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 165 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 165 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 165 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 165 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 165 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("id", 0);

  /* "miniparla/runtime.pyx":166
 *     @property
 *     def id(self):
 *         return self._id             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 166 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 166 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)

#line 166 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 166 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 166 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 166 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":165
 * 
 *     @property
 *     def id(self):             # <<<<<<<<<<<<<<
 *         return self._id
 * 
 */

#line 165 "miniparla/runtime.pyx"


#line 165 "miniparla/runtime.pyx"
  /* function exit code */

#line 165 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 165 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 165 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.id", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 165 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 165 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 165 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 165 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 165 "miniparla/runtime.pyx"
  return __pyx_r;

#line 165 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":169
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self._name
 * 
 */

#line 169 "miniparla/runtime.pyx"


#line 169 "miniparla/runtime.pyx"
/* Python wrapper */

#line 169 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_11name(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_6TaskID_11name = 
#line 169 "miniparla/runtime.pyx"
{"name", (PyCFunction)__pyx_pw_9miniparla_7runtime_6TaskID_11name, METH_O, 0};

#line 169 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_11name(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 169 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 169 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 169 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("name (wrapper)", 0);
  __pyx_r = 
#line 169 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_6TaskID_10name(__pyx_self, ((PyObject *)__pyx_v_self));

#line 169 "miniparla/runtime.pyx"


#line 169 "miniparla/runtime.pyx"
  /* function exit code */

#line 169 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 169 "miniparla/runtime.pyx"
  return __pyx_r;

#line 169 "miniparla/runtime.pyx"
}

#line 169 "miniparla/runtime.pyx"


#line 169 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_10name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 169 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 169 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 169 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 169 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 169 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 169 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 169 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("name", 0);

  /* "miniparla/runtime.pyx":170
 *     @property
 *     def name(self):
 *         return self._name             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 170 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 170 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)

#line 170 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 170 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 170 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 170 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":169
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self._name
 * 
 */

#line 169 "miniparla/runtime.pyx"


#line 169 "miniparla/runtime.pyx"
  /* function exit code */

#line 169 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 169 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 169 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 169 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 169 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 169 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 169 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 169 "miniparla/runtime.pyx"
  return __pyx_r;

#line 169 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":173
 * 
 *     @property
 *     def full_name(self):             # <<<<<<<<<<<<<<
 *         return "_".join(str(i) for i in (self._name, *self._id))
 * 
 */

#line 173 "miniparla/runtime.pyx"


#line 173 "miniparla/runtime.pyx"
/* Python wrapper */

#line 173 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_13full_name(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_6TaskID_13full_name = 
#line 173 "miniparla/runtime.pyx"
{"full_name", (PyCFunction)__pyx_pw_9miniparla_7runtime_6TaskID_13full_name, METH_O, 0};

#line 173 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_13full_name(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 173 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 173 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 173 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("full_name (wrapper)", 0);
  __pyx_r = 
#line 173 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_6TaskID_12full_name(__pyx_self, ((PyObject *)__pyx_v_self));

#line 173 "miniparla/runtime.pyx"


#line 173 "miniparla/runtime.pyx"
  /* function exit code */

#line 173 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 173 "miniparla/runtime.pyx"
  return __pyx_r;

#line 173 "miniparla/runtime.pyx"
}

#line 173 "miniparla/runtime.pyx"
static PyObject *__pyx_gb_9miniparla_7runtime_6TaskID_9full_name_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "miniparla/runtime.pyx":174
 *     @property
 *     def full_name(self):
 *         return "_".join(str(i) for i in (self._name, *self._id))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 174 "miniparla/runtime.pyx"


#line 174 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_9full_name_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr *__pyx_cur_scope
#line 174 "miniparla/runtime.pyx"
;

#line 174 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 174 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 174 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 174 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 174 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 174 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("genexpr", 0);

#line 174 "miniparla/runtime.pyx"
  __pyx_cur_scope = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr *)__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_1_genexpr(__pyx_ptype_9miniparla_7runtime___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);

#line 174 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_cur_scope)) {

#line 174 "miniparla/runtime.pyx"
    __pyx_cur_scope = ((struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr *)Py_None);

#line 174 "miniparla/runtime.pyx"
    __Pyx_INCREF(Py_None);

#line 174 "miniparla/runtime.pyx"
    __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
  } else {

#line 174 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_cur_scope);

#line 174 "miniparla/runtime.pyx"
  }

#line 174 "miniparla/runtime.pyx"
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *) __pyx_self;

#line 174 "miniparla/runtime.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));

#line 174 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);

#line 174 "miniparla/runtime.pyx"
  {

#line 174 "miniparla/runtime.pyx"
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9miniparla_7runtime_6TaskID_9full_name_2generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_TaskID_full_name_locals_genexpr, __pyx_n_s_miniparla_runtime); if (unlikely(!gen)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_cur_scope);

#line 174 "miniparla/runtime.pyx"
    __Pyx_RefNannyFinishContext();

#line 174 "miniparla/runtime.pyx"
    return (PyObject *) gen;

#line 174 "miniparla/runtime.pyx"
  }

#line 174 "miniparla/runtime.pyx"


#line 174 "miniparla/runtime.pyx"
  /* function exit code */

#line 174 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 174 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.full_name.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 174 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 174 "miniparla/runtime.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));

#line 174 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 174 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 174 "miniparla/runtime.pyx"
  return __pyx_r;

#line 174 "miniparla/runtime.pyx"
}

#line 174 "miniparla/runtime.pyx"


#line 174 "miniparla/runtime.pyx"
static PyObject *__pyx_gb_9miniparla_7runtime_6TaskID_9full_name_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{

#line 174 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);

#line 174 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 174 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 174 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 174 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 174 "miniparla/runtime.pyx"
  Py_ssize_t __pyx_t_4;

#line 174 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 174 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 174 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 174 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 174 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("genexpr", 0);

#line 174 "miniparla/runtime.pyx"
  switch (__pyx_generator->resume_label) {

#line 174 "miniparla/runtime.pyx"
    case 0: goto __pyx_L3_first_run;

#line 174 "miniparla/runtime.pyx"
    default: /* CPython raises the right error here */

#line 174 "miniparla/runtime.pyx"
    __Pyx_RefNannyFinishContext();

#line 174 "miniparla/runtime.pyx"
    return NULL;

#line 174 "miniparla/runtime.pyx"
  }

#line 174 "miniparla/runtime.pyx"
  __pyx_L3_first_run:;

#line 174 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_r);

#line 174 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 174, __pyx_L1_error) }

#line 174 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 174 "miniparla/runtime.pyx"
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 174 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 174 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 174 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 174 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_t_3;

#line 174 "miniparla/runtime.pyx"
  __pyx_t_3 = 0;

#line 174 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 174, __pyx_L1_error) }

#line 174 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_id_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 174 "miniparla/runtime.pyx"
  if (__Pyx_PyList_Extend(__pyx_t_1, __pyx_t_3) < 0) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 174 "miniparla/runtime.pyx"
  {

#line 174 "miniparla/runtime.pyx"
    PyObject *__pyx_temp = PyList_AsTuple(__pyx_t_1);

#line 174 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1);

#line 174 "miniparla/runtime.pyx"
    __pyx_t_1 = __pyx_temp; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 174 "miniparla/runtime.pyx"
  }

#line 174 "miniparla/runtime.pyx"
  __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;

#line 174 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 174 "miniparla/runtime.pyx"
  for (;;) {

#line 174 "miniparla/runtime.pyx"
    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 174 "miniparla/runtime.pyx"
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 174 "miniparla/runtime.pyx"
    __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
    #else

#line 174 "miniparla/runtime.pyx"
    __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 174 "miniparla/runtime.pyx"
    #endif

#line 174 "miniparla/runtime.pyx"
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);

#line 174 "miniparla/runtime.pyx"
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_1);

#line 174 "miniparla/runtime.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 174 "miniparla/runtime.pyx"
    __pyx_t_1 = 0;

#line 174 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 174 "miniparla/runtime.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 174 "miniparla/runtime.pyx"
  }

#line 174 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 174 "miniparla/runtime.pyx"
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

#line 174 "miniparla/runtime.pyx"


#line 174 "miniparla/runtime.pyx"
  /* function exit code */

#line 174 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 174 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 174 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;

#line 174 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 174 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 174 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 174 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 174 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 174 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 174 "miniparla/runtime.pyx"
  #if !CYTHON_USE_EXC_INFO_STACK

#line 174 "miniparla/runtime.pyx"
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);

#line 174 "miniparla/runtime.pyx"
  #endif

#line 174 "miniparla/runtime.pyx"
  __pyx_generator->resume_label = -1;

#line 174 "miniparla/runtime.pyx"
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);

#line 174 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 174 "miniparla/runtime.pyx"
  return __pyx_r;

#line 174 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":173
 * 
 *     @property
 *     def full_name(self):             # <<<<<<<<<<<<<<
 *         return "_".join(str(i) for i in (self._name, *self._id))
 * 
 */

#line 173 "miniparla/runtime.pyx"


#line 173 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_12full_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *__pyx_cur_scope
#line 173 "miniparla/runtime.pyx"
;
  PyObject *__pyx_gb_9miniparla_7runtime_6TaskID_9full_name_2generator2 = 0
#line 173 "miniparla/runtime.pyx"
;

#line 173 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 173 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 173 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 173 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 173 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 173 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 173 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 173 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("full_name", 0);

#line 173 "miniparla/runtime.pyx"
  __pyx_cur_scope = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *)__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct__full_name(__pyx_ptype_9miniparla_7runtime___pyx_scope_struct__full_name, __pyx_empty_tuple, NULL);

#line 173 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_cur_scope)) {

#line 173 "miniparla/runtime.pyx"
    __pyx_cur_scope = ((struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *)Py_None);

#line 173 "miniparla/runtime.pyx"
    __Pyx_INCREF(Py_None);

#line 173 "miniparla/runtime.pyx"
    __PYX_ERR(0, 173, __pyx_L1_error)

#line 173 "miniparla/runtime.pyx"
  } else {

#line 173 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_cur_scope);

#line 173 "miniparla/runtime.pyx"
  }

#line 173 "miniparla/runtime.pyx"
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;

#line 173 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);

#line 173 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

  /* "miniparla/runtime.pyx":174
 *     @property
 *     def full_name(self):
 *         return "_".join(str(i) for i in (self._name, *self._id))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 174 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 174 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_pf_9miniparla_7runtime_6TaskID_9full_name_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 174 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 174 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 174 "miniparla/runtime.pyx"
  __pyx_t_1 = PyUnicode_Join(__pyx_n_u__2, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 174 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 174 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 174 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 174 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":173
 * 
 *     @property
 *     def full_name(self):             # <<<<<<<<<<<<<<
 *         return "_".join(str(i) for i in (self._name, *self._id))
 * 
 */

#line 173 "miniparla/runtime.pyx"


#line 173 "miniparla/runtime.pyx"
  /* function exit code */

#line 173 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 173 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 173 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 173 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.full_name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 173 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 173 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 173 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_gb_9miniparla_7runtime_6TaskID_9full_name_2generator2);

#line 173 "miniparla/runtime.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));

#line 173 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 173 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 173 "miniparla/runtime.pyx"
  return __pyx_r;

#line 173 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":177
 * 
 *     @property
 *     def dependencies(self):             # <<<<<<<<<<<<<<
 *         return self._dependencies
 * 
 */

#line 177 "miniparla/runtime.pyx"


#line 177 "miniparla/runtime.pyx"
/* Python wrapper */

#line 177 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_15dependencies(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_6TaskID_15dependencies = 
#line 177 "miniparla/runtime.pyx"
{"dependencies", (PyCFunction)__pyx_pw_9miniparla_7runtime_6TaskID_15dependencies, METH_O, 0};

#line 177 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_15dependencies(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 177 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 177 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 177 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("dependencies (wrapper)", 0);
  __pyx_r = 
#line 177 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_6TaskID_14dependencies(__pyx_self, ((PyObject *)__pyx_v_self));

#line 177 "miniparla/runtime.pyx"


#line 177 "miniparla/runtime.pyx"
  /* function exit code */

#line 177 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 177 "miniparla/runtime.pyx"
  return __pyx_r;

#line 177 "miniparla/runtime.pyx"
}

#line 177 "miniparla/runtime.pyx"


#line 177 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_14dependencies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 177 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 177 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 177 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 177 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 177 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 177 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 177 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("dependencies", 0);

  /* "miniparla/runtime.pyx":178
 *     @property
 *     def dependencies(self):
 *         return self._dependencies             # <<<<<<<<<<<<<<
 * 
 *     @dependencies.setter
 */

#line 178 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 178 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dependencies); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)

#line 178 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 178 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 178 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 178 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":177
 * 
 *     @property
 *     def dependencies(self):             # <<<<<<<<<<<<<<
 *         return self._dependencies
 * 
 */

#line 177 "miniparla/runtime.pyx"


#line 177 "miniparla/runtime.pyx"
  /* function exit code */

#line 177 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 177 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 177 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.dependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 177 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 177 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 177 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 177 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 177 "miniparla/runtime.pyx"
  return __pyx_r;

#line 177 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":181
 * 
 *     @dependencies.setter
 *     def dependencies(self, v):             # <<<<<<<<<<<<<<
 *         self._dependencies = v
 * 
 */

#line 181 "miniparla/runtime.pyx"


#line 181 "miniparla/runtime.pyx"
/* Python wrapper */

#line 181 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_17dependencies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_6TaskID_17dependencies = 
#line 181 "miniparla/runtime.pyx"
{"dependencies", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_6TaskID_17dependencies, METH_VARARGS|METH_KEYWORDS, 0};

#line 181 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_17dependencies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 181 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_v = 0
#line 181 "miniparla/runtime.pyx"
;

#line 181 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 181 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 181 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 181 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 181 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 181 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("dependencies (wrapper)", 0);

#line 181 "miniparla/runtime.pyx"
  {

#line 181 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_v,0};

#line 181 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 181 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 181 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 181 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 181 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 181 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 181 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 181 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 181 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 181 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 181 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 181 "miniparla/runtime.pyx"
      }

#line 181 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 181 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 181 "miniparla/runtime.pyx"
        case  0:

#line 181 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 181 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 181 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 181 "miniparla/runtime.pyx"
        case  1:

#line 181 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;

#line 181 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dependencies", 1, 2, 2, 1); 
#line 181 "miniparla/runtime.pyx"
__PYX_ERR(0, 181, __pyx_L3_error)

#line 181 "miniparla/runtime.pyx"
        }

#line 181 "miniparla/runtime.pyx"
      }

#line 181 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 181 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dependencies") < 0)) __PYX_ERR(0, 181, __pyx_L3_error)

#line 181 "miniparla/runtime.pyx"
      }

#line 181 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 181 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 181 "miniparla/runtime.pyx"
    } else {

#line 181 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 181 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 181 "miniparla/runtime.pyx"
    }

#line 181 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 181 "miniparla/runtime.pyx"
    __pyx_v_v = values[1];

#line 181 "miniparla/runtime.pyx"
  }

#line 181 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 181 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dependencies", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 181 "miniparla/runtime.pyx"
__PYX_ERR(0, 181, __pyx_L3_error)

#line 181 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 181 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.dependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 181 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 181 "miniparla/runtime.pyx"
  return NULL;

#line 181 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 181 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_6TaskID_16dependencies(__pyx_self, __pyx_v_self, __pyx_v_v);

#line 181 "miniparla/runtime.pyx"


#line 181 "miniparla/runtime.pyx"
  /* function exit code */

#line 181 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 181 "miniparla/runtime.pyx"
  return __pyx_r;

#line 181 "miniparla/runtime.pyx"
}

#line 181 "miniparla/runtime.pyx"


#line 181 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_16dependencies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_v) {

#line 181 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 181 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 181 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 181 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 181 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 181 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("dependencies", 0);

  /* "miniparla/runtime.pyx":182
 *     @dependencies.setter
 *     def dependencies(self, v):
 *         self._dependencies = v             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */

#line 182 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_dependencies, __pyx_v_v) < 0) __PYX_ERR(0, 182, __pyx_L1_error)

  /* "miniparla/runtime.pyx":181
 * 
 *     @dependencies.setter
 *     def dependencies(self, v):             # <<<<<<<<<<<<<<
 *         self._dependencies = v
 * 
 */

#line 181 "miniparla/runtime.pyx"


#line 181 "miniparla/runtime.pyx"
  /* function exit code */

#line 181 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 181 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 181 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 181 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.dependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 181 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 181 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 181 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 181 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 181 "miniparla/runtime.pyx"
  return __pyx_r;

#line 181 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":184
 *         self._dependencies = v
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return hash(self.full_name)
 * 
 */

#line 184 "miniparla/runtime.pyx"


#line 184 "miniparla/runtime.pyx"
/* Python wrapper */

#line 184 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_19__hash__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_6TaskID_19__hash__ = 
#line 184 "miniparla/runtime.pyx"
{"__hash__", (PyCFunction)__pyx_pw_9miniparla_7runtime_6TaskID_19__hash__, METH_O, 0};

#line 184 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_19__hash__(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 184 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 184 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 184 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = 
#line 184 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_6TaskID_18__hash__(__pyx_self, ((PyObject *)__pyx_v_self));

#line 184 "miniparla/runtime.pyx"


#line 184 "miniparla/runtime.pyx"
  /* function exit code */

#line 184 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 184 "miniparla/runtime.pyx"
  return __pyx_r;

#line 184 "miniparla/runtime.pyx"
}

#line 184 "miniparla/runtime.pyx"


#line 184 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_18__hash__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 184 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 184 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 184 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 184 "miniparla/runtime.pyx"
  Py_hash_t __pyx_t_2;

#line 184 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 184 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 184 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 184 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "miniparla/runtime.pyx":185
 * 
 *     def __hash__(self):
 *         return hash(self.full_name)             # <<<<<<<<<<<<<<
 * 
 *     def __await__(self):
 */

#line 185 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 185 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_full_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)

#line 185 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 185 "miniparla/runtime.pyx"
  __pyx_t_2 = PyObject_Hash(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_hash_t)-1))) __PYX_ERR(0, 185, __pyx_L1_error)

#line 185 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 185 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyInt_FromHash_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)

#line 185 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 185 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 185 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 185 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":184
 *         self._dependencies = v
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return hash(self.full_name)
 * 
 */

#line 184 "miniparla/runtime.pyx"


#line 184 "miniparla/runtime.pyx"
  /* function exit code */

#line 184 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 184 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 184 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 184 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 184 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 184 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 184 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 184 "miniparla/runtime.pyx"
  return __pyx_r;

#line 184 "miniparla/runtime.pyx"
}

#line 184 "miniparla/runtime.pyx"
static PyObject *__pyx_gb_9miniparla_7runtime_6TaskID_22generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "miniparla/runtime.pyx":187
 *         return hash(self.full_name)
 * 
 *     def __await__(self):             # <<<<<<<<<<<<<<
 *         return (yield TaskAwaitTasks([self.task], self.task))
 * 
 */

#line 187 "miniparla/runtime.pyx"


#line 187 "miniparla/runtime.pyx"
/* Python wrapper */

#line 187 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_21__await__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_6TaskID_21__await__ = 
#line 187 "miniparla/runtime.pyx"
{"__await__", (PyCFunction)__pyx_pw_9miniparla_7runtime_6TaskID_21__await__, METH_O, 0};

#line 187 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_6TaskID_21__await__(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 187 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 187 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 187 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__await__ (wrapper)", 0);
  __pyx_r = 
#line 187 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_6TaskID_20__await__(__pyx_self, ((PyObject *)__pyx_v_self));

#line 187 "miniparla/runtime.pyx"


#line 187 "miniparla/runtime.pyx"
  /* function exit code */

#line 187 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 187 "miniparla/runtime.pyx"
  return __pyx_r;

#line 187 "miniparla/runtime.pyx"
}

#line 187 "miniparla/runtime.pyx"


#line 187 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_6TaskID_20__await__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ *__pyx_cur_scope
#line 187 "miniparla/runtime.pyx"
;

#line 187 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 187 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 187 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 187 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 187 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 187 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__await__", 0);

#line 187 "miniparla/runtime.pyx"
  __pyx_cur_scope = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ *)__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_2___await__(__pyx_ptype_9miniparla_7runtime___pyx_scope_struct_2___await__, __pyx_empty_tuple, NULL);

#line 187 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_cur_scope)) {

#line 187 "miniparla/runtime.pyx"
    __pyx_cur_scope = ((struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ *)Py_None);

#line 187 "miniparla/runtime.pyx"
    __Pyx_INCREF(Py_None);

#line 187 "miniparla/runtime.pyx"
    __PYX_ERR(0, 187, __pyx_L1_error)

#line 187 "miniparla/runtime.pyx"
  } else {

#line 187 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_cur_scope);

#line 187 "miniparla/runtime.pyx"
  }

#line 187 "miniparla/runtime.pyx"
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;

#line 187 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);

#line 187 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

#line 187 "miniparla/runtime.pyx"
  {

#line 187 "miniparla/runtime.pyx"
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9miniparla_7runtime_6TaskID_22generator, __pyx_codeobj__3, (PyObject *) __pyx_cur_scope, __pyx_n_s_await, __pyx_n_s_TaskID___await, __pyx_n_s_miniparla_runtime); if (unlikely(!gen)) __PYX_ERR(0, 187, __pyx_L1_error)

#line 187 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_cur_scope);

#line 187 "miniparla/runtime.pyx"
    __Pyx_RefNannyFinishContext();

#line 187 "miniparla/runtime.pyx"
    return (PyObject *) gen;

#line 187 "miniparla/runtime.pyx"
  }

#line 187 "miniparla/runtime.pyx"


#line 187 "miniparla/runtime.pyx"
  /* function exit code */

#line 187 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 187 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskID.__await__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 187 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 187 "miniparla/runtime.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));

#line 187 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 187 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 187 "miniparla/runtime.pyx"
  return __pyx_r;

#line 187 "miniparla/runtime.pyx"
}

#line 187 "miniparla/runtime.pyx"


#line 187 "miniparla/runtime.pyx"
static PyObject *__pyx_gb_9miniparla_7runtime_6TaskID_22generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{

#line 187 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ *__pyx_cur_scope = ((struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ *)__pyx_generator->closure);

#line 187 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 187 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 187 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 187 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 187 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 187 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 187 "miniparla/runtime.pyx"
  int __pyx_t_6;

#line 187 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 187 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 187 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 187 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 187 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 187 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__await__", 0);

#line 187 "miniparla/runtime.pyx"
  switch (__pyx_generator->resume_label) {

#line 187 "miniparla/runtime.pyx"
    case 0: goto __pyx_L3_first_run;

#line 187 "miniparla/runtime.pyx"
    case 1: goto __pyx_L4_resume_from_yield;

#line 187 "miniparla/runtime.pyx"
    default: /* CPython raises the right error here */

#line 187 "miniparla/runtime.pyx"
    __Pyx_RefNannyFinishContext();

#line 187 "miniparla/runtime.pyx"
    return NULL;

#line 187 "miniparla/runtime.pyx"
  }

#line 187 "miniparla/runtime.pyx"
  __pyx_L3_first_run:;

#line 187 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 187, __pyx_L1_error)

  /* "miniparla/runtime.pyx":188
 * 
 *     def __await__(self):
 *         return (yield TaskAwaitTasks([self.task], self.task))             # <<<<<<<<<<<<<<
 * 
 * cdef class PyInnerTask:
 */

#line 188 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 188 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TaskAwaitTasks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 188 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_task_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 188 "miniparla/runtime.pyx"
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 188 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 188 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 188 "miniparla/runtime.pyx"
  __pyx_t_3 = 0;

#line 188 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_task_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 188 "miniparla/runtime.pyx"
  __pyx_t_5 = NULL;

#line 188 "miniparla/runtime.pyx"
  __pyx_t_6 = 0;

#line 188 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 188 "miniparla/runtime.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);

#line 188 "miniparla/runtime.pyx"
    if (likely(__pyx_t_5)) {

#line 188 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 188 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 188 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 188 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 188 "miniparla/runtime.pyx"
      __pyx_t_6 = 1;

#line 188 "miniparla/runtime.pyx"
    }

#line 188 "miniparla/runtime.pyx"
  }

#line 188 "miniparla/runtime.pyx"
  #if CYTHON_FAST_PYCALL

#line 188 "miniparla/runtime.pyx"
  if (PyFunction_Check(__pyx_t_2)) {

#line 188 "miniparla/runtime.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_t_3};

#line 188 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 188 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 188 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 188 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 188 "miniparla/runtime.pyx"
  } else

#line 188 "miniparla/runtime.pyx"
  #endif

#line 188 "miniparla/runtime.pyx"
  #if CYTHON_FAST_PYCCALL

#line 188 "miniparla/runtime.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {

#line 188 "miniparla/runtime.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_t_3};

#line 188 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 188 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 188 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 188 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 188 "miniparla/runtime.pyx"
  } else

#line 188 "miniparla/runtime.pyx"
  #endif

#line 188 "miniparla/runtime.pyx"
  {

#line 188 "miniparla/runtime.pyx"
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 188 "miniparla/runtime.pyx"
    if (__pyx_t_5) {

#line 188 "miniparla/runtime.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 188 "miniparla/runtime.pyx"
    }

#line 188 "miniparla/runtime.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 188 "miniparla/runtime.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_4);

#line 188 "miniparla/runtime.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 188 "miniparla/runtime.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);

#line 188 "miniparla/runtime.pyx"
    __pyx_t_4 = 0;

#line 188 "miniparla/runtime.pyx"
    __pyx_t_3 = 0;

#line 188 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 188 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 188 "miniparla/runtime.pyx"
  }

#line 188 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 188 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 188 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 188 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 188 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 188 "miniparla/runtime.pyx"
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);

#line 188 "miniparla/runtime.pyx"
  /* return from generator, yielding value */

#line 188 "miniparla/runtime.pyx"
  __pyx_generator->resume_label = 1;

#line 188 "miniparla/runtime.pyx"
  return __pyx_r;

#line 188 "miniparla/runtime.pyx"
  __pyx_L4_resume_from_yield:;

#line 188 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 188, __pyx_L1_error)
  __pyx_t_1 = __pyx_sent_value; 
#line 188 "miniparla/runtime.pyx"
__Pyx_INCREF(__pyx_t_1);

#line 188 "miniparla/runtime.pyx"
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);

#line 188 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 188 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 188 "miniparla/runtime.pyx"
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "miniparla/runtime.pyx":187
 *         return hash(self.full_name)
 * 
 *     def __await__(self):             # <<<<<<<<<<<<<<
 *         return (yield TaskAwaitTasks([self.task], self.task))
 * 
 */

#line 187 "miniparla/runtime.pyx"


#line 187 "miniparla/runtime.pyx"
  /* function exit code */

#line 187 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 187 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 187 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 187 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 187 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 187 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 187 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 187 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("__await__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 187 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 187 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;

#line 187 "miniparla/runtime.pyx"
  #if !CYTHON_USE_EXC_INFO_STACK

#line 187 "miniparla/runtime.pyx"
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);

#line 187 "miniparla/runtime.pyx"
  #endif

#line 187 "miniparla/runtime.pyx"
  __pyx_generator->resume_label = -1;

#line 187 "miniparla/runtime.pyx"
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);

#line 187 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 187 "miniparla/runtime.pyx"
  return __pyx_r;

#line 187 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":193
 *     cdef InnerTask* task
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         #print("Made new task (C)", flush=True)
 *         cdef InnerTask* temp
 */

#line 193 "miniparla/runtime.pyx"


#line 193 "miniparla/runtime.pyx"
/* Python wrapper */

#line 193 "miniparla/runtime.pyx"
static int __pyx_pw_9miniparla_7runtime_11PyInnerTask_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 193 "miniparla/runtime.pyx"
static int __pyx_pw_9miniparla_7runtime_11PyInnerTask_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 193 "miniparla/runtime.pyx"
  int __pyx_r;

#line 193 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 193 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 193 "miniparla/runtime.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 193 "miniparla/runtime.pyx"
}

#line 193 "miniparla/runtime.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 193 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11PyInnerTask___cinit__(((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_self));

#line 193 "miniparla/runtime.pyx"


#line 193 "miniparla/runtime.pyx"
  /* function exit code */

#line 193 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 193 "miniparla/runtime.pyx"
  return __pyx_r;

#line 193 "miniparla/runtime.pyx"
}

#line 193 "miniparla/runtime.pyx"


#line 193 "miniparla/runtime.pyx"
static int __pyx_pf_9miniparla_7runtime_11PyInnerTask___cinit__(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self) {
  InnerTask *__pyx_v_temp
#line 193 "miniparla/runtime.pyx"
;

#line 193 "miniparla/runtime.pyx"
  int __pyx_r;

#line 193 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 193 "miniparla/runtime.pyx"
  InnerTask *__pyx_t_1;

#line 193 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 193 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 193 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 193 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "miniparla/runtime.pyx":196
 *         #print("Made new task (C)", flush=True)
 *         cdef InnerTask* temp
 *         temp = new InnerTask()             # <<<<<<<<<<<<<<
 *         self.task = temp
 * 
 */

#line 196 "miniparla/runtime.pyx"
  try {

#line 196 "miniparla/runtime.pyx"
    __pyx_t_1 = new InnerTask();

#line 196 "miniparla/runtime.pyx"
  } catch(...) {

#line 196 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 196 "miniparla/runtime.pyx"
    __PYX_ERR(0, 196, __pyx_L1_error)

#line 196 "miniparla/runtime.pyx"
  }

#line 196 "miniparla/runtime.pyx"
  __pyx_v_temp = __pyx_t_1;

  /* "miniparla/runtime.pyx":197
 *         cdef InnerTask* temp
 *         temp = new InnerTask()
 *         self.task = temp             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, long id, object python_task, float vcus):
 */

#line 197 "miniparla/runtime.pyx"
  __pyx_v_self->task = __pyx_v_temp;

  /* "miniparla/runtime.pyx":193
 *     cdef InnerTask* task
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         #print("Made new task (C)", flush=True)
 *         cdef InnerTask* temp
 */

#line 193 "miniparla/runtime.pyx"


#line 193 "miniparla/runtime.pyx"
  /* function exit code */

#line 193 "miniparla/runtime.pyx"
  __pyx_r = 0;

#line 193 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 193 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 193 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 193 "miniparla/runtime.pyx"
  __pyx_r = -1;

#line 193 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 193 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 193 "miniparla/runtime.pyx"
  return __pyx_r;

#line 193 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":199
 *         self.task = temp
 * 
 *     def __init__(self, long id, object python_task, float vcus):             # <<<<<<<<<<<<<<
 *         cdef InnerTask* temp = self.task
 * 
 */

#line 199 "miniparla/runtime.pyx"


#line 199 "miniparla/runtime.pyx"
/* Python wrapper */

#line 199 "miniparla/runtime.pyx"
static int __pyx_pw_9miniparla_7runtime_11PyInnerTask_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 199 "miniparla/runtime.pyx"
static int __pyx_pw_9miniparla_7runtime_11PyInnerTask_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_id
#line 199 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_python_task = 0
#line 199 "miniparla/runtime.pyx"
;
  float __pyx_v_vcus
#line 199 "miniparla/runtime.pyx"
;

#line 199 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 199 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 199 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 199 "miniparla/runtime.pyx"
  int __pyx_r;

#line 199 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 199 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 199 "miniparla/runtime.pyx"
  {

#line 199 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_python_task,&__pyx_n_s_vcus,0};

#line 199 "miniparla/runtime.pyx"
    PyObject* values[3] = {0,0,0};

#line 199 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 199 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 199 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 199 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  3: 
#line 199 "miniparla/runtime.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 199 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 199 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 199 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 199 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 199 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 199 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 199 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 199 "miniparla/runtime.pyx"
      }

#line 199 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 199 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 199 "miniparla/runtime.pyx"
        case  0:

#line 199 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else 
#line 199 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 199 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 199 "miniparla/runtime.pyx"
        case  1:

#line 199 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_python_task)) != 0)) kw_args--;

#line 199 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); 
#line 199 "miniparla/runtime.pyx"
__PYX_ERR(0, 199, __pyx_L3_error)

#line 199 "miniparla/runtime.pyx"
        }

#line 199 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 199 "miniparla/runtime.pyx"
        case  2:

#line 199 "miniparla/runtime.pyx"
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vcus)) != 0)) kw_args--;

#line 199 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); 
#line 199 "miniparla/runtime.pyx"
__PYX_ERR(0, 199, __pyx_L3_error)

#line 199 "miniparla/runtime.pyx"
        }

#line 199 "miniparla/runtime.pyx"
      }

#line 199 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 199 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 199, __pyx_L3_error)

#line 199 "miniparla/runtime.pyx"
      }

#line 199 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 199 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 199 "miniparla/runtime.pyx"
    } else {

#line 199 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 199 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 199 "miniparla/runtime.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 199 "miniparla/runtime.pyx"
    }

#line 199 "miniparla/runtime.pyx"
    __pyx_v_id = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_id == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L3_error)

#line 199 "miniparla/runtime.pyx"
    __pyx_v_python_task = values[1];

#line 199 "miniparla/runtime.pyx"
    __pyx_v_vcus = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_vcus == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L3_error)

#line 199 "miniparla/runtime.pyx"
  }

#line 199 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 199 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 199 "miniparla/runtime.pyx"
__PYX_ERR(0, 199, __pyx_L3_error)

#line 199 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 199 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 199 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 199 "miniparla/runtime.pyx"
  return -1;

#line 199 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 199 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11PyInnerTask_2__init__(((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_self), __pyx_v_id, __pyx_v_python_task, __pyx_v_vcus);

#line 199 "miniparla/runtime.pyx"


#line 199 "miniparla/runtime.pyx"
  /* function exit code */

#line 199 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 199 "miniparla/runtime.pyx"
  return __pyx_r;

#line 199 "miniparla/runtime.pyx"
}

#line 199 "miniparla/runtime.pyx"


#line 199 "miniparla/runtime.pyx"
static int __pyx_pf_9miniparla_7runtime_11PyInnerTask_2__init__(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, long __pyx_v_id, PyObject *__pyx_v_python_task, float __pyx_v_vcus) {
  InnerTask *__pyx_v_temp
#line 199 "miniparla/runtime.pyx"
;

#line 199 "miniparla/runtime.pyx"
  int __pyx_r;

#line 199 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 199 "miniparla/runtime.pyx"
  InnerTask *__pyx_t_1;

#line 199 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 199 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 199 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 199 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "miniparla/runtime.pyx":200
 * 
 *     def __init__(self, long id, object python_task, float vcus):
 *         cdef InnerTask* temp = self.task             # <<<<<<<<<<<<<<
 * 
 *         temp.id = id
 */

#line 200 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->task;

#line 200 "miniparla/runtime.pyx"
  __pyx_v_temp = __pyx_t_1;

  /* "miniparla/runtime.pyx":202
 *         cdef InnerTask* temp = self.task
 * 
 *         temp.id = id             # <<<<<<<<<<<<<<
 *         temp.vcus = vcus
 * 
 */

#line 202 "miniparla/runtime.pyx"
  __pyx_v_temp->id = __pyx_v_id;

  /* "miniparla/runtime.pyx":203
 * 
 *         temp.id = id
 *         temp.vcus = vcus             # <<<<<<<<<<<<<<
 * 
 *         temp.set_task(<void*> python_task)
 */

#line 203 "miniparla/runtime.pyx"
  __pyx_v_temp->vcus = __pyx_v_vcus;

  /* "miniparla/runtime.pyx":205
 *         temp.vcus = vcus
 * 
 *         temp.set_task(<void*> python_task)             # <<<<<<<<<<<<<<
 *         #print("Made new task (Python)", flush=True)
 *         #print("Task id", self.task.id, flush=True)
 */

#line 205 "miniparla/runtime.pyx"
  try {

#line 205 "miniparla/runtime.pyx"
    __pyx_v_temp->set_task(((void *)__pyx_v_python_task));

#line 205 "miniparla/runtime.pyx"
  } catch(...) {

#line 205 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 205 "miniparla/runtime.pyx"
    __PYX_ERR(0, 205, __pyx_L1_error)

#line 205 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":199
 *         self.task = temp
 * 
 *     def __init__(self, long id, object python_task, float vcus):             # <<<<<<<<<<<<<<
 *         cdef InnerTask* temp = self.task
 * 
 */

#line 199 "miniparla/runtime.pyx"


#line 199 "miniparla/runtime.pyx"
  /* function exit code */

#line 199 "miniparla/runtime.pyx"
  __pyx_r = 0;

#line 199 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 199 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 199 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 199 "miniparla/runtime.pyx"
  __pyx_r = -1;

#line 199 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 199 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 199 "miniparla/runtime.pyx"
  return __pyx_r;

#line 199 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":210
 * 
 * 
 *     cpdef set_dependencies(self, dependencies):             # <<<<<<<<<<<<<<
 *         for dependency in dependencies:
 *             inner_dep = dependency.inner_task
 */

#line 210 "miniparla/runtime.pyx"


#line 210 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_5set_dependencies(PyObject *__pyx_v_self, PyObject *__pyx_v_dependencies); /*proto*/

#line 210 "miniparla/runtime.pyx"
static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_set_dependencies(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, PyObject *__pyx_v_dependencies, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_dependency = NULL
#line 210 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_inner_dep = NULL
#line 210 "miniparla/runtime.pyx"
;

#line 210 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 210 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 210 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 210 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 210 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 210 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 210 "miniparla/runtime.pyx"
  Py_ssize_t __pyx_t_5;

#line 210 "miniparla/runtime.pyx"
  PyObject *(*__pyx_t_6)(PyObject *);

#line 210 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 210 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 210 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 210 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("set_dependencies", 0);

#line 210 "miniparla/runtime.pyx"
  /* Check if called by wrapper */

#line 210 "miniparla/runtime.pyx"
  if (unlikely(__pyx_skip_dispatch)) ;

#line 210 "miniparla/runtime.pyx"
  /* Check if overridden in Python */

#line 210 "miniparla/runtime.pyx"
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {

#line 210 "miniparla/runtime.pyx"
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 210 "miniparla/runtime.pyx"
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 210 "miniparla/runtime.pyx"
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {

#line 210 "miniparla/runtime.pyx"
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 210 "miniparla/runtime.pyx"
      #endif

#line 210 "miniparla/runtime.pyx"
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_dependencies); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)

#line 210 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 210 "miniparla/runtime.pyx"
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9miniparla_7runtime_11PyInnerTask_5set_dependencies)) {

#line 210 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_r);

#line 210 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; 
#line 210 "miniparla/runtime.pyx"
__pyx_t_4 = NULL;

#line 210 "miniparla/runtime.pyx"
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 210 "miniparla/runtime.pyx"
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 210 "miniparla/runtime.pyx"
          if (likely(__pyx_t_4)) {

#line 210 "miniparla/runtime.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 210 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_t_4);

#line 210 "miniparla/runtime.pyx"
            __Pyx_INCREF(function);

#line 210 "miniparla/runtime.pyx"
            __Pyx_DECREF_SET(__pyx_t_3, function);

#line 210 "miniparla/runtime.pyx"
          }

#line 210 "miniparla/runtime.pyx"
        }

#line 210 "miniparla/runtime.pyx"
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_dependencies) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_dependencies);

#line 210 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 210 "miniparla/runtime.pyx"
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)

#line 210 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 210 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 210 "miniparla/runtime.pyx"
        __pyx_r = __pyx_t_2;

#line 210 "miniparla/runtime.pyx"
        __pyx_t_2 = 0;

#line 210 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 210 "miniparla/runtime.pyx"
        goto __pyx_L0;

#line 210 "miniparla/runtime.pyx"
      }

#line 210 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 210 "miniparla/runtime.pyx"
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 210 "miniparla/runtime.pyx"
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));

#line 210 "miniparla/runtime.pyx"
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {

#line 210 "miniparla/runtime.pyx"
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 210 "miniparla/runtime.pyx"
      }

#line 210 "miniparla/runtime.pyx"
      #endif

#line 210 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 210 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 210 "miniparla/runtime.pyx"
    }

#line 210 "miniparla/runtime.pyx"
    #endif

#line 210 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":211
 * 
 *     cpdef set_dependencies(self, dependencies):
 *         for dependency in dependencies:             # <<<<<<<<<<<<<<
 *             inner_dep = dependency.inner_task
 *             self.add_dependency(inner_dep)
 */

#line 211 "miniparla/runtime.pyx"
  if (likely(PyList_CheckExact(__pyx_v_dependencies)) || PyTuple_CheckExact(__pyx_v_dependencies)) {

#line 211 "miniparla/runtime.pyx"
    __pyx_t_1 = __pyx_v_dependencies; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;

#line 211 "miniparla/runtime.pyx"
    __pyx_t_6 = NULL;

#line 211 "miniparla/runtime.pyx"
  } else {
    __pyx_t_5 = -1; 
#line 211 "miniparla/runtime.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_v_dependencies); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)

#line 211 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 211 "miniparla/runtime.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L1_error)

#line 211 "miniparla/runtime.pyx"
  }

#line 211 "miniparla/runtime.pyx"
  for (;;) {

#line 211 "miniparla/runtime.pyx"
    if (likely(!__pyx_t_6)) {

#line 211 "miniparla/runtime.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 211 "miniparla/runtime.pyx"
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 211 "miniparla/runtime.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 211 "miniparla/runtime.pyx"
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 211, __pyx_L1_error)

#line 211 "miniparla/runtime.pyx"
        #else

#line 211 "miniparla/runtime.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)

#line 211 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 211 "miniparla/runtime.pyx"
        #endif

#line 211 "miniparla/runtime.pyx"
      } else {

#line 211 "miniparla/runtime.pyx"
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 211 "miniparla/runtime.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 211 "miniparla/runtime.pyx"
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 211, __pyx_L1_error)

#line 211 "miniparla/runtime.pyx"
        #else

#line 211 "miniparla/runtime.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)

#line 211 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 211 "miniparla/runtime.pyx"
        #endif

#line 211 "miniparla/runtime.pyx"
      }
    } else 
#line 211 "miniparla/runtime.pyx"
{

#line 211 "miniparla/runtime.pyx"
      __pyx_t_2 = __pyx_t_6(__pyx_t_1);

#line 211 "miniparla/runtime.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 211 "miniparla/runtime.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 211 "miniparla/runtime.pyx"
        if (exc_type) {

#line 211 "miniparla/runtime.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 211 "miniparla/runtime.pyx"
          else __PYX_ERR(0, 211, __pyx_L1_error)

#line 211 "miniparla/runtime.pyx"
        }

#line 211 "miniparla/runtime.pyx"
        break;

#line 211 "miniparla/runtime.pyx"
      }

#line 211 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 211 "miniparla/runtime.pyx"
    }

#line 211 "miniparla/runtime.pyx"
    __Pyx_XDECREF_SET(__pyx_v_dependency, __pyx_t_2);

#line 211 "miniparla/runtime.pyx"
    __pyx_t_2 = 0;

    /* "miniparla/runtime.pyx":212
 *     cpdef set_dependencies(self, dependencies):
 *         for dependency in dependencies:
 *             inner_dep = dependency.inner_task             # <<<<<<<<<<<<<<
 *             self.add_dependency(inner_dep)
 * 
 */

#line 212 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dependency, __pyx_n_s_inner_task); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)

#line 212 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 212 "miniparla/runtime.pyx"
    __Pyx_XDECREF_SET(__pyx_v_inner_dep, __pyx_t_2);

#line 212 "miniparla/runtime.pyx"
    __pyx_t_2 = 0;

    /* "miniparla/runtime.pyx":213
 *         for dependency in dependencies:
 *             inner_dep = dependency.inner_task
 *             self.add_dependency(inner_dep)             # <<<<<<<<<<<<<<
 * 
 *     cpdef add_dependency(self, PyInnerTask dependency):
 */

#line 213 "miniparla/runtime.pyx"
    if (!(likely(((__pyx_v_inner_dep) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_inner_dep, __pyx_ptype_9miniparla_7runtime_PyInnerTask))))) __PYX_ERR(0, 213, __pyx_L1_error)

#line 213 "miniparla/runtime.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_9miniparla_7runtime_PyInnerTask *)__pyx_v_self->__pyx_vtab)->add_dependency(__pyx_v_self, ((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_inner_dep), 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)

#line 213 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 213 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "miniparla/runtime.pyx":211
 * 
 *     cpdef set_dependencies(self, dependencies):
 *         for dependency in dependencies:             # <<<<<<<<<<<<<<
 *             inner_dep = dependency.inner_task
 *             self.add_dependency(inner_dep)
 */

#line 211 "miniparla/runtime.pyx"
  }

#line 211 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":210
 * 
 * 
 *     cpdef set_dependencies(self, dependencies):             # <<<<<<<<<<<<<<
 *         for dependency in dependencies:
 *             inner_dep = dependency.inner_task
 */

#line 210 "miniparla/runtime.pyx"


#line 210 "miniparla/runtime.pyx"
  /* function exit code */

#line 210 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 210 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 210 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 210 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 210 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 210 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 210 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 210 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.set_dependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 210 "miniparla/runtime.pyx"
  __pyx_r = 0;

#line 210 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 210 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_dependency);

#line 210 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_inner_dep);

#line 210 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 210 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 210 "miniparla/runtime.pyx"
  return __pyx_r;

#line 210 "miniparla/runtime.pyx"
}

#line 210 "miniparla/runtime.pyx"


#line 210 "miniparla/runtime.pyx"
/* Python wrapper */

#line 210 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_5set_dependencies(PyObject *__pyx_v_self, PyObject *__pyx_v_dependencies); /*proto*/

#line 210 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_5set_dependencies(PyObject *__pyx_v_self, PyObject *__pyx_v_dependencies) {

#line 210 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 210 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 210 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("set_dependencies (wrapper)", 0);
  __pyx_r = 
#line 210 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11PyInnerTask_4set_dependencies(((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_self), ((PyObject *)__pyx_v_dependencies));

#line 210 "miniparla/runtime.pyx"


#line 210 "miniparla/runtime.pyx"
  /* function exit code */

#line 210 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 210 "miniparla/runtime.pyx"
  return __pyx_r;

#line 210 "miniparla/runtime.pyx"
}

#line 210 "miniparla/runtime.pyx"


#line 210 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_4set_dependencies(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, PyObject *__pyx_v_dependencies) {

#line 210 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 210 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 210 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 210 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 210 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 210 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 210 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("set_dependencies", 0);

#line 210 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 210 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_f_9miniparla_7runtime_11PyInnerTask_set_dependencies(__pyx_v_self, __pyx_v_dependencies, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)

#line 210 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 210 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 210 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 210 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 210 "miniparla/runtime.pyx"


#line 210 "miniparla/runtime.pyx"
  /* function exit code */

#line 210 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 210 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 210 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.set_dependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 210 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 210 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 210 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 210 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 210 "miniparla/runtime.pyx"
  return __pyx_r;

#line 210 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":215
 *             self.add_dependency(inner_dep)
 * 
 *     cpdef add_dependency(self, PyInnerTask dependency):             # <<<<<<<<<<<<<<
 *         task = dependency.task
 *         cdef InnerTask* p_dep = task
 */

#line 215 "miniparla/runtime.pyx"


#line 215 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_7add_dependency(PyObject *__pyx_v_self, PyObject *__pyx_v_dependency); /*proto*/

#line 215 "miniparla/runtime.pyx"
static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_add_dependency(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_dependency, int __pyx_skip_dispatch) {
  InnerTask *__pyx_v_task
#line 215 "miniparla/runtime.pyx"
;
  InnerTask *__pyx_v_p_dep
#line 215 "miniparla/runtime.pyx"
;
  InnerTask *__pyx_v_p_task
#line 215 "miniparla/runtime.pyx"
;

#line 215 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 215 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 215 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 215 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 215 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 215 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 215 "miniparla/runtime.pyx"
  InnerTask *__pyx_t_5;

#line 215 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 215 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 215 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 215 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("add_dependency", 0);

#line 215 "miniparla/runtime.pyx"
  /* Check if called by wrapper */

#line 215 "miniparla/runtime.pyx"
  if (unlikely(__pyx_skip_dispatch)) ;

#line 215 "miniparla/runtime.pyx"
  /* Check if overridden in Python */

#line 215 "miniparla/runtime.pyx"
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {

#line 215 "miniparla/runtime.pyx"
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 215 "miniparla/runtime.pyx"
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 215 "miniparla/runtime.pyx"
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {

#line 215 "miniparla/runtime.pyx"
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 215 "miniparla/runtime.pyx"
      #endif

#line 215 "miniparla/runtime.pyx"
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_dependency); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)

#line 215 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 215 "miniparla/runtime.pyx"
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9miniparla_7runtime_11PyInnerTask_7add_dependency)) {

#line 215 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_r);

#line 215 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; 
#line 215 "miniparla/runtime.pyx"
__pyx_t_4 = NULL;

#line 215 "miniparla/runtime.pyx"
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 215 "miniparla/runtime.pyx"
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 215 "miniparla/runtime.pyx"
          if (likely(__pyx_t_4)) {

#line 215 "miniparla/runtime.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 215 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_t_4);

#line 215 "miniparla/runtime.pyx"
            __Pyx_INCREF(function);

#line 215 "miniparla/runtime.pyx"
            __Pyx_DECREF_SET(__pyx_t_3, function);

#line 215 "miniparla/runtime.pyx"
          }

#line 215 "miniparla/runtime.pyx"
        }

#line 215 "miniparla/runtime.pyx"
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_dependency)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_dependency));

#line 215 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 215 "miniparla/runtime.pyx"
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)

#line 215 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 215 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 215 "miniparla/runtime.pyx"
        __pyx_r = __pyx_t_2;

#line 215 "miniparla/runtime.pyx"
        __pyx_t_2 = 0;

#line 215 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 215 "miniparla/runtime.pyx"
        goto __pyx_L0;

#line 215 "miniparla/runtime.pyx"
      }

#line 215 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 215 "miniparla/runtime.pyx"
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 215 "miniparla/runtime.pyx"
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));

#line 215 "miniparla/runtime.pyx"
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {

#line 215 "miniparla/runtime.pyx"
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 215 "miniparla/runtime.pyx"
      }

#line 215 "miniparla/runtime.pyx"
      #endif

#line 215 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 215 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 215 "miniparla/runtime.pyx"
    }

#line 215 "miniparla/runtime.pyx"
    #endif

#line 215 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":216
 * 
 *     cpdef add_dependency(self, PyInnerTask dependency):
 *         task = dependency.task             # <<<<<<<<<<<<<<
 *         cdef InnerTask* p_dep = task
 *         cdef InnerTask* p_task = self.task
 */

#line 216 "miniparla/runtime.pyx"
  __pyx_t_5 = __pyx_v_dependency->task;

#line 216 "miniparla/runtime.pyx"
  __pyx_v_task = __pyx_t_5;

  /* "miniparla/runtime.pyx":217
 *     cpdef add_dependency(self, PyInnerTask dependency):
 *         task = dependency.task
 *         cdef InnerTask* p_dep = task             # <<<<<<<<<<<<<<
 *         cdef InnerTask* p_task = self.task
 *         with nogil:
 */

#line 217 "miniparla/runtime.pyx"
  __pyx_v_p_dep = __pyx_v_task;

  /* "miniparla/runtime.pyx":218
 *         task = dependency.task
 *         cdef InnerTask* p_dep = task
 *         cdef InnerTask* p_task = self.task             # <<<<<<<<<<<<<<
 *         with nogil:
 *             p_task.add_dependency(p_dep)
 */

#line 218 "miniparla/runtime.pyx"
  __pyx_t_5 = __pyx_v_self->task;

#line 218 "miniparla/runtime.pyx"
  __pyx_v_p_task = __pyx_t_5;

  /* "miniparla/runtime.pyx":219
 *         cdef InnerTask* p_dep = task
 *         cdef InnerTask* p_task = self.task
 *         with nogil:             # <<<<<<<<<<<<<<
 *             p_task.add_dependency(p_dep)
 * 
 */

#line 219 "miniparla/runtime.pyx"
  {

#line 219 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 219 "miniparla/runtime.pyx"
      PyThreadState *_save;

#line 219 "miniparla/runtime.pyx"
      Py_UNBLOCK_THREADS

#line 219 "miniparla/runtime.pyx"
      __Pyx_FastGIL_Remember();

#line 219 "miniparla/runtime.pyx"
      #endif

#line 219 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":220
 *         cdef InnerTask* p_task = self.task
 *         with nogil:
 *             p_task.add_dependency(p_dep)             # <<<<<<<<<<<<<<
 * 
 *     cpdef blocked(self):
 */

#line 220 "miniparla/runtime.pyx"
        try {

#line 220 "miniparla/runtime.pyx"
          __pyx_v_p_task->add_dependency(__pyx_v_p_dep);

#line 220 "miniparla/runtime.pyx"
        } catch(...) {

#line 220 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 220 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 220 "miniparla/runtime.pyx"
          #endif

#line 220 "miniparla/runtime.pyx"
          __Pyx_CppExn2PyErr();

#line 220 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 220 "miniparla/runtime.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 220 "miniparla/runtime.pyx"
          #endif

#line 220 "miniparla/runtime.pyx"
          __PYX_ERR(0, 220, __pyx_L4_error)

#line 220 "miniparla/runtime.pyx"
        }

#line 220 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":219
 *         cdef InnerTask* p_dep = task
 *         cdef InnerTask* p_task = self.task
 *         with nogil:             # <<<<<<<<<<<<<<
 *             p_task.add_dependency(p_dep)
 * 
 */

#line 219 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 219 "miniparla/runtime.pyx"
        /*normal exit:*/{

#line 219 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 219 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 219 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 219 "miniparla/runtime.pyx"
          #endif

#line 219 "miniparla/runtime.pyx"
          goto __pyx_L5;

#line 219 "miniparla/runtime.pyx"
        }

#line 219 "miniparla/runtime.pyx"
        __pyx_L4_error: {

#line 219 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 219 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 219 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 219 "miniparla/runtime.pyx"
          #endif

#line 219 "miniparla/runtime.pyx"
          goto __pyx_L1_error;

#line 219 "miniparla/runtime.pyx"
        }

#line 219 "miniparla/runtime.pyx"
        __pyx_L5:;

#line 219 "miniparla/runtime.pyx"
      }

#line 219 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":215
 *             self.add_dependency(inner_dep)
 * 
 *     cpdef add_dependency(self, PyInnerTask dependency):             # <<<<<<<<<<<<<<
 *         task = dependency.task
 *         cdef InnerTask* p_dep = task
 */

#line 215 "miniparla/runtime.pyx"


#line 215 "miniparla/runtime.pyx"
  /* function exit code */

#line 215 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 215 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 215 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 215 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 215 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 215 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 215 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 215 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.add_dependency", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 215 "miniparla/runtime.pyx"
  __pyx_r = 0;

#line 215 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 215 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 215 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 215 "miniparla/runtime.pyx"
  return __pyx_r;

#line 215 "miniparla/runtime.pyx"
}

#line 215 "miniparla/runtime.pyx"


#line 215 "miniparla/runtime.pyx"
/* Python wrapper */

#line 215 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_7add_dependency(PyObject *__pyx_v_self, PyObject *__pyx_v_dependency); /*proto*/

#line 215 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_7add_dependency(PyObject *__pyx_v_self, PyObject *__pyx_v_dependency) {

#line 215 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 215 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 215 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 215 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 215 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 215 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("add_dependency (wrapper)", 0);

#line 215 "miniparla/runtime.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dependency), __pyx_ptype_9miniparla_7runtime_PyInnerTask, 1, "dependency", 0))) __PYX_ERR(0, 215, __pyx_L1_error)
  __pyx_r = 
#line 215 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11PyInnerTask_6add_dependency(((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_self), ((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_dependency));

#line 215 "miniparla/runtime.pyx"


#line 215 "miniparla/runtime.pyx"
  /* function exit code */

#line 215 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 215 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 215 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 215 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 215 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 215 "miniparla/runtime.pyx"
  return __pyx_r;

#line 215 "miniparla/runtime.pyx"
}

#line 215 "miniparla/runtime.pyx"


#line 215 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_6add_dependency(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_dependency) {

#line 215 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 215 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 215 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 215 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 215 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 215 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 215 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("add_dependency", 0);

#line 215 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 215 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_f_9miniparla_7runtime_11PyInnerTask_add_dependency(__pyx_v_self, __pyx_v_dependency, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)

#line 215 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 215 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 215 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 215 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 215 "miniparla/runtime.pyx"


#line 215 "miniparla/runtime.pyx"
  /* function exit code */

#line 215 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 215 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 215 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.add_dependency", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 215 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 215 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 215 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 215 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 215 "miniparla/runtime.pyx"
  return __pyx_r;

#line 215 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":222
 *             p_task.add_dependency(p_dep)
 * 
 *     cpdef blocked(self):             # <<<<<<<<<<<<<<
 *         cdef InnerTask* p_task = self.task
 *         cdef bool ret = False
 */

#line 222 "miniparla/runtime.pyx"


#line 222 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_9blocked(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 222 "miniparla/runtime.pyx"
static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_blocked(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, int __pyx_skip_dispatch) {
  InnerTask *__pyx_v_p_task
#line 222 "miniparla/runtime.pyx"
;
  bool __pyx_v_ret
#line 222 "miniparla/runtime.pyx"
;

#line 222 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 222 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 222 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 222 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 222 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 222 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 222 "miniparla/runtime.pyx"
  InnerTask *__pyx_t_5;

#line 222 "miniparla/runtime.pyx"
  bool __pyx_t_6;

#line 222 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 222 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 222 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 222 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("blocked", 0);

#line 222 "miniparla/runtime.pyx"
  /* Check if called by wrapper */

#line 222 "miniparla/runtime.pyx"
  if (unlikely(__pyx_skip_dispatch)) ;

#line 222 "miniparla/runtime.pyx"
  /* Check if overridden in Python */

#line 222 "miniparla/runtime.pyx"
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {

#line 222 "miniparla/runtime.pyx"
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 222 "miniparla/runtime.pyx"
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 222 "miniparla/runtime.pyx"
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {

#line 222 "miniparla/runtime.pyx"
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 222 "miniparla/runtime.pyx"
      #endif

#line 222 "miniparla/runtime.pyx"
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_blocked); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)

#line 222 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 222 "miniparla/runtime.pyx"
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9miniparla_7runtime_11PyInnerTask_9blocked)) {

#line 222 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_r);

#line 222 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; 
#line 222 "miniparla/runtime.pyx"
__pyx_t_4 = NULL;

#line 222 "miniparla/runtime.pyx"
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 222 "miniparla/runtime.pyx"
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 222 "miniparla/runtime.pyx"
          if (likely(__pyx_t_4)) {

#line 222 "miniparla/runtime.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 222 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_t_4);

#line 222 "miniparla/runtime.pyx"
            __Pyx_INCREF(function);

#line 222 "miniparla/runtime.pyx"
            __Pyx_DECREF_SET(__pyx_t_3, function);

#line 222 "miniparla/runtime.pyx"
          }

#line 222 "miniparla/runtime.pyx"
        }

#line 222 "miniparla/runtime.pyx"
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 222 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 222 "miniparla/runtime.pyx"
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)

#line 222 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 222 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 222 "miniparla/runtime.pyx"
        __pyx_r = __pyx_t_2;

#line 222 "miniparla/runtime.pyx"
        __pyx_t_2 = 0;

#line 222 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 222 "miniparla/runtime.pyx"
        goto __pyx_L0;

#line 222 "miniparla/runtime.pyx"
      }

#line 222 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 222 "miniparla/runtime.pyx"
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 222 "miniparla/runtime.pyx"
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));

#line 222 "miniparla/runtime.pyx"
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {

#line 222 "miniparla/runtime.pyx"
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 222 "miniparla/runtime.pyx"
      }

#line 222 "miniparla/runtime.pyx"
      #endif

#line 222 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 222 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 222 "miniparla/runtime.pyx"
    }

#line 222 "miniparla/runtime.pyx"
    #endif

#line 222 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":223
 * 
 *     cpdef blocked(self):
 *         cdef InnerTask* p_task = self.task             # <<<<<<<<<<<<<<
 *         cdef bool ret = False
 *         with nogil:
 */

#line 223 "miniparla/runtime.pyx"
  __pyx_t_5 = __pyx_v_self->task;

#line 223 "miniparla/runtime.pyx"
  __pyx_v_p_task = __pyx_t_5;

  /* "miniparla/runtime.pyx":224
 *     cpdef blocked(self):
 *         cdef InnerTask* p_task = self.task
 *         cdef bool ret = False             # <<<<<<<<<<<<<<
 *         with nogil:
 *             ret = p_task.blocked()
 */

#line 224 "miniparla/runtime.pyx"
  __pyx_v_ret = 0;

  /* "miniparla/runtime.pyx":225
 *         cdef InnerTask* p_task = self.task
 *         cdef bool ret = False
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = p_task.blocked()
 *         return ret
 */

#line 225 "miniparla/runtime.pyx"
  {

#line 225 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 225 "miniparla/runtime.pyx"
      PyThreadState *_save;

#line 225 "miniparla/runtime.pyx"
      Py_UNBLOCK_THREADS

#line 225 "miniparla/runtime.pyx"
      __Pyx_FastGIL_Remember();

#line 225 "miniparla/runtime.pyx"
      #endif

#line 225 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":226
 *         cdef bool ret = False
 *         with nogil:
 *             ret = p_task.blocked()             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */

#line 226 "miniparla/runtime.pyx"
        try {

#line 226 "miniparla/runtime.pyx"
          __pyx_t_6 = __pyx_v_p_task->blocked();

#line 226 "miniparla/runtime.pyx"
        } catch(...) {

#line 226 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 226 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 226 "miniparla/runtime.pyx"
          #endif

#line 226 "miniparla/runtime.pyx"
          __Pyx_CppExn2PyErr();

#line 226 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 226 "miniparla/runtime.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 226 "miniparla/runtime.pyx"
          #endif

#line 226 "miniparla/runtime.pyx"
          __PYX_ERR(0, 226, __pyx_L4_error)

#line 226 "miniparla/runtime.pyx"
        }

#line 226 "miniparla/runtime.pyx"
        __pyx_v_ret = __pyx_t_6;

#line 226 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":225
 *         cdef InnerTask* p_task = self.task
 *         cdef bool ret = False
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = p_task.blocked()
 *         return ret
 */

#line 225 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 225 "miniparla/runtime.pyx"
        /*normal exit:*/{

#line 225 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 225 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 225 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 225 "miniparla/runtime.pyx"
          #endif

#line 225 "miniparla/runtime.pyx"
          goto __pyx_L5;

#line 225 "miniparla/runtime.pyx"
        }

#line 225 "miniparla/runtime.pyx"
        __pyx_L4_error: {

#line 225 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 225 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 225 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 225 "miniparla/runtime.pyx"
          #endif

#line 225 "miniparla/runtime.pyx"
          goto __pyx_L1_error;

#line 225 "miniparla/runtime.pyx"
        }

#line 225 "miniparla/runtime.pyx"
        __pyx_L5:;

#line 225 "miniparla/runtime.pyx"
      }

#line 225 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":227
 *         with nogil:
 *             ret = p_task.blocked()
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cpdef blocked_unsafe(self):
 */

#line 227 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 227 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)

#line 227 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 227 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 227 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 227 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":222
 *             p_task.add_dependency(p_dep)
 * 
 *     cpdef blocked(self):             # <<<<<<<<<<<<<<
 *         cdef InnerTask* p_task = self.task
 *         cdef bool ret = False
 */

#line 222 "miniparla/runtime.pyx"


#line 222 "miniparla/runtime.pyx"
  /* function exit code */

#line 222 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 222 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 222 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 222 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 222 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 222 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.blocked", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 222 "miniparla/runtime.pyx"
  __pyx_r = 0;

#line 222 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 222 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 222 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 222 "miniparla/runtime.pyx"
  return __pyx_r;

#line 222 "miniparla/runtime.pyx"
}

#line 222 "miniparla/runtime.pyx"


#line 222 "miniparla/runtime.pyx"
/* Python wrapper */

#line 222 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_9blocked(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 222 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_9blocked(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 222 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 222 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 222 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("blocked (wrapper)", 0);
  __pyx_r = 
#line 222 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11PyInnerTask_8blocked(((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_self));

#line 222 "miniparla/runtime.pyx"


#line 222 "miniparla/runtime.pyx"
  /* function exit code */

#line 222 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 222 "miniparla/runtime.pyx"
  return __pyx_r;

#line 222 "miniparla/runtime.pyx"
}

#line 222 "miniparla/runtime.pyx"


#line 222 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_8blocked(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self) {

#line 222 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 222 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 222 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 222 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 222 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 222 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 222 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("blocked", 0);

#line 222 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 222 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_f_9miniparla_7runtime_11PyInnerTask_blocked(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)

#line 222 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 222 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 222 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 222 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 222 "miniparla/runtime.pyx"


#line 222 "miniparla/runtime.pyx"
  /* function exit code */

#line 222 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 222 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 222 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.blocked", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 222 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 222 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 222 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 222 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 222 "miniparla/runtime.pyx"
  return __pyx_r;

#line 222 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":229
 *         return ret
 * 
 *     cpdef blocked_unsafe(self):             # <<<<<<<<<<<<<<
 *         cdef InnerTask* p_task = self.task
 *         cdef bool ret = False
 */

#line 229 "miniparla/runtime.pyx"


#line 229 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_11blocked_unsafe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 229 "miniparla/runtime.pyx"
static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_blocked_unsafe(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, int __pyx_skip_dispatch) {
  InnerTask *__pyx_v_p_task
#line 229 "miniparla/runtime.pyx"
;
  bool __pyx_v_ret
#line 229 "miniparla/runtime.pyx"
;

#line 229 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 229 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 229 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 229 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 229 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 229 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 229 "miniparla/runtime.pyx"
  InnerTask *__pyx_t_5;

#line 229 "miniparla/runtime.pyx"
  bool __pyx_t_6;

#line 229 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 229 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 229 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 229 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("blocked_unsafe", 0);

#line 229 "miniparla/runtime.pyx"
  /* Check if called by wrapper */

#line 229 "miniparla/runtime.pyx"
  if (unlikely(__pyx_skip_dispatch)) ;

#line 229 "miniparla/runtime.pyx"
  /* Check if overridden in Python */

#line 229 "miniparla/runtime.pyx"
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {

#line 229 "miniparla/runtime.pyx"
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 229 "miniparla/runtime.pyx"
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 229 "miniparla/runtime.pyx"
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {

#line 229 "miniparla/runtime.pyx"
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 229 "miniparla/runtime.pyx"
      #endif

#line 229 "miniparla/runtime.pyx"
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_blocked_unsafe); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)

#line 229 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 229 "miniparla/runtime.pyx"
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9miniparla_7runtime_11PyInnerTask_11blocked_unsafe)) {

#line 229 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_r);

#line 229 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; 
#line 229 "miniparla/runtime.pyx"
__pyx_t_4 = NULL;

#line 229 "miniparla/runtime.pyx"
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 229 "miniparla/runtime.pyx"
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 229 "miniparla/runtime.pyx"
          if (likely(__pyx_t_4)) {

#line 229 "miniparla/runtime.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 229 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_t_4);

#line 229 "miniparla/runtime.pyx"
            __Pyx_INCREF(function);

#line 229 "miniparla/runtime.pyx"
            __Pyx_DECREF_SET(__pyx_t_3, function);

#line 229 "miniparla/runtime.pyx"
          }

#line 229 "miniparla/runtime.pyx"
        }

#line 229 "miniparla/runtime.pyx"
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 229 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 229 "miniparla/runtime.pyx"
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)

#line 229 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 229 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 229 "miniparla/runtime.pyx"
        __pyx_r = __pyx_t_2;

#line 229 "miniparla/runtime.pyx"
        __pyx_t_2 = 0;

#line 229 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 229 "miniparla/runtime.pyx"
        goto __pyx_L0;

#line 229 "miniparla/runtime.pyx"
      }

#line 229 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 229 "miniparla/runtime.pyx"
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 229 "miniparla/runtime.pyx"
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));

#line 229 "miniparla/runtime.pyx"
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {

#line 229 "miniparla/runtime.pyx"
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 229 "miniparla/runtime.pyx"
      }

#line 229 "miniparla/runtime.pyx"
      #endif

#line 229 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 229 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 229 "miniparla/runtime.pyx"
    }

#line 229 "miniparla/runtime.pyx"
    #endif

#line 229 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":230
 * 
 *     cpdef blocked_unsafe(self):
 *         cdef InnerTask* p_task = self.task             # <<<<<<<<<<<<<<
 *         cdef bool ret = False
 *         with nogil:
 */

#line 230 "miniparla/runtime.pyx"
  __pyx_t_5 = __pyx_v_self->task;

#line 230 "miniparla/runtime.pyx"
  __pyx_v_p_task = __pyx_t_5;

  /* "miniparla/runtime.pyx":231
 *     cpdef blocked_unsafe(self):
 *         cdef InnerTask* p_task = self.task
 *         cdef bool ret = False             # <<<<<<<<<<<<<<
 *         with nogil:
 *             ret = p_task.blocked_unsafe()
 */

#line 231 "miniparla/runtime.pyx"
  __pyx_v_ret = 0;

  /* "miniparla/runtime.pyx":232
 *         cdef InnerTask* p_task = self.task
 *         cdef bool ret = False
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = p_task.blocked_unsafe()
 *         return ret
 */

#line 232 "miniparla/runtime.pyx"
  {

#line 232 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 232 "miniparla/runtime.pyx"
      PyThreadState *_save;

#line 232 "miniparla/runtime.pyx"
      Py_UNBLOCK_THREADS

#line 232 "miniparla/runtime.pyx"
      __Pyx_FastGIL_Remember();

#line 232 "miniparla/runtime.pyx"
      #endif

#line 232 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":233
 *         cdef bool ret = False
 *         with nogil:
 *             ret = p_task.blocked_unsafe()             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */

#line 233 "miniparla/runtime.pyx"
        try {

#line 233 "miniparla/runtime.pyx"
          __pyx_t_6 = __pyx_v_p_task->blocked_unsafe();

#line 233 "miniparla/runtime.pyx"
        } catch(...) {

#line 233 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 233 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 233 "miniparla/runtime.pyx"
          #endif

#line 233 "miniparla/runtime.pyx"
          __Pyx_CppExn2PyErr();

#line 233 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 233 "miniparla/runtime.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 233 "miniparla/runtime.pyx"
          #endif

#line 233 "miniparla/runtime.pyx"
          __PYX_ERR(0, 233, __pyx_L4_error)

#line 233 "miniparla/runtime.pyx"
        }

#line 233 "miniparla/runtime.pyx"
        __pyx_v_ret = __pyx_t_6;

#line 233 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":232
 *         cdef InnerTask* p_task = self.task
 *         cdef bool ret = False
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = p_task.blocked_unsafe()
 *         return ret
 */

#line 232 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 232 "miniparla/runtime.pyx"
        /*normal exit:*/{

#line 232 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 232 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 232 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 232 "miniparla/runtime.pyx"
          #endif

#line 232 "miniparla/runtime.pyx"
          goto __pyx_L5;

#line 232 "miniparla/runtime.pyx"
        }

#line 232 "miniparla/runtime.pyx"
        __pyx_L4_error: {

#line 232 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 232 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 232 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 232 "miniparla/runtime.pyx"
          #endif

#line 232 "miniparla/runtime.pyx"
          goto __pyx_L1_error;

#line 232 "miniparla/runtime.pyx"
        }

#line 232 "miniparla/runtime.pyx"
        __pyx_L5:;

#line 232 "miniparla/runtime.pyx"
      }

#line 232 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":234
 *         with nogil:
 *             ret = p_task.blocked_unsafe()
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cpdef notify_dependents(self, PyInnerScheduler scheduler):
 */

#line 234 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 234 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)

#line 234 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 234 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 234 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 234 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":229
 *         return ret
 * 
 *     cpdef blocked_unsafe(self):             # <<<<<<<<<<<<<<
 *         cdef InnerTask* p_task = self.task
 *         cdef bool ret = False
 */

#line 229 "miniparla/runtime.pyx"


#line 229 "miniparla/runtime.pyx"
  /* function exit code */

#line 229 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 229 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 229 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 229 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 229 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 229 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.blocked_unsafe", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 229 "miniparla/runtime.pyx"
  __pyx_r = 0;

#line 229 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 229 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 229 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 229 "miniparla/runtime.pyx"
  return __pyx_r;

#line 229 "miniparla/runtime.pyx"
}

#line 229 "miniparla/runtime.pyx"


#line 229 "miniparla/runtime.pyx"
/* Python wrapper */

#line 229 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_11blocked_unsafe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 229 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_11blocked_unsafe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 229 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 229 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 229 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("blocked_unsafe (wrapper)", 0);
  __pyx_r = 
#line 229 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11PyInnerTask_10blocked_unsafe(((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_self));

#line 229 "miniparla/runtime.pyx"


#line 229 "miniparla/runtime.pyx"
  /* function exit code */

#line 229 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 229 "miniparla/runtime.pyx"
  return __pyx_r;

#line 229 "miniparla/runtime.pyx"
}

#line 229 "miniparla/runtime.pyx"


#line 229 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_10blocked_unsafe(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self) {

#line 229 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 229 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 229 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 229 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 229 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 229 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 229 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("blocked_unsafe", 0);

#line 229 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 229 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_f_9miniparla_7runtime_11PyInnerTask_blocked_unsafe(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)

#line 229 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 229 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 229 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 229 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 229 "miniparla/runtime.pyx"


#line 229 "miniparla/runtime.pyx"
  /* function exit code */

#line 229 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 229 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 229 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.blocked_unsafe", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 229 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 229 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 229 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 229 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 229 "miniparla/runtime.pyx"
  return __pyx_r;

#line 229 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":236
 *         return ret
 * 
 *     cpdef notify_dependents(self, PyInnerScheduler scheduler):             # <<<<<<<<<<<<<<
 *         #print("Notifying dependents (python)", flush=True)
 *         cdef InnerScheduler* p_sched = scheduler.scheduler
 */

#line 236 "miniparla/runtime.pyx"


#line 236 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_13notify_dependents(PyObject *__pyx_v_self, PyObject *__pyx_v_scheduler); /*proto*/

#line 236 "miniparla/runtime.pyx"
static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_notify_dependents(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_scheduler, int __pyx_skip_dispatch) {
  InnerScheduler *__pyx_v_p_sched
#line 236 "miniparla/runtime.pyx"
;
  InnerTask *__pyx_v_p_task
#line 236 "miniparla/runtime.pyx"
;

#line 236 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 236 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 236 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 236 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 236 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 236 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 236 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_5;

#line 236 "miniparla/runtime.pyx"
  InnerTask *__pyx_t_6;

#line 236 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 236 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 236 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 236 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("notify_dependents", 0);

#line 236 "miniparla/runtime.pyx"
  /* Check if called by wrapper */

#line 236 "miniparla/runtime.pyx"
  if (unlikely(__pyx_skip_dispatch)) ;

#line 236 "miniparla/runtime.pyx"
  /* Check if overridden in Python */

#line 236 "miniparla/runtime.pyx"
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {

#line 236 "miniparla/runtime.pyx"
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 236 "miniparla/runtime.pyx"
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 236 "miniparla/runtime.pyx"
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {

#line 236 "miniparla/runtime.pyx"
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 236 "miniparla/runtime.pyx"
      #endif

#line 236 "miniparla/runtime.pyx"
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_dependents); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)

#line 236 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 236 "miniparla/runtime.pyx"
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9miniparla_7runtime_11PyInnerTask_13notify_dependents)) {

#line 236 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_r);

#line 236 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; 
#line 236 "miniparla/runtime.pyx"
__pyx_t_4 = NULL;

#line 236 "miniparla/runtime.pyx"
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 236 "miniparla/runtime.pyx"
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 236 "miniparla/runtime.pyx"
          if (likely(__pyx_t_4)) {

#line 236 "miniparla/runtime.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 236 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_t_4);

#line 236 "miniparla/runtime.pyx"
            __Pyx_INCREF(function);

#line 236 "miniparla/runtime.pyx"
            __Pyx_DECREF_SET(__pyx_t_3, function);

#line 236 "miniparla/runtime.pyx"
          }

#line 236 "miniparla/runtime.pyx"
        }

#line 236 "miniparla/runtime.pyx"
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_scheduler)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_scheduler));

#line 236 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 236 "miniparla/runtime.pyx"
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)

#line 236 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 236 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 236 "miniparla/runtime.pyx"
        __pyx_r = __pyx_t_2;

#line 236 "miniparla/runtime.pyx"
        __pyx_t_2 = 0;

#line 236 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 236 "miniparla/runtime.pyx"
        goto __pyx_L0;

#line 236 "miniparla/runtime.pyx"
      }

#line 236 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 236 "miniparla/runtime.pyx"
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 236 "miniparla/runtime.pyx"
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));

#line 236 "miniparla/runtime.pyx"
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {

#line 236 "miniparla/runtime.pyx"
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 236 "miniparla/runtime.pyx"
      }

#line 236 "miniparla/runtime.pyx"
      #endif

#line 236 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 236 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 236 "miniparla/runtime.pyx"
    }

#line 236 "miniparla/runtime.pyx"
    #endif

#line 236 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":238
 *     cpdef notify_dependents(self, PyInnerScheduler scheduler):
 *         #print("Notifying dependents (python)", flush=True)
 *         cdef InnerScheduler* p_sched = scheduler.scheduler             # <<<<<<<<<<<<<<
 *         cdef InnerTask* p_task = self.task
 *         with nogil:
 */

#line 238 "miniparla/runtime.pyx"
  __pyx_t_5 = __pyx_v_scheduler->scheduler;

#line 238 "miniparla/runtime.pyx"
  __pyx_v_p_sched = __pyx_t_5;

  /* "miniparla/runtime.pyx":239
 *         #print("Notifying dependents (python)", flush=True)
 *         cdef InnerScheduler* p_sched = scheduler.scheduler
 *         cdef InnerTask* p_task = self.task             # <<<<<<<<<<<<<<
 *         with nogil:
 *             p_task.notify_dependents(p_sched)
 */

#line 239 "miniparla/runtime.pyx"
  __pyx_t_6 = __pyx_v_self->task;

#line 239 "miniparla/runtime.pyx"
  __pyx_v_p_task = __pyx_t_6;

  /* "miniparla/runtime.pyx":240
 *         cdef InnerScheduler* p_sched = scheduler.scheduler
 *         cdef InnerTask* p_task = self.task
 *         with nogil:             # <<<<<<<<<<<<<<
 *             p_task.notify_dependents(p_sched)
 * 
 */

#line 240 "miniparla/runtime.pyx"
  {

#line 240 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 240 "miniparla/runtime.pyx"
      PyThreadState *_save;

#line 240 "miniparla/runtime.pyx"
      Py_UNBLOCK_THREADS

#line 240 "miniparla/runtime.pyx"
      __Pyx_FastGIL_Remember();

#line 240 "miniparla/runtime.pyx"
      #endif

#line 240 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":241
 *         cdef InnerTask* p_task = self.task
 *         with nogil:
 *             p_task.notify_dependents(p_sched)             # <<<<<<<<<<<<<<
 * 
 *     cpdef get_num_deps(self):
 */

#line 241 "miniparla/runtime.pyx"
        try {

#line 241 "miniparla/runtime.pyx"
          __pyx_v_p_task->notify_dependents(__pyx_v_p_sched);

#line 241 "miniparla/runtime.pyx"
        } catch(...) {

#line 241 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 241 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 241 "miniparla/runtime.pyx"
          #endif

#line 241 "miniparla/runtime.pyx"
          __Pyx_CppExn2PyErr();

#line 241 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 241 "miniparla/runtime.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 241 "miniparla/runtime.pyx"
          #endif

#line 241 "miniparla/runtime.pyx"
          __PYX_ERR(0, 241, __pyx_L4_error)

#line 241 "miniparla/runtime.pyx"
        }

#line 241 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":240
 *         cdef InnerScheduler* p_sched = scheduler.scheduler
 *         cdef InnerTask* p_task = self.task
 *         with nogil:             # <<<<<<<<<<<<<<
 *             p_task.notify_dependents(p_sched)
 * 
 */

#line 240 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 240 "miniparla/runtime.pyx"
        /*normal exit:*/{

#line 240 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 240 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 240 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 240 "miniparla/runtime.pyx"
          #endif

#line 240 "miniparla/runtime.pyx"
          goto __pyx_L5;

#line 240 "miniparla/runtime.pyx"
        }

#line 240 "miniparla/runtime.pyx"
        __pyx_L4_error: {

#line 240 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 240 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 240 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 240 "miniparla/runtime.pyx"
          #endif

#line 240 "miniparla/runtime.pyx"
          goto __pyx_L1_error;

#line 240 "miniparla/runtime.pyx"
        }

#line 240 "miniparla/runtime.pyx"
        __pyx_L5:;

#line 240 "miniparla/runtime.pyx"
      }

#line 240 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":236
 *         return ret
 * 
 *     cpdef notify_dependents(self, PyInnerScheduler scheduler):             # <<<<<<<<<<<<<<
 *         #print("Notifying dependents (python)", flush=True)
 *         cdef InnerScheduler* p_sched = scheduler.scheduler
 */

#line 236 "miniparla/runtime.pyx"


#line 236 "miniparla/runtime.pyx"
  /* function exit code */

#line 236 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 236 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 236 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 236 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 236 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 236 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 236 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 236 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.notify_dependents", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 236 "miniparla/runtime.pyx"
  __pyx_r = 0;

#line 236 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 236 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 236 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 236 "miniparla/runtime.pyx"
  return __pyx_r;

#line 236 "miniparla/runtime.pyx"
}

#line 236 "miniparla/runtime.pyx"


#line 236 "miniparla/runtime.pyx"
/* Python wrapper */

#line 236 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_13notify_dependents(PyObject *__pyx_v_self, PyObject *__pyx_v_scheduler); /*proto*/

#line 236 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_13notify_dependents(PyObject *__pyx_v_self, PyObject *__pyx_v_scheduler) {

#line 236 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 236 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 236 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 236 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 236 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 236 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("notify_dependents (wrapper)", 0);

#line 236 "miniparla/runtime.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_scheduler), __pyx_ptype_9miniparla_7runtime_PyInnerScheduler, 1, "scheduler", 0))) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_r = 
#line 236 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11PyInnerTask_12notify_dependents(((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_self), ((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_scheduler));

#line 236 "miniparla/runtime.pyx"


#line 236 "miniparla/runtime.pyx"
  /* function exit code */

#line 236 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 236 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 236 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 236 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 236 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 236 "miniparla/runtime.pyx"
  return __pyx_r;

#line 236 "miniparla/runtime.pyx"
}

#line 236 "miniparla/runtime.pyx"


#line 236 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_12notify_dependents(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_scheduler) {

#line 236 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 236 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 236 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 236 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 236 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 236 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 236 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("notify_dependents", 0);

#line 236 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 236 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_f_9miniparla_7runtime_11PyInnerTask_notify_dependents(__pyx_v_self, __pyx_v_scheduler, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)

#line 236 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 236 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 236 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 236 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 236 "miniparla/runtime.pyx"


#line 236 "miniparla/runtime.pyx"
  /* function exit code */

#line 236 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 236 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 236 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.notify_dependents", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 236 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 236 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 236 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 236 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 236 "miniparla/runtime.pyx"
  return __pyx_r;

#line 236 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":243
 *             p_task.notify_dependents(p_sched)
 * 
 *     cpdef get_num_deps(self):             # <<<<<<<<<<<<<<
 *         return self.task.get_num_deps()
 * 
 */

#line 243 "miniparla/runtime.pyx"


#line 243 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_15get_num_deps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 243 "miniparla/runtime.pyx"
static PyObject *__pyx_f_9miniparla_7runtime_11PyInnerTask_get_num_deps(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, int __pyx_skip_dispatch) {

#line 243 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 243 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 243 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 243 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 243 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 243 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 243 "miniparla/runtime.pyx"
  int __pyx_t_5;

#line 243 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 243 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 243 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 243 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_num_deps", 0);

#line 243 "miniparla/runtime.pyx"
  /* Check if called by wrapper */

#line 243 "miniparla/runtime.pyx"
  if (unlikely(__pyx_skip_dispatch)) ;

#line 243 "miniparla/runtime.pyx"
  /* Check if overridden in Python */

#line 243 "miniparla/runtime.pyx"
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {

#line 243 "miniparla/runtime.pyx"
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 243 "miniparla/runtime.pyx"
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 243 "miniparla/runtime.pyx"
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {

#line 243 "miniparla/runtime.pyx"
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 243 "miniparla/runtime.pyx"
      #endif

#line 243 "miniparla/runtime.pyx"
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_num_deps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)

#line 243 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 243 "miniparla/runtime.pyx"
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9miniparla_7runtime_11PyInnerTask_15get_num_deps)) {

#line 243 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_r);

#line 243 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; 
#line 243 "miniparla/runtime.pyx"
__pyx_t_4 = NULL;

#line 243 "miniparla/runtime.pyx"
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 243 "miniparla/runtime.pyx"
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 243 "miniparla/runtime.pyx"
          if (likely(__pyx_t_4)) {

#line 243 "miniparla/runtime.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 243 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_t_4);

#line 243 "miniparla/runtime.pyx"
            __Pyx_INCREF(function);

#line 243 "miniparla/runtime.pyx"
            __Pyx_DECREF_SET(__pyx_t_3, function);

#line 243 "miniparla/runtime.pyx"
          }

#line 243 "miniparla/runtime.pyx"
        }

#line 243 "miniparla/runtime.pyx"
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 243 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 243 "miniparla/runtime.pyx"
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)

#line 243 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 243 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 243 "miniparla/runtime.pyx"
        __pyx_r = __pyx_t_2;

#line 243 "miniparla/runtime.pyx"
        __pyx_t_2 = 0;

#line 243 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 243 "miniparla/runtime.pyx"
        goto __pyx_L0;

#line 243 "miniparla/runtime.pyx"
      }

#line 243 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 243 "miniparla/runtime.pyx"
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));

#line 243 "miniparla/runtime.pyx"
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));

#line 243 "miniparla/runtime.pyx"
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {

#line 243 "miniparla/runtime.pyx"
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;

#line 243 "miniparla/runtime.pyx"
      }

#line 243 "miniparla/runtime.pyx"
      #endif

#line 243 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 243 "miniparla/runtime.pyx"
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS

#line 243 "miniparla/runtime.pyx"
    }

#line 243 "miniparla/runtime.pyx"
    #endif

#line 243 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":244
 * 
 *     cpdef get_num_deps(self):
 *         return self.task.get_num_deps()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 244 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 244 "miniparla/runtime.pyx"
  try {

#line 244 "miniparla/runtime.pyx"
    __pyx_t_5 = __pyx_v_self->task->get_num_deps();

#line 244 "miniparla/runtime.pyx"
  } catch(...) {

#line 244 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 244 "miniparla/runtime.pyx"
    __PYX_ERR(0, 244, __pyx_L1_error)

#line 244 "miniparla/runtime.pyx"
  }

#line 244 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)

#line 244 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 244 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 244 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 244 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":243
 *             p_task.notify_dependents(p_sched)
 * 
 *     cpdef get_num_deps(self):             # <<<<<<<<<<<<<<
 *         return self.task.get_num_deps()
 * 
 */

#line 243 "miniparla/runtime.pyx"


#line 243 "miniparla/runtime.pyx"
  /* function exit code */

#line 243 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 243 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 243 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 243 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 243 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 243 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.get_num_deps", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 243 "miniparla/runtime.pyx"
  __pyx_r = 0;

#line 243 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 243 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 243 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 243 "miniparla/runtime.pyx"
  return __pyx_r;

#line 243 "miniparla/runtime.pyx"
}

#line 243 "miniparla/runtime.pyx"


#line 243 "miniparla/runtime.pyx"
/* Python wrapper */

#line 243 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_15get_num_deps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 243 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_15get_num_deps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 243 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 243 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 243 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_num_deps (wrapper)", 0);
  __pyx_r = 
#line 243 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11PyInnerTask_14get_num_deps(((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_self));

#line 243 "miniparla/runtime.pyx"


#line 243 "miniparla/runtime.pyx"
  /* function exit code */

#line 243 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 243 "miniparla/runtime.pyx"
  return __pyx_r;

#line 243 "miniparla/runtime.pyx"
}

#line 243 "miniparla/runtime.pyx"


#line 243 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_14get_num_deps(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self) {

#line 243 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 243 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 243 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 243 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 243 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 243 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 243 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_num_deps", 0);

#line 243 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 243 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_f_9miniparla_7runtime_11PyInnerTask_get_num_deps(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)

#line 243 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 243 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 243 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 243 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 243 "miniparla/runtime.pyx"


#line 243 "miniparla/runtime.pyx"
  /* function exit code */

#line 243 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 243 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 243 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.get_num_deps", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 243 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 243 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 243 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 243 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 243 "miniparla/runtime.pyx"
  return __pyx_r;

#line 243 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":246
 *         return self.task.get_num_deps()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.task
 * 
 */

#line 246 "miniparla/runtime.pyx"


#line 246 "miniparla/runtime.pyx"
/* Python wrapper */

#line 246 "miniparla/runtime.pyx"
static void __pyx_pw_9miniparla_7runtime_11PyInnerTask_17__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 246 "miniparla/runtime.pyx"
static void __pyx_pw_9miniparla_7runtime_11PyInnerTask_17__dealloc__(PyObject *__pyx_v_self) {

#line 246 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 246 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 246 "miniparla/runtime.pyx"
  __pyx_pf_9miniparla_7runtime_11PyInnerTask_16__dealloc__(((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_self));

#line 246 "miniparla/runtime.pyx"


#line 246 "miniparla/runtime.pyx"
  /* function exit code */

#line 246 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 246 "miniparla/runtime.pyx"
}

#line 246 "miniparla/runtime.pyx"


#line 246 "miniparla/runtime.pyx"
static void __pyx_pf_9miniparla_7runtime_11PyInnerTask_16__dealloc__(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self) {

#line 246 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 246 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "miniparla/runtime.pyx":247
 * 
 *     def __dealloc__(self):
 *         del self.task             # <<<<<<<<<<<<<<
 * 
 * class Task:
 */

#line 247 "miniparla/runtime.pyx"
  delete __pyx_v_self->task;

  /* "miniparla/runtime.pyx":246
 *         return self.task.get_num_deps()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.task
 * 
 */

#line 246 "miniparla/runtime.pyx"


#line 246 "miniparla/runtime.pyx"
  /* function exit code */

#line 246 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 246 "miniparla/runtime.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_9miniparla_7runtime_11PyInnerTask_18__reduce_cython__(((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_11PyInnerTask_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_9miniparla_7runtime_11PyInnerTask_20__setstate_cython__(((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_9miniparla_7runtime_11PyInnerTask_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerTask.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "miniparla/runtime.pyx":251
 * class Task:
 * 
 *     def __init__(self, func, args, dependencies, taskid, req, name):             # <<<<<<<<<<<<<<
 *         self._mutex = threading.Lock()
 * 
 */

#line 251 "miniparla/runtime.pyx"


#line 251 "miniparla/runtime.pyx"
/* Python wrapper */

#line 251 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_1__init__ = 
#line 251 "miniparla/runtime.pyx"
{"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_4Task_1__init__, METH_VARARGS|METH_KEYWORDS, 0};

#line 251 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 251 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_func = 0
#line 251 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_args = 0
#line 251 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_dependencies = 0
#line 251 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_taskid = 0
#line 251 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_req = 0
#line 251 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_name = 0
#line 251 "miniparla/runtime.pyx"
;

#line 251 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 251 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 251 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 251 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 251 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 251 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 251 "miniparla/runtime.pyx"
  {

#line 251 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_func,&__pyx_n_s_args,&__pyx_n_s_dependencies_2,&__pyx_n_s_taskid,&__pyx_n_s_req,&__pyx_n_s_name,0};

#line 251 "miniparla/runtime.pyx"
    PyObject* values[7] = {0,0,0,0,0,0,0};

#line 251 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 251 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 251 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 251 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  7: 
#line 251 "miniparla/runtime.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  6: 
#line 251 "miniparla/runtime.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 251 "miniparla/runtime.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 251 "miniparla/runtime.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 251 "miniparla/runtime.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 251 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 251 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 251 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 251 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 251 "miniparla/runtime.pyx"
      }

#line 251 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 251 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 251 "miniparla/runtime.pyx"
        case  0:

#line 251 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 251 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 251 "miniparla/runtime.pyx"
        case  1:

#line 251 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;

#line 251 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 1); 
#line 251 "miniparla/runtime.pyx"
__PYX_ERR(0, 251, __pyx_L3_error)

#line 251 "miniparla/runtime.pyx"
        }

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 251 "miniparla/runtime.pyx"
        case  2:

#line 251 "miniparla/runtime.pyx"
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;

#line 251 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 2); 
#line 251 "miniparla/runtime.pyx"
__PYX_ERR(0, 251, __pyx_L3_error)

#line 251 "miniparla/runtime.pyx"
        }

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 251 "miniparla/runtime.pyx"
        case  3:

#line 251 "miniparla/runtime.pyx"
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dependencies_2)) != 0)) kw_args--;

#line 251 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 3); 
#line 251 "miniparla/runtime.pyx"
__PYX_ERR(0, 251, __pyx_L3_error)

#line 251 "miniparla/runtime.pyx"
        }

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 251 "miniparla/runtime.pyx"
        case  4:

#line 251 "miniparla/runtime.pyx"
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_taskid)) != 0)) kw_args--;

#line 251 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 4); 
#line 251 "miniparla/runtime.pyx"
__PYX_ERR(0, 251, __pyx_L3_error)

#line 251 "miniparla/runtime.pyx"
        }

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 251 "miniparla/runtime.pyx"
        case  5:

#line 251 "miniparla/runtime.pyx"
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_req)) != 0)) kw_args--;

#line 251 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 5); 
#line 251 "miniparla/runtime.pyx"
__PYX_ERR(0, 251, __pyx_L3_error)

#line 251 "miniparla/runtime.pyx"
        }

#line 251 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 251 "miniparla/runtime.pyx"
        case  6:

#line 251 "miniparla/runtime.pyx"
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;

#line 251 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 6); 
#line 251 "miniparla/runtime.pyx"
__PYX_ERR(0, 251, __pyx_L3_error)

#line 251 "miniparla/runtime.pyx"
        }

#line 251 "miniparla/runtime.pyx"
      }

#line 251 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 251 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 251, __pyx_L3_error)

#line 251 "miniparla/runtime.pyx"
      }

#line 251 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {

#line 251 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 251 "miniparla/runtime.pyx"
    } else {

#line 251 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 251 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 251 "miniparla/runtime.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 251 "miniparla/runtime.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 251 "miniparla/runtime.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 251 "miniparla/runtime.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 251 "miniparla/runtime.pyx"
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 251 "miniparla/runtime.pyx"
    }

#line 251 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 251 "miniparla/runtime.pyx"
    __pyx_v_func = values[1];

#line 251 "miniparla/runtime.pyx"
    __pyx_v_args = values[2];

#line 251 "miniparla/runtime.pyx"
    __pyx_v_dependencies = values[3];

#line 251 "miniparla/runtime.pyx"
    __pyx_v_taskid = values[4];

#line 251 "miniparla/runtime.pyx"
    __pyx_v_req = values[5];

#line 251 "miniparla/runtime.pyx"
    __pyx_v_name = values[6];

#line 251 "miniparla/runtime.pyx"
  }

#line 251 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 251 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); 
#line 251 "miniparla/runtime.pyx"
__PYX_ERR(0, 251, __pyx_L3_error)

#line 251 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 251 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 251 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 251 "miniparla/runtime.pyx"
  return NULL;

#line 251 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 251 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task___init__(__pyx_self, __pyx_v_self, __pyx_v_func, __pyx_v_args, __pyx_v_dependencies, __pyx_v_taskid, __pyx_v_req, __pyx_v_name);

#line 251 "miniparla/runtime.pyx"


#line 251 "miniparla/runtime.pyx"
  /* function exit code */

#line 251 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 251 "miniparla/runtime.pyx"
  return __pyx_r;

#line 251 "miniparla/runtime.pyx"
}

#line 251 "miniparla/runtime.pyx"


#line 251 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_func, PyObject *__pyx_v_args, PyObject *__pyx_v_dependencies, PyObject *__pyx_v_taskid, PyObject *__pyx_v_req, PyObject *__pyx_v_name) {

#line 251 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 251 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 251 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 251 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 251 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 251 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 251 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 251 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 251 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 251 "miniparla/runtime.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 251 "miniparla/runtime.pyx"
  int __pyx_t_9;

#line 251 "miniparla/runtime.pyx"
  int __pyx_t_10;

#line 251 "miniparla/runtime.pyx"
  int __pyx_t_11;

#line 251 "miniparla/runtime.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 251 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 251 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 251 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 251 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "miniparla/runtime.pyx":252
 * 
 *     def __init__(self, func, args, dependencies, taskid, req, name):
 *         self._mutex = threading.Lock()             # <<<<<<<<<<<<<<
 * 
 *         with self._mutex:
 */

#line 252 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_threading); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)

#line 252 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 252 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Lock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L1_error)

#line 252 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 252 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 252 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 252 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 252 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 252 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 252 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 252 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 252 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 252 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 252 "miniparla/runtime.pyx"
    }

#line 252 "miniparla/runtime.pyx"
  }

#line 252 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 252 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 252 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)

#line 252 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 252 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 252 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_mutex, __pyx_t_1) < 0) __PYX_ERR(0, 252, __pyx_L1_error)

#line 252 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":254
 *         self._mutex = threading.Lock()
 * 
 *         with self._mutex:             # <<<<<<<<<<<<<<
 *             self.id = id(self)
 *             self._func = func
 */

#line 254 "miniparla/runtime.pyx"
  /*with:*/ {

#line 254 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_mutex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)

#line 254 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 254 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 254, __pyx_L1_error)

#line 254 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 254 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L3_error)

#line 254 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 254 "miniparla/runtime.pyx"
    __pyx_t_5 = NULL;

#line 254 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 254 "miniparla/runtime.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);

#line 254 "miniparla/runtime.pyx"
      if (likely(__pyx_t_5)) {

#line 254 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 254 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 254 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 254 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_2, function);

#line 254 "miniparla/runtime.pyx"
      }

#line 254 "miniparla/runtime.pyx"
    }

#line 254 "miniparla/runtime.pyx"
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);

#line 254 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 254 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L3_error)

#line 254 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 254 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 254 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 254 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 254 "miniparla/runtime.pyx"
    /*try:*/ {

#line 254 "miniparla/runtime.pyx"
      {

#line 254 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_declare

#line 254 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_assign

#line 254 "miniparla/runtime.pyx"
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);

#line 254 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_6);

#line 254 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_7);

#line 254 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_8);

#line 254 "miniparla/runtime.pyx"
        /*try:*/ {

          /* "miniparla/runtime.pyx":255
 * 
 *         with self._mutex:
 *             self.id = id(self)             # <<<<<<<<<<<<<<
 *             self._func = func
 *             self._args = args
 */

#line 255 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, __pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L7_error)

#line 255 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 255 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_id, __pyx_t_1) < 0) __PYX_ERR(0, 255, __pyx_L7_error)

#line 255 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":256
 *         with self._mutex:
 *             self.id = id(self)
 *             self._func = func             # <<<<<<<<<<<<<<
 *             self._args = args
 *             self._taskid = taskid
 */

#line 256 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_func_2, __pyx_v_func) < 0) __PYX_ERR(0, 256, __pyx_L7_error)

          /* "miniparla/runtime.pyx":257
 *             self.id = id(self)
 *             self._func = func
 *             self._args = args             # <<<<<<<<<<<<<<
 *             self._taskid = taskid
 *             self._taskid._task = self
 */

#line 257 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_args_2, __pyx_v_args) < 0) __PYX_ERR(0, 257, __pyx_L7_error)

          /* "miniparla/runtime.pyx":258
 *             self._func = func
 *             self._args = args
 *             self._taskid = taskid             # <<<<<<<<<<<<<<
 *             self._taskid._task = self
 *             self._req = req
 */

#line 258 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_taskid_2, __pyx_v_taskid) < 0) __PYX_ERR(0, 258, __pyx_L7_error)

          /* "miniparla/runtime.pyx":259
 *             self._args = args
 *             self._taskid = taskid
 *             self._taskid._task = self             # <<<<<<<<<<<<<<
 *             self._req = req
 *             self._name = name
 */

#line 259 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_taskid_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L7_error)

#line 259 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 259 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_t_1, __pyx_n_s_task, __pyx_v_self) < 0) __PYX_ERR(0, 259, __pyx_L7_error)

#line 259 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":260
 *             self._taskid = taskid
 *             self._taskid._task = self
 *             self._req = req             # <<<<<<<<<<<<<<
 *             self._name = name
 * 
 */

#line 260 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_req_2, __pyx_v_req) < 0) __PYX_ERR(0, 260, __pyx_L7_error)

          /* "miniparla/runtime.pyx":261
 *             self._taskid._task = self
 *             self._req = req
 *             self._name = name             # <<<<<<<<<<<<<<
 * 
 *             self._state = TaskRunning(func, args, dependencies)
 */

#line 261 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name_2, __pyx_v_name) < 0) __PYX_ERR(0, 261, __pyx_L7_error)

          /* "miniparla/runtime.pyx":263
 *             self._name = name
 * 
 *             self._state = TaskRunning(func, args, dependencies)             # <<<<<<<<<<<<<<
 * 
 *             #flat_deps = [dep.task.inner_task for dep in dependencies]
 */

#line 263 "miniparla/runtime.pyx"
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TaskRunning); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L7_error)

#line 263 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 263 "miniparla/runtime.pyx"
          __pyx_t_2 = NULL;

#line 263 "miniparla/runtime.pyx"
          __pyx_t_9 = 0;

#line 263 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 263 "miniparla/runtime.pyx"
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 263 "miniparla/runtime.pyx"
            if (likely(__pyx_t_2)) {

#line 263 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 263 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_2);

#line 263 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 263 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_3, function);

#line 263 "miniparla/runtime.pyx"
              __pyx_t_9 = 1;

#line 263 "miniparla/runtime.pyx"
            }

#line 263 "miniparla/runtime.pyx"
          }

#line 263 "miniparla/runtime.pyx"
          #if CYTHON_FAST_PYCALL

#line 263 "miniparla/runtime.pyx"
          if (PyFunction_Check(__pyx_t_3)) {

#line 263 "miniparla/runtime.pyx"
            PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_func, __pyx_v_args, __pyx_v_dependencies};

#line 263 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L7_error)

#line 263 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 263 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 263 "miniparla/runtime.pyx"
          } else

#line 263 "miniparla/runtime.pyx"
          #endif

#line 263 "miniparla/runtime.pyx"
          #if CYTHON_FAST_PYCCALL

#line 263 "miniparla/runtime.pyx"
          if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 263 "miniparla/runtime.pyx"
            PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_func, __pyx_v_args, __pyx_v_dependencies};

#line 263 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L7_error)

#line 263 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 263 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 263 "miniparla/runtime.pyx"
          } else

#line 263 "miniparla/runtime.pyx"
          #endif

#line 263 "miniparla/runtime.pyx"
          {

#line 263 "miniparla/runtime.pyx"
            __pyx_t_5 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 263, __pyx_L7_error)

#line 263 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_5);

#line 263 "miniparla/runtime.pyx"
            if (__pyx_t_2) {

#line 263 "miniparla/runtime.pyx"
              __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;

#line 263 "miniparla/runtime.pyx"
            }

#line 263 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_v_func);

#line 263 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_v_func);

#line 263 "miniparla/runtime.pyx"
            PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_9, __pyx_v_func);

#line 263 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_v_args);

#line 263 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_v_args);

#line 263 "miniparla/runtime.pyx"
            PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_9, __pyx_v_args);

#line 263 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_v_dependencies);

#line 263 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_v_dependencies);

#line 263 "miniparla/runtime.pyx"
            PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_9, __pyx_v_dependencies);

#line 263 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L7_error)

#line 263 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 263 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 263 "miniparla/runtime.pyx"
          }

#line 263 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 263 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_state, __pyx_t_1) < 0) __PYX_ERR(0, 263, __pyx_L7_error)

#line 263 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":266
 * 
 *             #flat_deps = [dep.task.inner_task for dep in dependencies]
 *             self.inner_task = PyInnerTask(self.id, self, req.vcus)             # <<<<<<<<<<<<<<
 *             self.inner_task.set_dependencies(dependencies)
 * 
 */

#line 266 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L7_error)

#line 266 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 266 "miniparla/runtime.pyx"
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_req, __pyx_n_s_vcus); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L7_error)

#line 266 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 266 "miniparla/runtime.pyx"
          __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 266, __pyx_L7_error)

#line 266 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 266 "miniparla/runtime.pyx"
          __Pyx_GIVEREF(__pyx_t_1);

#line 266 "miniparla/runtime.pyx"
          PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);

#line 266 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_v_self);

#line 266 "miniparla/runtime.pyx"
          __Pyx_GIVEREF(__pyx_v_self);

#line 266 "miniparla/runtime.pyx"
          PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_self);

#line 266 "miniparla/runtime.pyx"
          __Pyx_GIVEREF(__pyx_t_3);

#line 266 "miniparla/runtime.pyx"
          PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);

#line 266 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

#line 266 "miniparla/runtime.pyx"
          __pyx_t_3 = 0;

#line 266 "miniparla/runtime.pyx"
          __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9miniparla_7runtime_PyInnerTask), __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L7_error)

#line 266 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 266 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 266 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_inner_task, __pyx_t_3) < 0) __PYX_ERR(0, 266, __pyx_L7_error)

#line 266 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "miniparla/runtime.pyx":267
 *             #flat_deps = [dep.task.inner_task for dep in dependencies]
 *             self.inner_task = PyInnerTask(self.id, self, req.vcus)
 *             self.inner_task.set_dependencies(dependencies)             # <<<<<<<<<<<<<<
 * 
 *             self.context = get_scheduler_context()
 */

#line 267 "miniparla/runtime.pyx"
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_task); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L7_error)

#line 267 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 267 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_set_dependencies); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L7_error)

#line 267 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 267 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 267 "miniparla/runtime.pyx"
          __pyx_t_5 = NULL;

#line 267 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 267 "miniparla/runtime.pyx"
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);

#line 267 "miniparla/runtime.pyx"
            if (likely(__pyx_t_5)) {

#line 267 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 267 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_5);

#line 267 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 267 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_1, function);

#line 267 "miniparla/runtime.pyx"
            }

#line 267 "miniparla/runtime.pyx"
          }

#line 267 "miniparla/runtime.pyx"
          __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v_dependencies) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_dependencies);

#line 267 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 267 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L7_error)

#line 267 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 267 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 267 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "miniparla/runtime.pyx":269
 *             self.inner_task.set_dependencies(dependencies)
 * 
 *             self.context = get_scheduler_context()             # <<<<<<<<<<<<<<
 * 
 *             self.result = None
 */

#line 269 "miniparla/runtime.pyx"
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_get_scheduler_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L7_error)

#line 269 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 269 "miniparla/runtime.pyx"
          __pyx_t_5 = NULL;

#line 269 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 269 "miniparla/runtime.pyx"
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);

#line 269 "miniparla/runtime.pyx"
            if (likely(__pyx_t_5)) {

#line 269 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 269 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_5);

#line 269 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 269 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_1, function);

#line 269 "miniparla/runtime.pyx"
            }

#line 269 "miniparla/runtime.pyx"
          }

#line 269 "miniparla/runtime.pyx"
          __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);

#line 269 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 269 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 269, __pyx_L7_error)

#line 269 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 269 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 269 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_context, __pyx_t_3) < 0) __PYX_ERR(0, 269, __pyx_L7_error)

#line 269 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "miniparla/runtime.pyx":271
 *             self.context = get_scheduler_context()
 * 
 *             self.result = None             # <<<<<<<<<<<<<<
 * 
 *             #self.context.scheduler._task_dict.add(self)
 */

#line 271 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_result, Py_None) < 0) __PYX_ERR(0, 271, __pyx_L7_error)

          /* "miniparla/runtime.pyx":274
 * 
 *             #self.context.scheduler._task_dict.add(self)
 *             self.context.scheduler.incr_active_tasks()             # <<<<<<<<<<<<<<
 * 
 *             if not self.blocked_unsafe():
 */

#line 274 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L7_error)

#line 274 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 274 "miniparla/runtime.pyx"
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L7_error)

#line 274 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 274 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 274 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_incr_active_tasks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L7_error)

#line 274 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 274 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 274 "miniparla/runtime.pyx"
          __pyx_t_5 = NULL;

#line 274 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 274 "miniparla/runtime.pyx"
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);

#line 274 "miniparla/runtime.pyx"
            if (likely(__pyx_t_5)) {

#line 274 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 274 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_5);

#line 274 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 274 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_1, function);

#line 274 "miniparla/runtime.pyx"
            }

#line 274 "miniparla/runtime.pyx"
          }

#line 274 "miniparla/runtime.pyx"
          __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);

#line 274 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 274 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L7_error)

#line 274 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 274 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 274 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "miniparla/runtime.pyx":276
 *             self.context.scheduler.incr_active_tasks()
 * 
 *             if not self.blocked_unsafe():             # <<<<<<<<<<<<<<
 *                 self.context.scheduler.enqueue_task(self)
 * 
 */

#line 276 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_blocked_unsafe); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L7_error)

#line 276 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 276 "miniparla/runtime.pyx"
          __pyx_t_5 = NULL;

#line 276 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 276 "miniparla/runtime.pyx"
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);

#line 276 "miniparla/runtime.pyx"
            if (likely(__pyx_t_5)) {

#line 276 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 276 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_5);

#line 276 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 276 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_1, function);

#line 276 "miniparla/runtime.pyx"
            }

#line 276 "miniparla/runtime.pyx"
          }

#line 276 "miniparla/runtime.pyx"
          __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);

#line 276 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 276 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 276, __pyx_L7_error)

#line 276 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 276 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 276 "miniparla/runtime.pyx"
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 276, __pyx_L7_error)

#line 276 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 276 "miniparla/runtime.pyx"
          __pyx_t_11 = ((!__pyx_t_10) != 0);

#line 276 "miniparla/runtime.pyx"
          if (__pyx_t_11) {

            /* "miniparla/runtime.pyx":277
 * 
 *             if not self.blocked_unsafe():
 *                 self.context.scheduler.enqueue_task(self)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 277 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L7_error)

#line 277 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 277 "miniparla/runtime.pyx"
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L7_error)

#line 277 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_5);

#line 277 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 277 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_enqueue_task); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L7_error)

#line 277 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 277 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 277 "miniparla/runtime.pyx"
            __pyx_t_5 = NULL;

#line 277 "miniparla/runtime.pyx"
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 277 "miniparla/runtime.pyx"
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);

#line 277 "miniparla/runtime.pyx"
              if (likely(__pyx_t_5)) {

#line 277 "miniparla/runtime.pyx"
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 277 "miniparla/runtime.pyx"
                __Pyx_INCREF(__pyx_t_5);

#line 277 "miniparla/runtime.pyx"
                __Pyx_INCREF(function);

#line 277 "miniparla/runtime.pyx"
                __Pyx_DECREF_SET(__pyx_t_1, function);

#line 277 "miniparla/runtime.pyx"
              }

#line 277 "miniparla/runtime.pyx"
            }

#line 277 "miniparla/runtime.pyx"
            __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v_self) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_self);

#line 277 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 277 "miniparla/runtime.pyx"
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 277, __pyx_L7_error)

#line 277 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_3);

#line 277 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 277 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "miniparla/runtime.pyx":276
 *             self.context.scheduler.incr_active_tasks()
 * 
 *             if not self.blocked_unsafe():             # <<<<<<<<<<<<<<
 *                 self.context.scheduler.enqueue_task(self)
 * 
 */

#line 276 "miniparla/runtime.pyx"
          }

          /* "miniparla/runtime.pyx":254
 *         self._mutex = threading.Lock()
 * 
 *         with self._mutex:             # <<<<<<<<<<<<<<
 *             self.id = id(self)
 *             self._func = func
 */

#line 254 "miniparla/runtime.pyx"
        }

#line 254 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 254 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 254 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 254 "miniparla/runtime.pyx"
        goto __pyx_L12_try_end;

#line 254 "miniparla/runtime.pyx"
        __pyx_L7_error:;

#line 254 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 254 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 254 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 254 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 254 "miniparla/runtime.pyx"
        /*except:*/ {

#line 254 "miniparla/runtime.pyx"
          __Pyx_AddTraceback("miniparla.runtime.Task.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 254 "miniparla/runtime.pyx"
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_5) < 0) __PYX_ERR(0, 254, __pyx_L9_except_error)

#line 254 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 254 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 254 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 254 "miniparla/runtime.pyx"
          __pyx_t_2 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L9_except_error)

#line 254 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 254 "miniparla/runtime.pyx"
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL);

#line 254 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 254 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 254 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 254, __pyx_L9_except_error)

#line 254 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_12);

#line 254 "miniparla/runtime.pyx"
          __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_12);

#line 254 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 254 "miniparla/runtime.pyx"
          if (__pyx_t_11 < 0) __PYX_ERR(0, 254, __pyx_L9_except_error)

#line 254 "miniparla/runtime.pyx"
          __pyx_t_10 = ((!(__pyx_t_11 != 0)) != 0);

#line 254 "miniparla/runtime.pyx"
          if (__pyx_t_10) {

#line 254 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_3);

#line 254 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_1);

#line 254 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_5);

#line 254 "miniparla/runtime.pyx"
            __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_1, __pyx_t_5);
            __pyx_t_3 = 0; __pyx_t_1 = 0; __pyx_t_5 = 0; 
#line 254 "miniparla/runtime.pyx"


#line 254 "miniparla/runtime.pyx"
            __PYX_ERR(0, 254, __pyx_L9_except_error)

#line 254 "miniparla/runtime.pyx"
          }

#line 254 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 254 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 254 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 254 "miniparla/runtime.pyx"
          goto __pyx_L8_exception_handled;

#line 254 "miniparla/runtime.pyx"
        }

#line 254 "miniparla/runtime.pyx"
        __pyx_L9_except_error:;

#line 254 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 254 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 254 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 254 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 254 "miniparla/runtime.pyx"
        goto __pyx_L1_error;

#line 254 "miniparla/runtime.pyx"
        __pyx_L8_exception_handled:;

#line 254 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 254 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 254 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 254 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 254 "miniparla/runtime.pyx"
        __pyx_L12_try_end:;

#line 254 "miniparla/runtime.pyx"
      }

#line 254 "miniparla/runtime.pyx"
    }

#line 254 "miniparla/runtime.pyx"
    /*finally:*/ {

#line 254 "miniparla/runtime.pyx"
      /*normal exit:*/{

#line 254 "miniparla/runtime.pyx"
        if (__pyx_t_4) {

#line 254 "miniparla/runtime.pyx"
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__6, NULL);

#line 254 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 254 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 254, __pyx_L1_error)

#line 254 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 254 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 254 "miniparla/runtime.pyx"
        }

#line 254 "miniparla/runtime.pyx"
        goto __pyx_L6;

#line 254 "miniparla/runtime.pyx"
      }

#line 254 "miniparla/runtime.pyx"
      __pyx_L6:;

#line 254 "miniparla/runtime.pyx"
    }

#line 254 "miniparla/runtime.pyx"
    goto __pyx_L17;

#line 254 "miniparla/runtime.pyx"
    __pyx_L3_error:;

#line 254 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 254 "miniparla/runtime.pyx"
    goto __pyx_L1_error;

#line 254 "miniparla/runtime.pyx"
    __pyx_L17:;

#line 254 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":251
 * class Task:
 * 
 *     def __init__(self, func, args, dependencies, taskid, req, name):             # <<<<<<<<<<<<<<
 *         self._mutex = threading.Lock()
 * 
 */

#line 251 "miniparla/runtime.pyx"


#line 251 "miniparla/runtime.pyx"
  /* function exit code */

#line 251 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 251 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 251 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 251 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 251 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 251 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 251 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 251 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 251 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 251 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 251 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 251 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 251 "miniparla/runtime.pyx"
  return __pyx_r;

#line 251 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":280
 * 
 *     @property
 *     def req(self):             # <<<<<<<<<<<<<<
 *         return self._req
 * 
 */

#line 280 "miniparla/runtime.pyx"


#line 280 "miniparla/runtime.pyx"
/* Python wrapper */

#line 280 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_3req(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_3req = 
#line 280 "miniparla/runtime.pyx"
{"req", (PyCFunction)__pyx_pw_9miniparla_7runtime_4Task_3req, METH_O, 0};

#line 280 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_3req(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 280 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 280 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 280 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("req (wrapper)", 0);
  __pyx_r = 
#line 280 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_2req(__pyx_self, ((PyObject *)__pyx_v_self));

#line 280 "miniparla/runtime.pyx"


#line 280 "miniparla/runtime.pyx"
  /* function exit code */

#line 280 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 280 "miniparla/runtime.pyx"
  return __pyx_r;

#line 280 "miniparla/runtime.pyx"
}

#line 280 "miniparla/runtime.pyx"


#line 280 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_2req(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 280 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 280 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 280 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 280 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 280 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 280 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 280 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("req", 0);

  /* "miniparla/runtime.pyx":281
 *     @property
 *     def req(self):
 *         return self._req             # <<<<<<<<<<<<<<
 * 
 *     def _execute_task(self):
 */

#line 281 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 281 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_req_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)

#line 281 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 281 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 281 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 281 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":280
 * 
 *     @property
 *     def req(self):             # <<<<<<<<<<<<<<
 *         return self._req
 * 
 */

#line 280 "miniparla/runtime.pyx"


#line 280 "miniparla/runtime.pyx"
  /* function exit code */

#line 280 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 280 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 280 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task.req", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 280 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 280 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 280 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 280 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 280 "miniparla/runtime.pyx"
  return __pyx_r;

#line 280 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":283
 *         return self._req
 * 
 *     def _execute_task(self):             # <<<<<<<<<<<<<<
 *         return self._state.func(self, *self._state.args)
 * 
 */

#line 283 "miniparla/runtime.pyx"


#line 283 "miniparla/runtime.pyx"
/* Python wrapper */

#line 283 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_5_execute_task(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_5_execute_task = 
#line 283 "miniparla/runtime.pyx"
{"_execute_task", (PyCFunction)__pyx_pw_9miniparla_7runtime_4Task_5_execute_task, METH_O, 0};

#line 283 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_5_execute_task(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 283 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 283 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 283 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_execute_task (wrapper)", 0);
  __pyx_r = 
#line 283 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_4_execute_task(__pyx_self, ((PyObject *)__pyx_v_self));

#line 283 "miniparla/runtime.pyx"


#line 283 "miniparla/runtime.pyx"
  /* function exit code */

#line 283 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 283 "miniparla/runtime.pyx"
  return __pyx_r;

#line 283 "miniparla/runtime.pyx"
}

#line 283 "miniparla/runtime.pyx"


#line 283 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_4_execute_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 283 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 283 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 283 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 283 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 283 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 283 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 283 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 283 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 283 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 283 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_execute_task", 0);

  /* "miniparla/runtime.pyx":284
 * 
 *     def _execute_task(self):
 *         return self._state.func(self, *self._state.args)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 284 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 284 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_state); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)

#line 284 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 284 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_func); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)

#line 284 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 284 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 284 "miniparla/runtime.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)

#line 284 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 284 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 284 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_self);

#line 284 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);

#line 284 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_state); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)

#line 284 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 284 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 284, __pyx_L1_error)

#line 284 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 284 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 284 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)

#line 284 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 284 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 284 "miniparla/runtime.pyx"
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 284, __pyx_L1_error)

#line 284 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 284 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 284 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 284 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)

#line 284 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 284 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 284 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 284 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_3;

#line 284 "miniparla/runtime.pyx"
  __pyx_t_3 = 0;

#line 284 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":283
 *         return self._req
 * 
 *     def _execute_task(self):             # <<<<<<<<<<<<<<
 *         return self._state.func(self, *self._state.args)
 * 
 */

#line 283 "miniparla/runtime.pyx"


#line 283 "miniparla/runtime.pyx"
  /* function exit code */

#line 283 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 283 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 283 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 283 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 283 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 283 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task._execute_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 283 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 283 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 283 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 283 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 283 "miniparla/runtime.pyx"
  return __pyx_r;

#line 283 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":287
 * 
 *     @property
 *     def task(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

#line 287 "miniparla/runtime.pyx"


#line 287 "miniparla/runtime.pyx"
/* Python wrapper */

#line 287 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_7task(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_7task = 
#line 287 "miniparla/runtime.pyx"
{"task", (PyCFunction)__pyx_pw_9miniparla_7runtime_4Task_7task, METH_O, 0};

#line 287 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_7task(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 287 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 287 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 287 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("task (wrapper)", 0);
  __pyx_r = 
#line 287 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_6task(__pyx_self, ((PyObject *)__pyx_v_self));

#line 287 "miniparla/runtime.pyx"


#line 287 "miniparla/runtime.pyx"
  /* function exit code */

#line 287 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 287 "miniparla/runtime.pyx"
  return __pyx_r;

#line 287 "miniparla/runtime.pyx"
}

#line 287 "miniparla/runtime.pyx"


#line 287 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_6task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 287 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 287 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 287 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("task", 0);

  /* "miniparla/runtime.pyx":288
 *     @property
 *     def task(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def _finish(self, ctx):
 */

#line 288 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 288 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 288 "miniparla/runtime.pyx"
  __pyx_r = __pyx_v_self;

#line 288 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":287
 * 
 *     @property
 *     def task(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

#line 287 "miniparla/runtime.pyx"


#line 287 "miniparla/runtime.pyx"
  /* function exit code */

#line 287 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 287 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 287 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 287 "miniparla/runtime.pyx"
  return __pyx_r;

#line 287 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":290
 *         return self
 * 
 *     def _finish(self, ctx):             # <<<<<<<<<<<<<<
 *         #ctx.remove_vcus(self.req.vcus)
 *         pass
 */

#line 290 "miniparla/runtime.pyx"


#line 290 "miniparla/runtime.pyx"
/* Python wrapper */

#line 290 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_9_finish(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_9_finish = 
#line 290 "miniparla/runtime.pyx"
{"_finish", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_4Task_9_finish, METH_VARARGS|METH_KEYWORDS, 0};

#line 290 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_9_finish(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0
#line 290 "miniparla/runtime.pyx"
;
  CYTHON_UNUSED PyObject *__pyx_v_ctx = 0
#line 290 "miniparla/runtime.pyx"
;

#line 290 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 290 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 290 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 290 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 290 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 290 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_finish (wrapper)", 0);

#line 290 "miniparla/runtime.pyx"
  {

#line 290 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_ctx,0};

#line 290 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 290 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 290 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 290 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 290 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 290 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 290 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 290 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 290 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 290 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 290 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 290 "miniparla/runtime.pyx"
      }

#line 290 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 290 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 290 "miniparla/runtime.pyx"
        case  0:

#line 290 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 290 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 290 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 290 "miniparla/runtime.pyx"
        case  1:

#line 290 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ctx)) != 0)) kw_args--;

#line 290 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_finish", 1, 2, 2, 1); 
#line 290 "miniparla/runtime.pyx"
__PYX_ERR(0, 290, __pyx_L3_error)

#line 290 "miniparla/runtime.pyx"
        }

#line 290 "miniparla/runtime.pyx"
      }

#line 290 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 290 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_finish") < 0)) __PYX_ERR(0, 290, __pyx_L3_error)

#line 290 "miniparla/runtime.pyx"
      }

#line 290 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 290 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 290 "miniparla/runtime.pyx"
    } else {

#line 290 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 290 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 290 "miniparla/runtime.pyx"
    }

#line 290 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 290 "miniparla/runtime.pyx"
    __pyx_v_ctx = values[1];

#line 290 "miniparla/runtime.pyx"
  }

#line 290 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 290 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_finish", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 290 "miniparla/runtime.pyx"
__PYX_ERR(0, 290, __pyx_L3_error)

#line 290 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 290 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task._finish", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 290 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 290 "miniparla/runtime.pyx"
  return NULL;

#line 290 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 290 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_8_finish(__pyx_self, __pyx_v_self, __pyx_v_ctx);

#line 290 "miniparla/runtime.pyx"


#line 290 "miniparla/runtime.pyx"
  /* function exit code */

#line 290 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 290 "miniparla/runtime.pyx"
  return __pyx_r;

#line 290 "miniparla/runtime.pyx"
}

#line 290 "miniparla/runtime.pyx"


#line 290 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_8_finish(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_ctx) {

#line 290 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 290 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 290 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_finish", 0);

#line 290 "miniparla/runtime.pyx"


#line 290 "miniparla/runtime.pyx"
  /* function exit code */

#line 290 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 290 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 290 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 290 "miniparla/runtime.pyx"
  return __pyx_r;

#line 290 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":294
 *         pass
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         #print("Running task", self._name, self.id, flush=True)
 * 
 */

#line 294 "miniparla/runtime.pyx"


#line 294 "miniparla/runtime.pyx"
/* Python wrapper */

#line 294 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_11run(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_11run = 
#line 294 "miniparla/runtime.pyx"
{"run", (PyCFunction)__pyx_pw_9miniparla_7runtime_4Task_11run, METH_O, 0};

#line 294 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_11run(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 294 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 294 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = 
#line 294 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_10run(__pyx_self, ((PyObject *)__pyx_v_self));

#line 294 "miniparla/runtime.pyx"


#line 294 "miniparla/runtime.pyx"
  /* function exit code */

#line 294 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 294 "miniparla/runtime.pyx"
  return __pyx_r;

#line 294 "miniparla/runtime.pyx"
}

#line 294 "miniparla/runtime.pyx"


#line 294 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_10run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_task_state = NULL
#line 294 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_e = NULL
#line 294 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_ctx = NULL
#line 294 "miniparla/runtime.pyx"
;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 294 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_13 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_14 = NULL;

#line 294 "miniparla/runtime.pyx"
  int __pyx_t_15;

#line 294 "miniparla/runtime.pyx"
  int __pyx_t_16;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_17 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_18 = NULL;

#line 294 "miniparla/runtime.pyx"
  int __pyx_t_19;

#line 294 "miniparla/runtime.pyx"
  char const *__pyx_t_20;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_21 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_22 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_23 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_24 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_25 = NULL;

#line 294 "miniparla/runtime.pyx"
  PyObject *__pyx_t_26 = NULL;

#line 294 "miniparla/runtime.pyx"
  int __pyx_t_27;

#line 294 "miniparla/runtime.pyx"
  char const *__pyx_t_28;

#line 294 "miniparla/runtime.pyx"
  int __pyx_t_29;

#line 294 "miniparla/runtime.pyx"
  char const *__pyx_t_30;

#line 294 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 294 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 294 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 294 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run", 0);

  /* "miniparla/runtime.pyx":298
 * 
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             with self._mutex:
 *                 task_state = TaskException(RuntimeError("Unknown Error"))
 */

#line 298 "miniparla/runtime.pyx"
  {

#line 298 "miniparla/runtime.pyx"
    __Pyx_PyThreadState_declare

#line 298 "miniparla/runtime.pyx"
    __Pyx_PyThreadState_assign

#line 298 "miniparla/runtime.pyx"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 298 "miniparla/runtime.pyx"
    __Pyx_XGOTREF(__pyx_t_1);

#line 298 "miniparla/runtime.pyx"
    __Pyx_XGOTREF(__pyx_t_2);

#line 298 "miniparla/runtime.pyx"
    __Pyx_XGOTREF(__pyx_t_3);

#line 298 "miniparla/runtime.pyx"
    /*try:*/ {

      /* "miniparla/runtime.pyx":299
 * 
 *         try:
 *             with self._mutex:             # <<<<<<<<<<<<<<
 *                 task_state = TaskException(RuntimeError("Unknown Error"))
 * 
 */

#line 299 "miniparla/runtime.pyx"
      /*with:*/ {

#line 299 "miniparla/runtime.pyx"
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_mutex); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 299, __pyx_L3_error)

#line 299 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 299 "miniparla/runtime.pyx"
        __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 299, __pyx_L3_error)

#line 299 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 299 "miniparla/runtime.pyx"
        __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_enter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 299, __pyx_L9_error)

#line 299 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 299 "miniparla/runtime.pyx"
        __pyx_t_8 = NULL;

#line 299 "miniparla/runtime.pyx"
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {

#line 299 "miniparla/runtime.pyx"
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);

#line 299 "miniparla/runtime.pyx"
          if (likely(__pyx_t_8)) {

#line 299 "miniparla/runtime.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 299 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_t_8);

#line 299 "miniparla/runtime.pyx"
            __Pyx_INCREF(function);

#line 299 "miniparla/runtime.pyx"
            __Pyx_DECREF_SET(__pyx_t_7, function);

#line 299 "miniparla/runtime.pyx"
          }

#line 299 "miniparla/runtime.pyx"
        }

#line 299 "miniparla/runtime.pyx"
        __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);

#line 299 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 299 "miniparla/runtime.pyx"
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 299, __pyx_L9_error)

#line 299 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 299 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 299 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 299 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 299 "miniparla/runtime.pyx"
        /*try:*/ {

#line 299 "miniparla/runtime.pyx"
          {

#line 299 "miniparla/runtime.pyx"
            __Pyx_PyThreadState_declare

#line 299 "miniparla/runtime.pyx"
            __Pyx_PyThreadState_assign

#line 299 "miniparla/runtime.pyx"
            __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);

#line 299 "miniparla/runtime.pyx"
            __Pyx_XGOTREF(__pyx_t_9);

#line 299 "miniparla/runtime.pyx"
            __Pyx_XGOTREF(__pyx_t_10);

#line 299 "miniparla/runtime.pyx"
            __Pyx_XGOTREF(__pyx_t_11);

#line 299 "miniparla/runtime.pyx"
            /*try:*/ {

              /* "miniparla/runtime.pyx":300
 *         try:
 *             with self._mutex:
 *                 task_state = TaskException(RuntimeError("Unknown Error"))             # <<<<<<<<<<<<<<
 * 
 *                 try:
 */

#line 300 "miniparla/runtime.pyx"
              __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_TaskException); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 300, __pyx_L13_error)

#line 300 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_6);

#line 300 "miniparla/runtime.pyx"
              __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 300, __pyx_L13_error)

#line 300 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_7);

#line 300 "miniparla/runtime.pyx"
              __pyx_t_8 = NULL;

#line 300 "miniparla/runtime.pyx"
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 300 "miniparla/runtime.pyx"
                __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);

#line 300 "miniparla/runtime.pyx"
                if (likely(__pyx_t_8)) {

#line 300 "miniparla/runtime.pyx"
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 300 "miniparla/runtime.pyx"
                  __Pyx_INCREF(__pyx_t_8);

#line 300 "miniparla/runtime.pyx"
                  __Pyx_INCREF(function);

#line 300 "miniparla/runtime.pyx"
                  __Pyx_DECREF_SET(__pyx_t_6, function);

#line 300 "miniparla/runtime.pyx"
                }

#line 300 "miniparla/runtime.pyx"
              }

#line 300 "miniparla/runtime.pyx"
              __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);

#line 300 "miniparla/runtime.pyx"
              __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 300 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 300 "miniparla/runtime.pyx"
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 300, __pyx_L13_error)

#line 300 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_4);

#line 300 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 300 "miniparla/runtime.pyx"
              __pyx_v_task_state = __pyx_t_4;

#line 300 "miniparla/runtime.pyx"
              __pyx_t_4 = 0;

              /* "miniparla/runtime.pyx":302
 *                 task_state = TaskException(RuntimeError("Unknown Error"))
 * 
 *                 try:             # <<<<<<<<<<<<<<
 *                     assert isinstance(self._state, TaskRunning)
 *                     task_state = self._execute_task()
 */

#line 302 "miniparla/runtime.pyx"
              /*try:*/ {

#line 302 "miniparla/runtime.pyx"
                {

#line 302 "miniparla/runtime.pyx"
                  __Pyx_PyThreadState_declare

#line 302 "miniparla/runtime.pyx"
                  __Pyx_PyThreadState_assign

#line 302 "miniparla/runtime.pyx"
                  __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XGOTREF(__pyx_t_12);

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XGOTREF(__pyx_t_13);

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XGOTREF(__pyx_t_14);

#line 302 "miniparla/runtime.pyx"
                  /*try:*/ {

                    /* "miniparla/runtime.pyx":303
 * 
 *                 try:
 *                     assert isinstance(self._state, TaskRunning)             # <<<<<<<<<<<<<<
 *                     task_state = self._execute_task()
 *                     task_state = task_state or TaskCompleted(None)
 */

#line 303 "miniparla/runtime.pyx"
                    #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 303 "miniparla/runtime.pyx"
                    if (unlikely(!Py_OptimizeFlag)) {

#line 303 "miniparla/runtime.pyx"
                      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_state); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 303, __pyx_L22_error)

#line 303 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_4);

#line 303 "miniparla/runtime.pyx"
                      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_TaskRunning); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L22_error)

#line 303 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_6);

#line 303 "miniparla/runtime.pyx"
                      __pyx_t_15 = PyObject_IsInstance(__pyx_t_4, __pyx_t_6); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 303, __pyx_L22_error)

#line 303 "miniparla/runtime.pyx"
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 303 "miniparla/runtime.pyx"
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 303 "miniparla/runtime.pyx"
                      if (unlikely(!(__pyx_t_15 != 0))) {

#line 303 "miniparla/runtime.pyx"
                        PyErr_SetNone(PyExc_AssertionError);

#line 303 "miniparla/runtime.pyx"
                        __PYX_ERR(0, 303, __pyx_L22_error)

#line 303 "miniparla/runtime.pyx"
                      }

#line 303 "miniparla/runtime.pyx"
                    }

#line 303 "miniparla/runtime.pyx"
                    #endif

                    /* "miniparla/runtime.pyx":304
 *                 try:
 *                     assert isinstance(self._state, TaskRunning)
 *                     task_state = self._execute_task()             # <<<<<<<<<<<<<<
 *                     task_state = task_state or TaskCompleted(None)
 *                 except Exception as e:
 */

#line 304 "miniparla/runtime.pyx"
                    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_execute_task); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L22_error)

#line 304 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_4);

#line 304 "miniparla/runtime.pyx"
                    __pyx_t_7 = NULL;

#line 304 "miniparla/runtime.pyx"
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 304 "miniparla/runtime.pyx"
                      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);

#line 304 "miniparla/runtime.pyx"
                      if (likely(__pyx_t_7)) {

#line 304 "miniparla/runtime.pyx"
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 304 "miniparla/runtime.pyx"
                        __Pyx_INCREF(__pyx_t_7);

#line 304 "miniparla/runtime.pyx"
                        __Pyx_INCREF(function);

#line 304 "miniparla/runtime.pyx"
                        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 304 "miniparla/runtime.pyx"
                      }

#line 304 "miniparla/runtime.pyx"
                    }

#line 304 "miniparla/runtime.pyx"
                    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 304 "miniparla/runtime.pyx"
                    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 304 "miniparla/runtime.pyx"
                    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 304, __pyx_L22_error)

#line 304 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_6);

#line 304 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 304 "miniparla/runtime.pyx"
                    __Pyx_DECREF_SET(__pyx_v_task_state, __pyx_t_6);

#line 304 "miniparla/runtime.pyx"
                    __pyx_t_6 = 0;

                    /* "miniparla/runtime.pyx":305
 *                     assert isinstance(self._state, TaskRunning)
 *                     task_state = self._execute_task()
 *                     task_state = task_state or TaskCompleted(None)             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     task_state = TaskException(e)
 */

#line 305 "miniparla/runtime.pyx"
                    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_task_state); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 305, __pyx_L22_error)

#line 305 "miniparla/runtime.pyx"
                    if (!__pyx_t_15) {

#line 305 "miniparla/runtime.pyx"
                    } else {

#line 305 "miniparla/runtime.pyx"
                      __Pyx_INCREF(__pyx_v_task_state);

#line 305 "miniparla/runtime.pyx"
                      __pyx_t_6 = __pyx_v_task_state;

#line 305 "miniparla/runtime.pyx"
                      goto __pyx_L28_bool_binop_done;

#line 305 "miniparla/runtime.pyx"
                    }

#line 305 "miniparla/runtime.pyx"
                    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_TaskCompleted); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 305, __pyx_L22_error)

#line 305 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_7);

#line 305 "miniparla/runtime.pyx"
                    __pyx_t_8 = NULL;

#line 305 "miniparla/runtime.pyx"
                    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {

#line 305 "miniparla/runtime.pyx"
                      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);

#line 305 "miniparla/runtime.pyx"
                      if (likely(__pyx_t_8)) {

#line 305 "miniparla/runtime.pyx"
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 305 "miniparla/runtime.pyx"
                        __Pyx_INCREF(__pyx_t_8);

#line 305 "miniparla/runtime.pyx"
                        __Pyx_INCREF(function);

#line 305 "miniparla/runtime.pyx"
                        __Pyx_DECREF_SET(__pyx_t_7, function);

#line 305 "miniparla/runtime.pyx"
                      }

#line 305 "miniparla/runtime.pyx"
                    }

#line 305 "miniparla/runtime.pyx"
                    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, Py_None) : __Pyx_PyObject_CallOneArg(__pyx_t_7, Py_None);

#line 305 "miniparla/runtime.pyx"
                    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 305 "miniparla/runtime.pyx"
                    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 305, __pyx_L22_error)

#line 305 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_4);

#line 305 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 305 "miniparla/runtime.pyx"
                    __Pyx_INCREF(__pyx_t_4);

#line 305 "miniparla/runtime.pyx"
                    __pyx_t_6 = __pyx_t_4;

#line 305 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 305 "miniparla/runtime.pyx"
                    __pyx_L28_bool_binop_done:;

#line 305 "miniparla/runtime.pyx"
                    __Pyx_DECREF_SET(__pyx_v_task_state, __pyx_t_6);

#line 305 "miniparla/runtime.pyx"
                    __pyx_t_6 = 0;

                    /* "miniparla/runtime.pyx":302
 *                 task_state = TaskException(RuntimeError("Unknown Error"))
 * 
 *                 try:             # <<<<<<<<<<<<<<
 *                     assert isinstance(self._state, TaskRunning)
 *                     task_state = self._execute_task()
 */

#line 302 "miniparla/runtime.pyx"
                  }

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 302 "miniparla/runtime.pyx"
                  goto __pyx_L27_try_end;

#line 302 "miniparla/runtime.pyx"
                  __pyx_L22_error:;

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

                  /* "miniparla/runtime.pyx":306
 *                     task_state = self._execute_task()
 *                     task_state = task_state or TaskCompleted(None)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     task_state = TaskException(e)
 *                     print(e)
 */

#line 306 "miniparla/runtime.pyx"
                  __pyx_t_16 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 306 "miniparla/runtime.pyx"
                  if (__pyx_t_16) {

#line 306 "miniparla/runtime.pyx"
                    __Pyx_AddTraceback("miniparla.runtime.Task.run", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 306 "miniparla/runtime.pyx"
                    if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_4, &__pyx_t_7) < 0) __PYX_ERR(0, 306, __pyx_L24_except_error)

#line 306 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_6);

#line 306 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_4);

#line 306 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_7);

#line 306 "miniparla/runtime.pyx"
                    __Pyx_INCREF(__pyx_t_4);

#line 306 "miniparla/runtime.pyx"
                    __pyx_v_e = __pyx_t_4;

#line 306 "miniparla/runtime.pyx"
                    /*try:*/ {

                      /* "miniparla/runtime.pyx":307
 *                     task_state = task_state or TaskCompleted(None)
 *                 except Exception as e:
 *                     task_state = TaskException(e)             # <<<<<<<<<<<<<<
 *                     print(e)
 *                 finally:
 */

#line 307 "miniparla/runtime.pyx"
                      __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_TaskException); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 307, __pyx_L35_error)

#line 307 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_17);

#line 307 "miniparla/runtime.pyx"
                      __pyx_t_18 = NULL;

#line 307 "miniparla/runtime.pyx"
                      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {

#line 307 "miniparla/runtime.pyx"
                        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_17);

#line 307 "miniparla/runtime.pyx"
                        if (likely(__pyx_t_18)) {

#line 307 "miniparla/runtime.pyx"
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);

#line 307 "miniparla/runtime.pyx"
                          __Pyx_INCREF(__pyx_t_18);

#line 307 "miniparla/runtime.pyx"
                          __Pyx_INCREF(function);

#line 307 "miniparla/runtime.pyx"
                          __Pyx_DECREF_SET(__pyx_t_17, function);

#line 307 "miniparla/runtime.pyx"
                        }

#line 307 "miniparla/runtime.pyx"
                      }

#line 307 "miniparla/runtime.pyx"
                      __pyx_t_8 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_18, __pyx_v_e) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_v_e);

#line 307 "miniparla/runtime.pyx"
                      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;

#line 307 "miniparla/runtime.pyx"
                      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 307, __pyx_L35_error)

#line 307 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_8);

#line 307 "miniparla/runtime.pyx"
                      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

#line 307 "miniparla/runtime.pyx"
                      __Pyx_DECREF_SET(__pyx_v_task_state, __pyx_t_8);

#line 307 "miniparla/runtime.pyx"
                      __pyx_t_8 = 0;

                      /* "miniparla/runtime.pyx":308
 *                 except Exception as e:
 *                     task_state = TaskException(e)
 *                     print(e)             # <<<<<<<<<<<<<<
 *                 finally:
 *                     ctx = get_scheduler_context()
 */

#line 308 "miniparla/runtime.pyx"
                      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_v_e); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 308, __pyx_L35_error)

#line 308 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_8);

#line 308 "miniparla/runtime.pyx"
                      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 308 "miniparla/runtime.pyx"
                    }

                    /* "miniparla/runtime.pyx":306
 *                     task_state = self._execute_task()
 *                     task_state = task_state or TaskCompleted(None)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     task_state = TaskException(e)
 *                     print(e)
 */

#line 306 "miniparla/runtime.pyx"
                    /*finally:*/ {

#line 306 "miniparla/runtime.pyx"
                      /*normal exit:*/{

#line 306 "miniparla/runtime.pyx"
                        __Pyx_DECREF(__pyx_v_e);

#line 306 "miniparla/runtime.pyx"
                        __pyx_v_e = NULL;

#line 306 "miniparla/runtime.pyx"
                        goto __pyx_L36;

#line 306 "miniparla/runtime.pyx"
                      }

#line 306 "miniparla/runtime.pyx"
                      __pyx_L35_error:;

#line 306 "miniparla/runtime.pyx"
                      /*exception exit:*/{

#line 306 "miniparla/runtime.pyx"
                        __Pyx_PyThreadState_declare

#line 306 "miniparla/runtime.pyx"
                        __Pyx_PyThreadState_assign

#line 306 "miniparla/runtime.pyx"
                        __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0;

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 306 "miniparla/runtime.pyx"
                        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_24, &__pyx_t_25, &__pyx_t_26);

#line 306 "miniparla/runtime.pyx"
                        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23) < 0)) __Pyx_ErrFetch(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XGOTREF(__pyx_t_21);

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XGOTREF(__pyx_t_22);

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XGOTREF(__pyx_t_23);

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XGOTREF(__pyx_t_24);

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XGOTREF(__pyx_t_25);

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XGOTREF(__pyx_t_26);

#line 306 "miniparla/runtime.pyx"
                        __pyx_t_16 = __pyx_lineno; __pyx_t_19 = __pyx_clineno; __pyx_t_20 = __pyx_filename;

#line 306 "miniparla/runtime.pyx"
                        {

#line 306 "miniparla/runtime.pyx"
                          __Pyx_DECREF(__pyx_v_e);

#line 306 "miniparla/runtime.pyx"
                          __pyx_v_e = NULL;

#line 306 "miniparla/runtime.pyx"
                        }

#line 306 "miniparla/runtime.pyx"
                        if (PY_MAJOR_VERSION >= 3) {

#line 306 "miniparla/runtime.pyx"
                          __Pyx_XGIVEREF(__pyx_t_24);

#line 306 "miniparla/runtime.pyx"
                          __Pyx_XGIVEREF(__pyx_t_25);

#line 306 "miniparla/runtime.pyx"
                          __Pyx_XGIVEREF(__pyx_t_26);

#line 306 "miniparla/runtime.pyx"
                          __Pyx_ExceptionReset(__pyx_t_24, __pyx_t_25, __pyx_t_26);

#line 306 "miniparla/runtime.pyx"
                        }

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XGIVEREF(__pyx_t_21);

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XGIVEREF(__pyx_t_22);

#line 306 "miniparla/runtime.pyx"
                        __Pyx_XGIVEREF(__pyx_t_23);

#line 306 "miniparla/runtime.pyx"
                        __Pyx_ErrRestore(__pyx_t_21, __pyx_t_22, __pyx_t_23);

#line 306 "miniparla/runtime.pyx"
                        __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0;

#line 306 "miniparla/runtime.pyx"
                        __pyx_lineno = __pyx_t_16; __pyx_clineno = __pyx_t_19; __pyx_filename = __pyx_t_20;

#line 306 "miniparla/runtime.pyx"
                        goto __pyx_L24_except_error;

#line 306 "miniparla/runtime.pyx"
                      }

#line 306 "miniparla/runtime.pyx"
                      __pyx_L36:;

#line 306 "miniparla/runtime.pyx"
                    }

#line 306 "miniparla/runtime.pyx"
                    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 306 "miniparla/runtime.pyx"
                    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 306 "miniparla/runtime.pyx"
                    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 306 "miniparla/runtime.pyx"
                    goto __pyx_L23_exception_handled;

#line 306 "miniparla/runtime.pyx"
                  }

#line 306 "miniparla/runtime.pyx"
                  goto __pyx_L24_except_error;

#line 306 "miniparla/runtime.pyx"
                  __pyx_L24_except_error:;

                  /* "miniparla/runtime.pyx":302
 *                 task_state = TaskException(RuntimeError("Unknown Error"))
 * 
 *                 try:             # <<<<<<<<<<<<<<
 *                     assert isinstance(self._state, TaskRunning)
 *                     task_state = self._execute_task()
 */

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XGIVEREF(__pyx_t_12);

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XGIVEREF(__pyx_t_13);

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XGIVEREF(__pyx_t_14);

#line 302 "miniparla/runtime.pyx"
                  __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);

#line 302 "miniparla/runtime.pyx"
                  goto __pyx_L20_error;

#line 302 "miniparla/runtime.pyx"
                  __pyx_L23_exception_handled:;

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XGIVEREF(__pyx_t_12);

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XGIVEREF(__pyx_t_13);

#line 302 "miniparla/runtime.pyx"
                  __Pyx_XGIVEREF(__pyx_t_14);

#line 302 "miniparla/runtime.pyx"
                  __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);

#line 302 "miniparla/runtime.pyx"
                  __pyx_L27_try_end:;

#line 302 "miniparla/runtime.pyx"
                }

#line 302 "miniparla/runtime.pyx"
              }

              /* "miniparla/runtime.pyx":310
 *                     print(e)
 *                 finally:
 *                     ctx = get_scheduler_context()             # <<<<<<<<<<<<<<
 *                     #print("Task Body Finished", flush=True)
 *                     if isinstance(task_state, TaskCompleted):
 */

#line 310 "miniparla/runtime.pyx"
              /*finally:*/ {

#line 310 "miniparla/runtime.pyx"
                /*normal exit:*/{

#line 310 "miniparla/runtime.pyx"
                  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_get_scheduler_context); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 310, __pyx_L13_error)

#line 310 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_4);

#line 310 "miniparla/runtime.pyx"
                  __pyx_t_6 = NULL;

#line 310 "miniparla/runtime.pyx"
                  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 310 "miniparla/runtime.pyx"
                    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);

#line 310 "miniparla/runtime.pyx"
                    if (likely(__pyx_t_6)) {

#line 310 "miniparla/runtime.pyx"
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 310 "miniparla/runtime.pyx"
                      __Pyx_INCREF(__pyx_t_6);

#line 310 "miniparla/runtime.pyx"
                      __Pyx_INCREF(function);

#line 310 "miniparla/runtime.pyx"
                      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 310 "miniparla/runtime.pyx"
                    }

#line 310 "miniparla/runtime.pyx"
                  }

#line 310 "miniparla/runtime.pyx"
                  __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 310 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 310 "miniparla/runtime.pyx"
                  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 310, __pyx_L13_error)

#line 310 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_7);

#line 310 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 310 "miniparla/runtime.pyx"
                  __pyx_v_ctx = __pyx_t_7;

#line 310 "miniparla/runtime.pyx"
                  __pyx_t_7 = 0;

                  /* "miniparla/runtime.pyx":312
 *                     ctx = get_scheduler_context()
 *                     #print("Task Body Finished", flush=True)
 *                     if isinstance(task_state, TaskCompleted):             # <<<<<<<<<<<<<<
 *                         #print("Task Completed", flush=True)
 *                         self._notify_dependents(ctx.scheduler.inner_scheduler)
 */

#line 312 "miniparla/runtime.pyx"
                  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_TaskCompleted); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 312, __pyx_L13_error)

#line 312 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_7);

#line 312 "miniparla/runtime.pyx"
                  __pyx_t_15 = PyObject_IsInstance(__pyx_v_task_state, __pyx_t_7); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 312, __pyx_L13_error)

#line 312 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 312 "miniparla/runtime.pyx"
                  __pyx_t_27 = (__pyx_t_15 != 0);

#line 312 "miniparla/runtime.pyx"
                  if (__pyx_t_27) {

                    /* "miniparla/runtime.pyx":314
 *                     if isinstance(task_state, TaskCompleted):
 *                         #print("Task Completed", flush=True)
 *                         self._notify_dependents(ctx.scheduler.inner_scheduler)             # <<<<<<<<<<<<<<
 *                     self._set_state(task_state, ctx)
 *                     self._finish(ctx)
 */

#line 314 "miniparla/runtime.pyx"
                    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_notify_dependents_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 314, __pyx_L13_error)

#line 314 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_4);

#line 314 "miniparla/runtime.pyx"
                    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_ctx, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 314, __pyx_L13_error)

#line 314 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_6);

#line 314 "miniparla/runtime.pyx"
                    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 314, __pyx_L13_error)

#line 314 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_8);

#line 314 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 314 "miniparla/runtime.pyx"
                    __pyx_t_6 = NULL;

#line 314 "miniparla/runtime.pyx"
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 314 "miniparla/runtime.pyx"
                      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);

#line 314 "miniparla/runtime.pyx"
                      if (likely(__pyx_t_6)) {

#line 314 "miniparla/runtime.pyx"
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 314 "miniparla/runtime.pyx"
                        __Pyx_INCREF(__pyx_t_6);

#line 314 "miniparla/runtime.pyx"
                        __Pyx_INCREF(function);

#line 314 "miniparla/runtime.pyx"
                        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 314 "miniparla/runtime.pyx"
                      }

#line 314 "miniparla/runtime.pyx"
                    }

#line 314 "miniparla/runtime.pyx"
                    __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);

#line 314 "miniparla/runtime.pyx"
                    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 314 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 314 "miniparla/runtime.pyx"
                    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L13_error)

#line 314 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_7);

#line 314 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 314 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                    /* "miniparla/runtime.pyx":312
 *                     ctx = get_scheduler_context()
 *                     #print("Task Body Finished", flush=True)
 *                     if isinstance(task_state, TaskCompleted):             # <<<<<<<<<<<<<<
 *                         #print("Task Completed", flush=True)
 *                         self._notify_dependents(ctx.scheduler.inner_scheduler)
 */

#line 312 "miniparla/runtime.pyx"
                  }

                  /* "miniparla/runtime.pyx":315
 *                         #print("Task Completed", flush=True)
 *                         self._notify_dependents(ctx.scheduler.inner_scheduler)
 *                     self._set_state(task_state, ctx)             # <<<<<<<<<<<<<<
 *                     self._finish(ctx)
 *         except Exception as e:
 */

#line 315 "miniparla/runtime.pyx"
                  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_set_state); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 315, __pyx_L13_error)

#line 315 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_4);

#line 315 "miniparla/runtime.pyx"
                  __pyx_t_8 = NULL;

#line 315 "miniparla/runtime.pyx"
                  __pyx_t_19 = 0;

#line 315 "miniparla/runtime.pyx"
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 315 "miniparla/runtime.pyx"
                    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);

#line 315 "miniparla/runtime.pyx"
                    if (likely(__pyx_t_8)) {

#line 315 "miniparla/runtime.pyx"
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 315 "miniparla/runtime.pyx"
                      __Pyx_INCREF(__pyx_t_8);

#line 315 "miniparla/runtime.pyx"
                      __Pyx_INCREF(function);

#line 315 "miniparla/runtime.pyx"
                      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 315 "miniparla/runtime.pyx"
                      __pyx_t_19 = 1;

#line 315 "miniparla/runtime.pyx"
                    }

#line 315 "miniparla/runtime.pyx"
                  }

#line 315 "miniparla/runtime.pyx"
                  #if CYTHON_FAST_PYCALL

#line 315 "miniparla/runtime.pyx"
                  if (PyFunction_Check(__pyx_t_4)) {

#line 315 "miniparla/runtime.pyx"
                    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_task_state, __pyx_v_ctx};

#line 315 "miniparla/runtime.pyx"
                    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_19, 2+__pyx_t_19); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 315, __pyx_L13_error)

#line 315 "miniparla/runtime.pyx"
                    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 315 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_7);

#line 315 "miniparla/runtime.pyx"
                  } else

#line 315 "miniparla/runtime.pyx"
                  #endif

#line 315 "miniparla/runtime.pyx"
                  #if CYTHON_FAST_PYCCALL

#line 315 "miniparla/runtime.pyx"
                  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {

#line 315 "miniparla/runtime.pyx"
                    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_task_state, __pyx_v_ctx};

#line 315 "miniparla/runtime.pyx"
                    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_19, 2+__pyx_t_19); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 315, __pyx_L13_error)

#line 315 "miniparla/runtime.pyx"
                    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 315 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_7);

#line 315 "miniparla/runtime.pyx"
                  } else

#line 315 "miniparla/runtime.pyx"
                  #endif

#line 315 "miniparla/runtime.pyx"
                  {

#line 315 "miniparla/runtime.pyx"
                    __pyx_t_6 = PyTuple_New(2+__pyx_t_19); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 315, __pyx_L13_error)

#line 315 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_6);

#line 315 "miniparla/runtime.pyx"
                    if (__pyx_t_8) {

#line 315 "miniparla/runtime.pyx"
                      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 315 "miniparla/runtime.pyx"
                    }

#line 315 "miniparla/runtime.pyx"
                    __Pyx_INCREF(__pyx_v_task_state);

#line 315 "miniparla/runtime.pyx"
                    __Pyx_GIVEREF(__pyx_v_task_state);

#line 315 "miniparla/runtime.pyx"
                    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_19, __pyx_v_task_state);

#line 315 "miniparla/runtime.pyx"
                    __Pyx_INCREF(__pyx_v_ctx);

#line 315 "miniparla/runtime.pyx"
                    __Pyx_GIVEREF(__pyx_v_ctx);

#line 315 "miniparla/runtime.pyx"
                    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_19, __pyx_v_ctx);

#line 315 "miniparla/runtime.pyx"
                    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 315, __pyx_L13_error)

#line 315 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_7);

#line 315 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 315 "miniparla/runtime.pyx"
                  }

#line 315 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 315 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                  /* "miniparla/runtime.pyx":316
 *                         self._notify_dependents(ctx.scheduler.inner_scheduler)
 *                     self._set_state(task_state, ctx)
 *                     self._finish(ctx)             # <<<<<<<<<<<<<<
 *         except Exception as e:
 *             raise e
 */

#line 316 "miniparla/runtime.pyx"
                  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_finish); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 316, __pyx_L13_error)

#line 316 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_4);

#line 316 "miniparla/runtime.pyx"
                  __pyx_t_6 = NULL;

#line 316 "miniparla/runtime.pyx"
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 316 "miniparla/runtime.pyx"
                    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);

#line 316 "miniparla/runtime.pyx"
                    if (likely(__pyx_t_6)) {

#line 316 "miniparla/runtime.pyx"
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 316 "miniparla/runtime.pyx"
                      __Pyx_INCREF(__pyx_t_6);

#line 316 "miniparla/runtime.pyx"
                      __Pyx_INCREF(function);

#line 316 "miniparla/runtime.pyx"
                      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 316 "miniparla/runtime.pyx"
                    }

#line 316 "miniparla/runtime.pyx"
                  }

#line 316 "miniparla/runtime.pyx"
                  __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_v_ctx) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_ctx);

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 316 "miniparla/runtime.pyx"
                  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 316, __pyx_L13_error)

#line 316 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_7);

#line 316 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 316 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 316 "miniparla/runtime.pyx"
                  goto __pyx_L21;

#line 316 "miniparla/runtime.pyx"
                }

#line 316 "miniparla/runtime.pyx"
                __pyx_L20_error:;

#line 316 "miniparla/runtime.pyx"
                /*exception exit:*/{

#line 316 "miniparla/runtime.pyx"
                  __Pyx_PyThreadState_declare

#line 316 "miniparla/runtime.pyx"
                  __Pyx_PyThreadState_assign

#line 316 "miniparla/runtime.pyx"
                  __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_26 = 0; __pyx_t_25 = 0; __pyx_t_24 = 0;

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 316 "miniparla/runtime.pyx"
                  if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_26, &__pyx_t_25, &__pyx_t_24);

#line 316 "miniparla/runtime.pyx"
                  if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XGOTREF(__pyx_t_14);

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XGOTREF(__pyx_t_13);

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XGOTREF(__pyx_t_12);

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XGOTREF(__pyx_t_26);

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XGOTREF(__pyx_t_25);

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XGOTREF(__pyx_t_24);

#line 316 "miniparla/runtime.pyx"
                  __pyx_t_19 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_28 = __pyx_filename;

#line 316 "miniparla/runtime.pyx"
                  {

                    /* "miniparla/runtime.pyx":310
 *                     print(e)
 *                 finally:
 *                     ctx = get_scheduler_context()             # <<<<<<<<<<<<<<
 *                     #print("Task Body Finished", flush=True)
 *                     if isinstance(task_state, TaskCompleted):
 */

#line 310 "miniparla/runtime.pyx"
                    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_get_scheduler_context); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 310, __pyx_L43_error)

#line 310 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_4);

#line 310 "miniparla/runtime.pyx"
                    __pyx_t_6 = NULL;

#line 310 "miniparla/runtime.pyx"
                    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 310 "miniparla/runtime.pyx"
                      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);

#line 310 "miniparla/runtime.pyx"
                      if (likely(__pyx_t_6)) {

#line 310 "miniparla/runtime.pyx"
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 310 "miniparla/runtime.pyx"
                        __Pyx_INCREF(__pyx_t_6);

#line 310 "miniparla/runtime.pyx"
                        __Pyx_INCREF(function);

#line 310 "miniparla/runtime.pyx"
                        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 310 "miniparla/runtime.pyx"
                      }

#line 310 "miniparla/runtime.pyx"
                    }

#line 310 "miniparla/runtime.pyx"
                    __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 310 "miniparla/runtime.pyx"
                    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 310 "miniparla/runtime.pyx"
                    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 310, __pyx_L43_error)

#line 310 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_7);

#line 310 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 310 "miniparla/runtime.pyx"
                    __pyx_v_ctx = __pyx_t_7;

#line 310 "miniparla/runtime.pyx"
                    __pyx_t_7 = 0;

                    /* "miniparla/runtime.pyx":312
 *                     ctx = get_scheduler_context()
 *                     #print("Task Body Finished", flush=True)
 *                     if isinstance(task_state, TaskCompleted):             # <<<<<<<<<<<<<<
 *                         #print("Task Completed", flush=True)
 *                         self._notify_dependents(ctx.scheduler.inner_scheduler)
 */

#line 312 "miniparla/runtime.pyx"
                    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_TaskCompleted); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 312, __pyx_L43_error)

#line 312 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_7);

#line 312 "miniparla/runtime.pyx"
                    __pyx_t_27 = PyObject_IsInstance(__pyx_v_task_state, __pyx_t_7); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 312, __pyx_L43_error)

#line 312 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 312 "miniparla/runtime.pyx"
                    __pyx_t_15 = (__pyx_t_27 != 0);

#line 312 "miniparla/runtime.pyx"
                    if (__pyx_t_15) {

                      /* "miniparla/runtime.pyx":314
 *                     if isinstance(task_state, TaskCompleted):
 *                         #print("Task Completed", flush=True)
 *                         self._notify_dependents(ctx.scheduler.inner_scheduler)             # <<<<<<<<<<<<<<
 *                     self._set_state(task_state, ctx)
 *                     self._finish(ctx)
 */

#line 314 "miniparla/runtime.pyx"
                      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_notify_dependents_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 314, __pyx_L43_error)

#line 314 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_4);

#line 314 "miniparla/runtime.pyx"
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_ctx, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 314, __pyx_L43_error)

#line 314 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_6);

#line 314 "miniparla/runtime.pyx"
                      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 314, __pyx_L43_error)

#line 314 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_8);

#line 314 "miniparla/runtime.pyx"
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 314 "miniparla/runtime.pyx"
                      __pyx_t_6 = NULL;

#line 314 "miniparla/runtime.pyx"
                      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 314 "miniparla/runtime.pyx"
                        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);

#line 314 "miniparla/runtime.pyx"
                        if (likely(__pyx_t_6)) {

#line 314 "miniparla/runtime.pyx"
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 314 "miniparla/runtime.pyx"
                          __Pyx_INCREF(__pyx_t_6);

#line 314 "miniparla/runtime.pyx"
                          __Pyx_INCREF(function);

#line 314 "miniparla/runtime.pyx"
                          __Pyx_DECREF_SET(__pyx_t_4, function);

#line 314 "miniparla/runtime.pyx"
                        }

#line 314 "miniparla/runtime.pyx"
                      }

#line 314 "miniparla/runtime.pyx"
                      __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);

#line 314 "miniparla/runtime.pyx"
                      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 314 "miniparla/runtime.pyx"
                      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 314 "miniparla/runtime.pyx"
                      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L43_error)

#line 314 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_7);

#line 314 "miniparla/runtime.pyx"
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 314 "miniparla/runtime.pyx"
                      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                      /* "miniparla/runtime.pyx":312
 *                     ctx = get_scheduler_context()
 *                     #print("Task Body Finished", flush=True)
 *                     if isinstance(task_state, TaskCompleted):             # <<<<<<<<<<<<<<
 *                         #print("Task Completed", flush=True)
 *                         self._notify_dependents(ctx.scheduler.inner_scheduler)
 */

#line 312 "miniparla/runtime.pyx"
                    }

                    /* "miniparla/runtime.pyx":315
 *                         #print("Task Completed", flush=True)
 *                         self._notify_dependents(ctx.scheduler.inner_scheduler)
 *                     self._set_state(task_state, ctx)             # <<<<<<<<<<<<<<
 *                     self._finish(ctx)
 *         except Exception as e:
 */

#line 315 "miniparla/runtime.pyx"
                    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_set_state); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 315, __pyx_L43_error)

#line 315 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_4);

#line 315 "miniparla/runtime.pyx"
                    __pyx_t_8 = NULL;

#line 315 "miniparla/runtime.pyx"
                    __pyx_t_29 = 0;

#line 315 "miniparla/runtime.pyx"
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 315 "miniparla/runtime.pyx"
                      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);

#line 315 "miniparla/runtime.pyx"
                      if (likely(__pyx_t_8)) {

#line 315 "miniparla/runtime.pyx"
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 315 "miniparla/runtime.pyx"
                        __Pyx_INCREF(__pyx_t_8);

#line 315 "miniparla/runtime.pyx"
                        __Pyx_INCREF(function);

#line 315 "miniparla/runtime.pyx"
                        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 315 "miniparla/runtime.pyx"
                        __pyx_t_29 = 1;

#line 315 "miniparla/runtime.pyx"
                      }

#line 315 "miniparla/runtime.pyx"
                    }

#line 315 "miniparla/runtime.pyx"
                    #if CYTHON_FAST_PYCALL

#line 315 "miniparla/runtime.pyx"
                    if (PyFunction_Check(__pyx_t_4)) {

#line 315 "miniparla/runtime.pyx"
                      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_task_state, __pyx_v_ctx};

#line 315 "miniparla/runtime.pyx"
                      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_29, 2+__pyx_t_29); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 315, __pyx_L43_error)

#line 315 "miniparla/runtime.pyx"
                      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 315 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_7);

#line 315 "miniparla/runtime.pyx"
                    } else

#line 315 "miniparla/runtime.pyx"
                    #endif

#line 315 "miniparla/runtime.pyx"
                    #if CYTHON_FAST_PYCCALL

#line 315 "miniparla/runtime.pyx"
                    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {

#line 315 "miniparla/runtime.pyx"
                      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_task_state, __pyx_v_ctx};

#line 315 "miniparla/runtime.pyx"
                      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_29, 2+__pyx_t_29); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 315, __pyx_L43_error)

#line 315 "miniparla/runtime.pyx"
                      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 315 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_7);

#line 315 "miniparla/runtime.pyx"
                    } else

#line 315 "miniparla/runtime.pyx"
                    #endif

#line 315 "miniparla/runtime.pyx"
                    {

#line 315 "miniparla/runtime.pyx"
                      __pyx_t_6 = PyTuple_New(2+__pyx_t_29); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 315, __pyx_L43_error)

#line 315 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_6);

#line 315 "miniparla/runtime.pyx"
                      if (__pyx_t_8) {

#line 315 "miniparla/runtime.pyx"
                        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 315 "miniparla/runtime.pyx"
                      }

#line 315 "miniparla/runtime.pyx"
                      __Pyx_INCREF(__pyx_v_task_state);

#line 315 "miniparla/runtime.pyx"
                      __Pyx_GIVEREF(__pyx_v_task_state);

#line 315 "miniparla/runtime.pyx"
                      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_29, __pyx_v_task_state);

#line 315 "miniparla/runtime.pyx"
                      __Pyx_INCREF(__pyx_v_ctx);

#line 315 "miniparla/runtime.pyx"
                      __Pyx_GIVEREF(__pyx_v_ctx);

#line 315 "miniparla/runtime.pyx"
                      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_29, __pyx_v_ctx);

#line 315 "miniparla/runtime.pyx"
                      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 315, __pyx_L43_error)

#line 315 "miniparla/runtime.pyx"
                      __Pyx_GOTREF(__pyx_t_7);

#line 315 "miniparla/runtime.pyx"
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 315 "miniparla/runtime.pyx"
                    }

#line 315 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 315 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                    /* "miniparla/runtime.pyx":316
 *                         self._notify_dependents(ctx.scheduler.inner_scheduler)
 *                     self._set_state(task_state, ctx)
 *                     self._finish(ctx)             # <<<<<<<<<<<<<<
 *         except Exception as e:
 *             raise e
 */

#line 316 "miniparla/runtime.pyx"
                    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_finish); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 316, __pyx_L43_error)

#line 316 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_4);

#line 316 "miniparla/runtime.pyx"
                    __pyx_t_6 = NULL;

#line 316 "miniparla/runtime.pyx"
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 316 "miniparla/runtime.pyx"
                      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);

#line 316 "miniparla/runtime.pyx"
                      if (likely(__pyx_t_6)) {

#line 316 "miniparla/runtime.pyx"
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 316 "miniparla/runtime.pyx"
                        __Pyx_INCREF(__pyx_t_6);

#line 316 "miniparla/runtime.pyx"
                        __Pyx_INCREF(function);

#line 316 "miniparla/runtime.pyx"
                        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 316 "miniparla/runtime.pyx"
                      }

#line 316 "miniparla/runtime.pyx"
                    }

#line 316 "miniparla/runtime.pyx"
                    __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_v_ctx) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_ctx);

#line 316 "miniparla/runtime.pyx"
                    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 316 "miniparla/runtime.pyx"
                    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 316, __pyx_L43_error)

#line 316 "miniparla/runtime.pyx"
                    __Pyx_GOTREF(__pyx_t_7);

#line 316 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 316 "miniparla/runtime.pyx"
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 316 "miniparla/runtime.pyx"
                  }

#line 316 "miniparla/runtime.pyx"
                  if (PY_MAJOR_VERSION >= 3) {

#line 316 "miniparla/runtime.pyx"
                    __Pyx_XGIVEREF(__pyx_t_26);

#line 316 "miniparla/runtime.pyx"
                    __Pyx_XGIVEREF(__pyx_t_25);

#line 316 "miniparla/runtime.pyx"
                    __Pyx_XGIVEREF(__pyx_t_24);

#line 316 "miniparla/runtime.pyx"
                    __Pyx_ExceptionReset(__pyx_t_26, __pyx_t_25, __pyx_t_24);

#line 316 "miniparla/runtime.pyx"
                  }

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XGIVEREF(__pyx_t_14);

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XGIVEREF(__pyx_t_13);

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XGIVEREF(__pyx_t_12);

#line 316 "miniparla/runtime.pyx"
                  __Pyx_ErrRestore(__pyx_t_14, __pyx_t_13, __pyx_t_12);

#line 316 "miniparla/runtime.pyx"
                  __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_26 = 0; __pyx_t_25 = 0; __pyx_t_24 = 0;

#line 316 "miniparla/runtime.pyx"
                  __pyx_lineno = __pyx_t_19; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_28;

#line 316 "miniparla/runtime.pyx"
                  goto __pyx_L13_error;

#line 316 "miniparla/runtime.pyx"
                  __pyx_L43_error:;

#line 316 "miniparla/runtime.pyx"
                  if (PY_MAJOR_VERSION >= 3) {

#line 316 "miniparla/runtime.pyx"
                    __Pyx_XGIVEREF(__pyx_t_26);

#line 316 "miniparla/runtime.pyx"
                    __Pyx_XGIVEREF(__pyx_t_25);

#line 316 "miniparla/runtime.pyx"
                    __Pyx_XGIVEREF(__pyx_t_24);

#line 316 "miniparla/runtime.pyx"
                    __Pyx_ExceptionReset(__pyx_t_26, __pyx_t_25, __pyx_t_24);

#line 316 "miniparla/runtime.pyx"
                  }

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 316 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 316 "miniparla/runtime.pyx"
                  __pyx_t_26 = 0; __pyx_t_25 = 0; __pyx_t_24 = 0;

#line 316 "miniparla/runtime.pyx"
                  goto __pyx_L13_error;

#line 316 "miniparla/runtime.pyx"
                }

#line 316 "miniparla/runtime.pyx"
                __pyx_L21:;

#line 316 "miniparla/runtime.pyx"
              }

              /* "miniparla/runtime.pyx":299
 * 
 *         try:
 *             with self._mutex:             # <<<<<<<<<<<<<<
 *                 task_state = TaskException(RuntimeError("Unknown Error"))
 * 
 */

#line 299 "miniparla/runtime.pyx"
            }

#line 299 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 299 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 299 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 299 "miniparla/runtime.pyx"
            goto __pyx_L18_try_end;

#line 299 "miniparla/runtime.pyx"
            __pyx_L13_error:;

#line 299 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;

#line 299 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;

#line 299 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 299 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 299 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 299 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 299 "miniparla/runtime.pyx"
            /*except:*/ {

#line 299 "miniparla/runtime.pyx"
              __Pyx_AddTraceback("miniparla.runtime.Task.run", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 299 "miniparla/runtime.pyx"
              if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_4, &__pyx_t_6) < 0) __PYX_ERR(0, 299, __pyx_L15_except_error)

#line 299 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_7);

#line 299 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_4);

#line 299 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_6);

#line 299 "miniparla/runtime.pyx"
              __pyx_t_8 = PyTuple_Pack(3, __pyx_t_7, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 299, __pyx_L15_except_error)

#line 299 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_8);

#line 299 "miniparla/runtime.pyx"
              __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL);

#line 299 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 299 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 299 "miniparla/runtime.pyx"
              if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 299, __pyx_L15_except_error)

#line 299 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_24);

#line 299 "miniparla/runtime.pyx"
              __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_24);

#line 299 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

#line 299 "miniparla/runtime.pyx"
              if (__pyx_t_15 < 0) __PYX_ERR(0, 299, __pyx_L15_except_error)

#line 299 "miniparla/runtime.pyx"
              __pyx_t_27 = ((!(__pyx_t_15 != 0)) != 0);

#line 299 "miniparla/runtime.pyx"
              if (__pyx_t_27) {

#line 299 "miniparla/runtime.pyx"
                __Pyx_GIVEREF(__pyx_t_7);

#line 299 "miniparla/runtime.pyx"
                __Pyx_GIVEREF(__pyx_t_4);

#line 299 "miniparla/runtime.pyx"
                __Pyx_XGIVEREF(__pyx_t_6);

#line 299 "miniparla/runtime.pyx"
                __Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_4, __pyx_t_6);
                __pyx_t_7 = 0; __pyx_t_4 = 0; __pyx_t_6 = 0; 
#line 299 "miniparla/runtime.pyx"


#line 299 "miniparla/runtime.pyx"
                __PYX_ERR(0, 299, __pyx_L15_except_error)

#line 299 "miniparla/runtime.pyx"
              }

#line 299 "miniparla/runtime.pyx"
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 299 "miniparla/runtime.pyx"
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 299 "miniparla/runtime.pyx"
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 299 "miniparla/runtime.pyx"
              goto __pyx_L14_exception_handled;

#line 299 "miniparla/runtime.pyx"
            }

#line 299 "miniparla/runtime.pyx"
            __pyx_L15_except_error:;

#line 299 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_9);

#line 299 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_10);

#line 299 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_11);

#line 299 "miniparla/runtime.pyx"
            __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);

#line 299 "miniparla/runtime.pyx"
            goto __pyx_L3_error;

#line 299 "miniparla/runtime.pyx"
            __pyx_L14_exception_handled:;

#line 299 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_9);

#line 299 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_10);

#line 299 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_11);

#line 299 "miniparla/runtime.pyx"
            __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);

#line 299 "miniparla/runtime.pyx"
            __pyx_L18_try_end:;

#line 299 "miniparla/runtime.pyx"
          }

#line 299 "miniparla/runtime.pyx"
        }

#line 299 "miniparla/runtime.pyx"
        /*finally:*/ {

#line 299 "miniparla/runtime.pyx"
          /*normal exit:*/{

#line 299 "miniparla/runtime.pyx"
            if (__pyx_t_5) {

#line 299 "miniparla/runtime.pyx"
              __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__6, NULL);

#line 299 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 299 "miniparla/runtime.pyx"
              if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 299, __pyx_L3_error)

#line 299 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_11);

#line 299 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 299 "miniparla/runtime.pyx"
            }

#line 299 "miniparla/runtime.pyx"
            goto __pyx_L12;

#line 299 "miniparla/runtime.pyx"
          }

#line 299 "miniparla/runtime.pyx"
          __pyx_L12:;

#line 299 "miniparla/runtime.pyx"
        }

#line 299 "miniparla/runtime.pyx"
        goto __pyx_L48;

#line 299 "miniparla/runtime.pyx"
        __pyx_L9_error:;

#line 299 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 299 "miniparla/runtime.pyx"
        goto __pyx_L3_error;

#line 299 "miniparla/runtime.pyx"
        __pyx_L48:;

#line 299 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":298
 * 
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             with self._mutex:
 *                 task_state = TaskException(RuntimeError("Unknown Error"))
 */

#line 298 "miniparla/runtime.pyx"
    }

#line 298 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 298 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 298 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 298 "miniparla/runtime.pyx"
    goto __pyx_L8_try_end;

#line 298 "miniparla/runtime.pyx"
    __pyx_L3_error:;

#line 298 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;

#line 298 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;

#line 298 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 298 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 298 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 298 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "miniparla/runtime.pyx":317
 *                     self._set_state(task_state, ctx)
 *                     self._finish(ctx)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             raise e
 * 
 */

#line 317 "miniparla/runtime.pyx"
    __pyx_t_16 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 317 "miniparla/runtime.pyx"
    if (__pyx_t_16) {

#line 317 "miniparla/runtime.pyx"
      __Pyx_AddTraceback("miniparla.runtime.Task.run", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 317 "miniparla/runtime.pyx"
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_4, &__pyx_t_7) < 0) __PYX_ERR(0, 317, __pyx_L5_except_error)

#line 317 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 317 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 317 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 317 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 317 "miniparla/runtime.pyx"
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_4);

#line 317 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":318
 *                     self._finish(ctx)
 *         except Exception as e:
 *             raise e             # <<<<<<<<<<<<<<
 * 
 *     def _cleanup(self):
 */

#line 318 "miniparla/runtime.pyx"
        __Pyx_Raise(__pyx_v_e, 0, 0, 0);

#line 318 "miniparla/runtime.pyx"
        __PYX_ERR(0, 318, __pyx_L54_error)

#line 318 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":317
 *                     self._set_state(task_state, ctx)
 *                     self._finish(ctx)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             raise e
 * 
 */

#line 317 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 317 "miniparla/runtime.pyx"
        __pyx_L54_error:;

#line 317 "miniparla/runtime.pyx"
        /*exception exit:*/{

#line 317 "miniparla/runtime.pyx"
          __Pyx_PyThreadState_declare

#line 317 "miniparla/runtime.pyx"
          __Pyx_PyThreadState_assign

#line 317 "miniparla/runtime.pyx"
          __pyx_t_5 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;

#line 317 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;

#line 317 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;

#line 317 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 317 "miniparla/runtime.pyx"
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_24, &__pyx_t_25);

#line 317 "miniparla/runtime.pyx"
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_5, &__pyx_t_11, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_5, &__pyx_t_11, &__pyx_t_10);

#line 317 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_5);

#line 317 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_11);

#line 317 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_10);

#line 317 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_9);

#line 317 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_24);

#line 317 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_25);

#line 317 "miniparla/runtime.pyx"
          __pyx_t_16 = __pyx_lineno; __pyx_t_19 = __pyx_clineno; __pyx_t_30 = __pyx_filename;

#line 317 "miniparla/runtime.pyx"
          {

#line 317 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_v_e);

#line 317 "miniparla/runtime.pyx"
            __pyx_v_e = NULL;

#line 317 "miniparla/runtime.pyx"
          }

#line 317 "miniparla/runtime.pyx"
          if (PY_MAJOR_VERSION >= 3) {

#line 317 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_9);

#line 317 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_24);

#line 317 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_25);

#line 317 "miniparla/runtime.pyx"
            __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_24, __pyx_t_25);

#line 317 "miniparla/runtime.pyx"
          }

#line 317 "miniparla/runtime.pyx"
          __Pyx_XGIVEREF(__pyx_t_5);

#line 317 "miniparla/runtime.pyx"
          __Pyx_XGIVEREF(__pyx_t_11);

#line 317 "miniparla/runtime.pyx"
          __Pyx_XGIVEREF(__pyx_t_10);

#line 317 "miniparla/runtime.pyx"
          __Pyx_ErrRestore(__pyx_t_5, __pyx_t_11, __pyx_t_10);

#line 317 "miniparla/runtime.pyx"
          __pyx_t_5 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;

#line 317 "miniparla/runtime.pyx"
          __pyx_lineno = __pyx_t_16; __pyx_clineno = __pyx_t_19; __pyx_filename = __pyx_t_30;

#line 317 "miniparla/runtime.pyx"
          goto __pyx_L5_except_error;

#line 317 "miniparla/runtime.pyx"
        }

#line 317 "miniparla/runtime.pyx"
      }

#line 317 "miniparla/runtime.pyx"
    }

#line 317 "miniparla/runtime.pyx"
    goto __pyx_L5_except_error;

#line 317 "miniparla/runtime.pyx"
    __pyx_L5_except_error:;

    /* "miniparla/runtime.pyx":298
 * 
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             with self._mutex:
 *                 task_state = TaskException(RuntimeError("Unknown Error"))
 */

#line 298 "miniparla/runtime.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 298 "miniparla/runtime.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 298 "miniparla/runtime.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 298 "miniparla/runtime.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 298 "miniparla/runtime.pyx"
    goto __pyx_L1_error;

#line 298 "miniparla/runtime.pyx"
    __pyx_L8_try_end:;

#line 298 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":294
 *         pass
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         #print("Running task", self._name, self.id, flush=True)
 * 
 */

#line 294 "miniparla/runtime.pyx"


#line 294 "miniparla/runtime.pyx"
  /* function exit code */

#line 294 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 294 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 294 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 294 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 294 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 294 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 294 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 294 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_17);

#line 294 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_18);

#line 294 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task.run", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 294 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 294 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 294 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_task_state);

#line 294 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_e);

#line 294 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_ctx);

#line 294 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 294 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 294 "miniparla/runtime.pyx"
  return __pyx_r;

#line 294 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":320
 *             raise e
 * 
 *     def _cleanup(self):             # <<<<<<<<<<<<<<
 *         self._func = None
 *         self._args = None
 */

#line 320 "miniparla/runtime.pyx"


#line 320 "miniparla/runtime.pyx"
/* Python wrapper */

#line 320 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_13_cleanup(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_13_cleanup = 
#line 320 "miniparla/runtime.pyx"
{"_cleanup", (PyCFunction)__pyx_pw_9miniparla_7runtime_4Task_13_cleanup, METH_O, 0};

#line 320 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_13_cleanup(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 320 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 320 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 320 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_cleanup (wrapper)", 0);
  __pyx_r = 
#line 320 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_12_cleanup(__pyx_self, ((PyObject *)__pyx_v_self));

#line 320 "miniparla/runtime.pyx"


#line 320 "miniparla/runtime.pyx"
  /* function exit code */

#line 320 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 320 "miniparla/runtime.pyx"
  return __pyx_r;

#line 320 "miniparla/runtime.pyx"
}

#line 320 "miniparla/runtime.pyx"


#line 320 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_12_cleanup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 320 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 320 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 320 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 320 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 320 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 320 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_cleanup", 0);

  /* "miniparla/runtime.pyx":321
 * 
 *     def _cleanup(self):
 *         self._func = None             # <<<<<<<<<<<<<<
 *         self._args = None
 * 
 */

#line 321 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_func_2, Py_None) < 0) __PYX_ERR(0, 321, __pyx_L1_error)

  /* "miniparla/runtime.pyx":322
 *     def _cleanup(self):
 *         self._func = None
 *         self._args = None             # <<<<<<<<<<<<<<
 * 
 *     #@profile
 */

#line 322 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_args_2, Py_None) < 0) __PYX_ERR(0, 322, __pyx_L1_error)

  /* "miniparla/runtime.pyx":320
 *             raise e
 * 
 *     def _cleanup(self):             # <<<<<<<<<<<<<<
 *         self._func = None
 *         self._args = None
 */

#line 320 "miniparla/runtime.pyx"


#line 320 "miniparla/runtime.pyx"
  /* function exit code */

#line 320 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 320 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 320 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 320 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task._cleanup", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 320 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 320 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 320 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 320 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 320 "miniparla/runtime.pyx"
  return __pyx_r;

#line 320 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":325
 * 
 *     #@profile
 *     def _set_state(self, new_state, ctx):             # <<<<<<<<<<<<<<
 *         #print("Setting state", new_state, flush=True)
 *         self._state = new_state
 */

#line 325 "miniparla/runtime.pyx"


#line 325 "miniparla/runtime.pyx"
/* Python wrapper */

#line 325 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_15_set_state(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_15_set_state = 
#line 325 "miniparla/runtime.pyx"
{"_set_state", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_4Task_15_set_state, METH_VARARGS|METH_KEYWORDS, 0};

#line 325 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_15_set_state(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 325 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_new_state = 0
#line 325 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_ctx = 0
#line 325 "miniparla/runtime.pyx"
;

#line 325 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 325 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 325 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 325 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 325 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 325 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_set_state (wrapper)", 0);

#line 325 "miniparla/runtime.pyx"
  {

#line 325 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_new_state,&__pyx_n_s_ctx,0};

#line 325 "miniparla/runtime.pyx"
    PyObject* values[3] = {0,0,0};

#line 325 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 325 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 325 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 325 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  3: 
#line 325 "miniparla/runtime.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 325 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 325 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 325 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 325 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 325 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 325 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 325 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 325 "miniparla/runtime.pyx"
      }

#line 325 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 325 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 325 "miniparla/runtime.pyx"
        case  0:

#line 325 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 325 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 325 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 325 "miniparla/runtime.pyx"
        case  1:

#line 325 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_state)) != 0)) kw_args--;

#line 325 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_set_state", 1, 3, 3, 1); 
#line 325 "miniparla/runtime.pyx"
__PYX_ERR(0, 325, __pyx_L3_error)

#line 325 "miniparla/runtime.pyx"
        }

#line 325 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 325 "miniparla/runtime.pyx"
        case  2:

#line 325 "miniparla/runtime.pyx"
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ctx)) != 0)) kw_args--;

#line 325 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_set_state", 1, 3, 3, 2); 
#line 325 "miniparla/runtime.pyx"
__PYX_ERR(0, 325, __pyx_L3_error)

#line 325 "miniparla/runtime.pyx"
        }

#line 325 "miniparla/runtime.pyx"
      }

#line 325 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 325 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_set_state") < 0)) __PYX_ERR(0, 325, __pyx_L3_error)

#line 325 "miniparla/runtime.pyx"
      }

#line 325 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 325 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 325 "miniparla/runtime.pyx"
    } else {

#line 325 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 325 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 325 "miniparla/runtime.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 325 "miniparla/runtime.pyx"
    }

#line 325 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 325 "miniparla/runtime.pyx"
    __pyx_v_new_state = values[1];

#line 325 "miniparla/runtime.pyx"
    __pyx_v_ctx = values[2];

#line 325 "miniparla/runtime.pyx"
  }

#line 325 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 325 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_set_state", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 325 "miniparla/runtime.pyx"
__PYX_ERR(0, 325, __pyx_L3_error)

#line 325 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 325 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task._set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 325 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 325 "miniparla/runtime.pyx"
  return NULL;

#line 325 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 325 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_14_set_state(__pyx_self, __pyx_v_self, __pyx_v_new_state, __pyx_v_ctx);

#line 325 "miniparla/runtime.pyx"


#line 325 "miniparla/runtime.pyx"
  /* function exit code */

#line 325 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 325 "miniparla/runtime.pyx"
  return __pyx_r;

#line 325 "miniparla/runtime.pyx"
}

#line 325 "miniparla/runtime.pyx"


#line 325 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_14_set_state(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_new_state, PyObject *__pyx_v_ctx) {

#line 325 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 325 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 325 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 325 "miniparla/runtime.pyx"
  int __pyx_t_2;

#line 325 "miniparla/runtime.pyx"
  int __pyx_t_3;

#line 325 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 325 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 325 "miniparla/runtime.pyx"
  Py_ssize_t __pyx_t_6;

#line 325 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 325 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 325 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 325 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 325 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_set_state", 0);

  /* "miniparla/runtime.pyx":327
 *     def _set_state(self, new_state, ctx):
 *         #print("Setting state", new_state, flush=True)
 *         self._state = new_state             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(new_state, TaskException):
 */

#line 327 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_state, __pyx_v_new_state) < 0) __PYX_ERR(0, 327, __pyx_L1_error)

  /* "miniparla/runtime.pyx":329
 *         self._state = new_state
 * 
 *         if isinstance(new_state, TaskException):             # <<<<<<<<<<<<<<
 *             print(TaskException.exc)
 *             ctx.scheduler.stop()
 */

#line 329 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TaskException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)

#line 329 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 329 "miniparla/runtime.pyx"
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_new_state, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 329, __pyx_L1_error)

#line 329 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 329 "miniparla/runtime.pyx"
  __pyx_t_3 = (__pyx_t_2 != 0);

#line 329 "miniparla/runtime.pyx"
  if (__pyx_t_3) {

    /* "miniparla/runtime.pyx":330
 * 
 *         if isinstance(new_state, TaskException):
 *             print(TaskException.exc)             # <<<<<<<<<<<<<<
 *             ctx.scheduler.stop()
 * 
 */

#line 330 "miniparla/runtime.pyx"
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TaskException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)

#line 330 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 330 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exc); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 330, __pyx_L1_error)

#line 330 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 330 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 330 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)

#line 330 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 330 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 330 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "miniparla/runtime.pyx":331
 *         if isinstance(new_state, TaskException):
 *             print(TaskException.exc)
 *             ctx.scheduler.stop()             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(new_state, TaskRunning):
 */

#line 331 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ctx, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 331, __pyx_L1_error)

#line 331 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 331 "miniparla/runtime.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_stop); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 331, __pyx_L1_error)

#line 331 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 331 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 331 "miniparla/runtime.pyx"
    __pyx_t_4 = NULL;

#line 331 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 331 "miniparla/runtime.pyx"
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);

#line 331 "miniparla/runtime.pyx"
      if (likely(__pyx_t_4)) {

#line 331 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 331 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_4);

#line 331 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 331 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 331 "miniparla/runtime.pyx"
      }

#line 331 "miniparla/runtime.pyx"
    }

#line 331 "miniparla/runtime.pyx"
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);

#line 331 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 331 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)

#line 331 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 331 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 331 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "miniparla/runtime.pyx":329
 *         self._state = new_state
 * 
 *         if isinstance(new_state, TaskException):             # <<<<<<<<<<<<<<
 *             print(TaskException.exc)
 *             ctx.scheduler.stop()
 */

#line 329 "miniparla/runtime.pyx"
    goto __pyx_L3;

#line 329 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":333
 *             ctx.scheduler.stop()
 * 
 *         elif isinstance(new_state, TaskRunning):             # <<<<<<<<<<<<<<
 *             #print("Spawning Continuation", flush=True)
 *             #if new_state.dependencies is not None:
 */

#line 333 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TaskRunning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)

#line 333 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 333 "miniparla/runtime.pyx"
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_new_state, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 333, __pyx_L1_error)

#line 333 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 333 "miniparla/runtime.pyx"
  __pyx_t_2 = (__pyx_t_3 != 0);

#line 333 "miniparla/runtime.pyx"
  if (__pyx_t_2) {

    /* "miniparla/runtime.pyx":341
 * 
 *             #self.inner_task.task.set_type_unsafe(1);
 *             print("Task Spawning Continuation", len(new_state.dependencies), flush=True)             # <<<<<<<<<<<<<<
 *             self.set_dependencies(new_state.dependencies)
 *             #print("Task Spawning Continuation Filtered Deps",
 */

#line 341 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_state, __pyx_n_s_dependencies_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)

#line 341 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 341 "miniparla/runtime.pyx"
    __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 341, __pyx_L1_error)

#line 341 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 341 "miniparla/runtime.pyx"
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)

#line 341 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 341 "miniparla/runtime.pyx"
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 341, __pyx_L1_error)

#line 341 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 341 "miniparla/runtime.pyx"
    __Pyx_INCREF(__pyx_kp_u_Task_Spawning_Continuation);

#line 341 "miniparla/runtime.pyx"
    __Pyx_GIVEREF(__pyx_kp_u_Task_Spawning_Continuation);

#line 341 "miniparla/runtime.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Task_Spawning_Continuation);

#line 341 "miniparla/runtime.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 341 "miniparla/runtime.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);

#line 341 "miniparla/runtime.pyx"
    __pyx_t_1 = 0;

#line 341 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)

#line 341 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 341 "miniparla/runtime.pyx"
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_flush, Py_True) < 0) __PYX_ERR(0, 341, __pyx_L1_error)

#line 341 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 341, __pyx_L1_error)

#line 341 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 341 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 341 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 341 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "miniparla/runtime.pyx":342
 *             #self.inner_task.task.set_type_unsafe(1);
 *             print("Task Spawning Continuation", len(new_state.dependencies), flush=True)
 *             self.set_dependencies(new_state.dependencies)             # <<<<<<<<<<<<<<
 *             #print("Task Spawning Continuation Filtered Deps",
 *             #        self.inner_task.task.get_num_deps(), flush=True)
 */

#line 342 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_set_dependencies); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)

#line 342 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 342 "miniparla/runtime.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_state, __pyx_n_s_dependencies_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 342, __pyx_L1_error)

#line 342 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 342 "miniparla/runtime.pyx"
    __pyx_t_7 = NULL;

#line 342 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 342 "miniparla/runtime.pyx"
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);

#line 342 "miniparla/runtime.pyx"
      if (likely(__pyx_t_7)) {

#line 342 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 342 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_7);

#line 342 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 342 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_1, function);

#line 342 "miniparla/runtime.pyx"
      }

#line 342 "miniparla/runtime.pyx"
    }

#line 342 "miniparla/runtime.pyx"
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);

#line 342 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 342 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 342 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 342, __pyx_L1_error)

#line 342 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 342 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 342 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "miniparla/runtime.pyx":346
 *             #        self.inner_task.task.get_num_deps(), flush=True)
 * 
 *             if not self.blocked_unsafe():             # <<<<<<<<<<<<<<
 *                 print("Task Queueing Cont.", flush=True)
 *                 ctx.scheduler.enqueue_task(self)
 */

#line 346 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_blocked_unsafe); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)

#line 346 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 346 "miniparla/runtime.pyx"
    __pyx_t_5 = NULL;

#line 346 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 346 "miniparla/runtime.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);

#line 346 "miniparla/runtime.pyx"
      if (likely(__pyx_t_5)) {

#line 346 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 346 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 346 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 346 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_1, function);

#line 346 "miniparla/runtime.pyx"
      }

#line 346 "miniparla/runtime.pyx"
    }

#line 346 "miniparla/runtime.pyx"
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);

#line 346 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 346 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 346, __pyx_L1_error)

#line 346 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 346 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 346 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 346, __pyx_L1_error)

#line 346 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 346 "miniparla/runtime.pyx"
    __pyx_t_3 = ((!__pyx_t_2) != 0);

#line 346 "miniparla/runtime.pyx"
    if (__pyx_t_3) {

      /* "miniparla/runtime.pyx":347
 * 
 *             if not self.blocked_unsafe():
 *                 print("Task Queueing Cont.", flush=True)             # <<<<<<<<<<<<<<
 *                 ctx.scheduler.enqueue_task(self)
 *             new_state.dependencies.clear()
 */

#line 347 "miniparla/runtime.pyx"
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L1_error)

#line 347 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 347 "miniparla/runtime.pyx"
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_flush, Py_True) < 0) __PYX_ERR(0, 347, __pyx_L1_error)

#line 347 "miniparla/runtime.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__8, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)

#line 347 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 347 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 347 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "miniparla/runtime.pyx":348
 *             if not self.blocked_unsafe():
 *                 print("Task Queueing Cont.", flush=True)
 *                 ctx.scheduler.enqueue_task(self)             # <<<<<<<<<<<<<<
 *             new_state.dependencies.clear()
 * 
 */

#line 348 "miniparla/runtime.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ctx, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 348, __pyx_L1_error)

#line 348 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 348 "miniparla/runtime.pyx"
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_enqueue_task); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 348, __pyx_L1_error)

#line 348 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 348 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 348 "miniparla/runtime.pyx"
      __pyx_t_4 = NULL;

#line 348 "miniparla/runtime.pyx"
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 348 "miniparla/runtime.pyx"
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);

#line 348 "miniparla/runtime.pyx"
        if (likely(__pyx_t_4)) {

#line 348 "miniparla/runtime.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 348 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_t_4);

#line 348 "miniparla/runtime.pyx"
          __Pyx_INCREF(function);

#line 348 "miniparla/runtime.pyx"
          __Pyx_DECREF_SET(__pyx_t_5, function);

#line 348 "miniparla/runtime.pyx"
        }

#line 348 "miniparla/runtime.pyx"
      }

#line 348 "miniparla/runtime.pyx"
      __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_v_self) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_self);

#line 348 "miniparla/runtime.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 348 "miniparla/runtime.pyx"
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)

#line 348 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 348 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 348 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "miniparla/runtime.pyx":346
 *             #        self.inner_task.task.get_num_deps(), flush=True)
 * 
 *             if not self.blocked_unsafe():             # <<<<<<<<<<<<<<
 *                 print("Task Queueing Cont.", flush=True)
 *                 ctx.scheduler.enqueue_task(self)
 */

#line 346 "miniparla/runtime.pyx"
    }

    /* "miniparla/runtime.pyx":349
 *                 print("Task Queueing Cont.", flush=True)
 *                 ctx.scheduler.enqueue_task(self)
 *             new_state.dependencies.clear()             # <<<<<<<<<<<<<<
 * 
 *         if new_state.is_terminal:
 */

#line 349 "miniparla/runtime.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_state, __pyx_n_s_dependencies_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 349, __pyx_L1_error)

#line 349 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 349 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_clear); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 349, __pyx_L1_error)

#line 349 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 349 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 349 "miniparla/runtime.pyx"
    __pyx_t_5 = NULL;

#line 349 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 349 "miniparla/runtime.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 349 "miniparla/runtime.pyx"
      if (likely(__pyx_t_5)) {

#line 349 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 349 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 349 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 349 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 349 "miniparla/runtime.pyx"
      }

#line 349 "miniparla/runtime.pyx"
    }

#line 349 "miniparla/runtime.pyx"
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 349 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 349 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)

#line 349 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 349 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 349 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "miniparla/runtime.pyx":333
 *             ctx.scheduler.stop()
 * 
 *         elif isinstance(new_state, TaskRunning):             # <<<<<<<<<<<<<<
 *             #print("Spawning Continuation", flush=True)
 *             #if new_state.dependencies is not None:
 */

#line 333 "miniparla/runtime.pyx"
  }

#line 333 "miniparla/runtime.pyx"
  __pyx_L3:;

  /* "miniparla/runtime.pyx":351
 *             new_state.dependencies.clear()
 * 
 *         if new_state.is_terminal:             # <<<<<<<<<<<<<<
 *             #self.inner_task.set_complete()
 *             #Remove from TaskDict
 */

#line 351 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_state, __pyx_n_s_is_terminal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)

#line 351 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 351 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 351, __pyx_L1_error)

#line 351 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 351 "miniparla/runtime.pyx"
  if (__pyx_t_3) {

    /* "miniparla/runtime.pyx":357
 * 
 *             #Decrease active task count
 *             ctx.scheduler.decr_active_task()             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 357 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ctx, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 357, __pyx_L1_error)

#line 357 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 357 "miniparla/runtime.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_decr_active_task); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 357, __pyx_L1_error)

#line 357 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 357 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 357 "miniparla/runtime.pyx"
    __pyx_t_4 = NULL;

#line 357 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 357 "miniparla/runtime.pyx"
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);

#line 357 "miniparla/runtime.pyx"
      if (likely(__pyx_t_4)) {

#line 357 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 357 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_4);

#line 357 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 357 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 357 "miniparla/runtime.pyx"
      }

#line 357 "miniparla/runtime.pyx"
    }

#line 357 "miniparla/runtime.pyx"
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);

#line 357 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 357 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)

#line 357 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 357 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 357 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "miniparla/runtime.pyx":351
 *             new_state.dependencies.clear()
 * 
 *         if new_state.is_terminal:             # <<<<<<<<<<<<<<
 *             #self.inner_task.set_complete()
 *             #Remove from TaskDict
 */

#line 351 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":325
 * 
 *     #@profile
 *     def _set_state(self, new_state, ctx):             # <<<<<<<<<<<<<<
 *         #print("Setting state", new_state, flush=True)
 *         self._state = new_state
 */

#line 325 "miniparla/runtime.pyx"


#line 325 "miniparla/runtime.pyx"
  /* function exit code */

#line 325 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 325 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 325 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 325 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 325 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 325 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 325 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 325 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task._set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 325 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 325 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 325 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 325 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 325 "miniparla/runtime.pyx"
  return __pyx_r;

#line 325 "miniparla/runtime.pyx"
}

#line 325 "miniparla/runtime.pyx"
static PyObject *__pyx_gb_9miniparla_7runtime_4Task_18generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "miniparla/runtime.pyx":360
 * 
 * 
 *     def __await__(self):             # <<<<<<<<<<<<<<
 *         return (yield TaskAwaitTasks([self], self))
 * 
 */

#line 360 "miniparla/runtime.pyx"


#line 360 "miniparla/runtime.pyx"
/* Python wrapper */

#line 360 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_17__await__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_17__await__ = 
#line 360 "miniparla/runtime.pyx"
{"__await__", (PyCFunction)__pyx_pw_9miniparla_7runtime_4Task_17__await__, METH_O, 0};

#line 360 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_17__await__(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 360 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 360 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 360 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__await__ (wrapper)", 0);
  __pyx_r = 
#line 360 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_16__await__(__pyx_self, ((PyObject *)__pyx_v_self));

#line 360 "miniparla/runtime.pyx"


#line 360 "miniparla/runtime.pyx"
  /* function exit code */

#line 360 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 360 "miniparla/runtime.pyx"
  return __pyx_r;

#line 360 "miniparla/runtime.pyx"
}

#line 360 "miniparla/runtime.pyx"


#line 360 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_16__await__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ *__pyx_cur_scope
#line 360 "miniparla/runtime.pyx"
;

#line 360 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 360 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 360 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 360 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 360 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 360 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__await__", 0);

#line 360 "miniparla/runtime.pyx"
  __pyx_cur_scope = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ *)__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_3___await__(__pyx_ptype_9miniparla_7runtime___pyx_scope_struct_3___await__, __pyx_empty_tuple, NULL);

#line 360 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_cur_scope)) {

#line 360 "miniparla/runtime.pyx"
    __pyx_cur_scope = ((struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ *)Py_None);

#line 360 "miniparla/runtime.pyx"
    __Pyx_INCREF(Py_None);

#line 360 "miniparla/runtime.pyx"
    __PYX_ERR(0, 360, __pyx_L1_error)

#line 360 "miniparla/runtime.pyx"
  } else {

#line 360 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_cur_scope);

#line 360 "miniparla/runtime.pyx"
  }

#line 360 "miniparla/runtime.pyx"
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;

#line 360 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);

#line 360 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

#line 360 "miniparla/runtime.pyx"
  {

#line 360 "miniparla/runtime.pyx"
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9miniparla_7runtime_4Task_18generator1, __pyx_codeobj__9, (PyObject *) __pyx_cur_scope, __pyx_n_s_await, __pyx_n_s_Task___await, __pyx_n_s_miniparla_runtime); if (unlikely(!gen)) __PYX_ERR(0, 360, __pyx_L1_error)

#line 360 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_cur_scope);

#line 360 "miniparla/runtime.pyx"
    __Pyx_RefNannyFinishContext();

#line 360 "miniparla/runtime.pyx"
    return (PyObject *) gen;

#line 360 "miniparla/runtime.pyx"
  }

#line 360 "miniparla/runtime.pyx"


#line 360 "miniparla/runtime.pyx"
  /* function exit code */

#line 360 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 360 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task.__await__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 360 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 360 "miniparla/runtime.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));

#line 360 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 360 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 360 "miniparla/runtime.pyx"
  return __pyx_r;

#line 360 "miniparla/runtime.pyx"
}

#line 360 "miniparla/runtime.pyx"


#line 360 "miniparla/runtime.pyx"
static PyObject *__pyx_gb_9miniparla_7runtime_4Task_18generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{

#line 360 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ *__pyx_cur_scope = ((struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ *)__pyx_generator->closure);

#line 360 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 360 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 360 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 360 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 360 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 360 "miniparla/runtime.pyx"
  int __pyx_t_5;

#line 360 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 360 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 360 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 360 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 360 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 360 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__await__", 0);

#line 360 "miniparla/runtime.pyx"
  switch (__pyx_generator->resume_label) {

#line 360 "miniparla/runtime.pyx"
    case 0: goto __pyx_L3_first_run;

#line 360 "miniparla/runtime.pyx"
    case 1: goto __pyx_L4_resume_from_yield;

#line 360 "miniparla/runtime.pyx"
    default: /* CPython raises the right error here */

#line 360 "miniparla/runtime.pyx"
    __Pyx_RefNannyFinishContext();

#line 360 "miniparla/runtime.pyx"
    return NULL;

#line 360 "miniparla/runtime.pyx"
  }

#line 360 "miniparla/runtime.pyx"
  __pyx_L3_first_run:;

#line 360 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 360, __pyx_L1_error)

  /* "miniparla/runtime.pyx":361
 * 
 *     def __await__(self):
 *         return (yield TaskAwaitTasks([self], self))             # <<<<<<<<<<<<<<
 * 
 *     def _notify_dependents(self, scheduler):
 */

#line 361 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 361 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TaskAwaitTasks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)

#line 361 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 361 "miniparla/runtime.pyx"
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)

#line 361 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 361 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);

#line 361 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

#line 361 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_self);

#line 361 "miniparla/runtime.pyx"
  __pyx_t_4 = NULL;

#line 361 "miniparla/runtime.pyx"
  __pyx_t_5 = 0;

#line 361 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 361 "miniparla/runtime.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);

#line 361 "miniparla/runtime.pyx"
    if (likely(__pyx_t_4)) {

#line 361 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 361 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 361 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 361 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 361 "miniparla/runtime.pyx"
      __pyx_t_5 = 1;

#line 361 "miniparla/runtime.pyx"
    }

#line 361 "miniparla/runtime.pyx"
  }

#line 361 "miniparla/runtime.pyx"
  #if CYTHON_FAST_PYCALL

#line 361 "miniparla/runtime.pyx"
  if (PyFunction_Check(__pyx_t_2)) {

#line 361 "miniparla/runtime.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_cur_scope->__pyx_v_self};

#line 361 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)

#line 361 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 361 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 361 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 361 "miniparla/runtime.pyx"
  } else

#line 361 "miniparla/runtime.pyx"
  #endif

#line 361 "miniparla/runtime.pyx"
  #if CYTHON_FAST_PYCCALL

#line 361 "miniparla/runtime.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {

#line 361 "miniparla/runtime.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_cur_scope->__pyx_v_self};

#line 361 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)

#line 361 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 361 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 361 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 361 "miniparla/runtime.pyx"
  } else

#line 361 "miniparla/runtime.pyx"
  #endif

#line 361 "miniparla/runtime.pyx"
  {

#line 361 "miniparla/runtime.pyx"
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 361, __pyx_L1_error)

#line 361 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 361 "miniparla/runtime.pyx"
    if (__pyx_t_4) {

#line 361 "miniparla/runtime.pyx"
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 361 "miniparla/runtime.pyx"
    }

#line 361 "miniparla/runtime.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 361 "miniparla/runtime.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);

#line 361 "miniparla/runtime.pyx"
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);

#line 361 "miniparla/runtime.pyx"
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

#line 361 "miniparla/runtime.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_cur_scope->__pyx_v_self);

#line 361 "miniparla/runtime.pyx"
    __pyx_t_3 = 0;

#line 361 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)

#line 361 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 361 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 361 "miniparla/runtime.pyx"
  }

#line 361 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 361 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 361 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 361 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 361 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 361 "miniparla/runtime.pyx"
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);

#line 361 "miniparla/runtime.pyx"
  /* return from generator, yielding value */

#line 361 "miniparla/runtime.pyx"
  __pyx_generator->resume_label = 1;

#line 361 "miniparla/runtime.pyx"
  return __pyx_r;

#line 361 "miniparla/runtime.pyx"
  __pyx_L4_resume_from_yield:;

#line 361 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 361, __pyx_L1_error)
  __pyx_t_1 = __pyx_sent_value; 
#line 361 "miniparla/runtime.pyx"
__Pyx_INCREF(__pyx_t_1);

#line 361 "miniparla/runtime.pyx"
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);

#line 361 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 361 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 361 "miniparla/runtime.pyx"
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "miniparla/runtime.pyx":360
 * 
 * 
 *     def __await__(self):             # <<<<<<<<<<<<<<
 *         return (yield TaskAwaitTasks([self], self))
 * 
 */

#line 360 "miniparla/runtime.pyx"


#line 360 "miniparla/runtime.pyx"
  /* function exit code */

#line 360 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 360 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 360 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 360 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 360 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 360 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 360 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("__await__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 360 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 360 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;

#line 360 "miniparla/runtime.pyx"
  #if !CYTHON_USE_EXC_INFO_STACK

#line 360 "miniparla/runtime.pyx"
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);

#line 360 "miniparla/runtime.pyx"
  #endif

#line 360 "miniparla/runtime.pyx"
  __pyx_generator->resume_label = -1;

#line 360 "miniparla/runtime.pyx"
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);

#line 360 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 360 "miniparla/runtime.pyx"
  return __pyx_r;

#line 360 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":363
 *         return (yield TaskAwaitTasks([self], self))
 * 
 *     def _notify_dependents(self, scheduler):             # <<<<<<<<<<<<<<
 *         self.inner_task.notify_dependents(scheduler)
 * 
 */

#line 363 "miniparla/runtime.pyx"


#line 363 "miniparla/runtime.pyx"
/* Python wrapper */

#line 363 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_20_notify_dependents(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_20_notify_dependents = 
#line 363 "miniparla/runtime.pyx"
{"_notify_dependents", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_4Task_20_notify_dependents, METH_VARARGS|METH_KEYWORDS, 0};

#line 363 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_20_notify_dependents(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 363 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_scheduler = 0
#line 363 "miniparla/runtime.pyx"
;

#line 363 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 363 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 363 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 363 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 363 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 363 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_notify_dependents (wrapper)", 0);

#line 363 "miniparla/runtime.pyx"
  {

#line 363 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_scheduler,0};

#line 363 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 363 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 363 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 363 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 363 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 363 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 363 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 363 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 363 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 363 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 363 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 363 "miniparla/runtime.pyx"
      }

#line 363 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 363 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 363 "miniparla/runtime.pyx"
        case  0:

#line 363 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 363 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 363 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 363 "miniparla/runtime.pyx"
        case  1:

#line 363 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scheduler)) != 0)) kw_args--;

#line 363 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_notify_dependents", 1, 2, 2, 1); 
#line 363 "miniparla/runtime.pyx"
__PYX_ERR(0, 363, __pyx_L3_error)

#line 363 "miniparla/runtime.pyx"
        }

#line 363 "miniparla/runtime.pyx"
      }

#line 363 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 363 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_notify_dependents") < 0)) __PYX_ERR(0, 363, __pyx_L3_error)

#line 363 "miniparla/runtime.pyx"
      }

#line 363 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 363 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 363 "miniparla/runtime.pyx"
    } else {

#line 363 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 363 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 363 "miniparla/runtime.pyx"
    }

#line 363 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 363 "miniparla/runtime.pyx"
    __pyx_v_scheduler = values[1];

#line 363 "miniparla/runtime.pyx"
  }

#line 363 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 363 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_notify_dependents", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 363 "miniparla/runtime.pyx"
__PYX_ERR(0, 363, __pyx_L3_error)

#line 363 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 363 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task._notify_dependents", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 363 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 363 "miniparla/runtime.pyx"
  return NULL;

#line 363 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 363 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_19_notify_dependents(__pyx_self, __pyx_v_self, __pyx_v_scheduler);

#line 363 "miniparla/runtime.pyx"


#line 363 "miniparla/runtime.pyx"
  /* function exit code */

#line 363 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 363 "miniparla/runtime.pyx"
  return __pyx_r;

#line 363 "miniparla/runtime.pyx"
}

#line 363 "miniparla/runtime.pyx"


#line 363 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_19_notify_dependents(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_scheduler) {

#line 363 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 363 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 363 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 363 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 363 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 363 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 363 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 363 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 363 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_notify_dependents", 0);

  /* "miniparla/runtime.pyx":364
 * 
 *     def _notify_dependents(self, scheduler):
 *         self.inner_task.notify_dependents(scheduler)             # <<<<<<<<<<<<<<
 * 
 *     def _add_dependency(self, task):
 */

#line 364 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_task); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)

#line 364 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 364 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_notify_dependents); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)

#line 364 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 364 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 364 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 364 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 364 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 364 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 364 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 364 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 364 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 364 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 364 "miniparla/runtime.pyx"
    }

#line 364 "miniparla/runtime.pyx"
  }

#line 364 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_scheduler) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_scheduler);

#line 364 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 364 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)

#line 364 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 364 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 364 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":363
 *         return (yield TaskAwaitTasks([self], self))
 * 
 *     def _notify_dependents(self, scheduler):             # <<<<<<<<<<<<<<
 *         self.inner_task.notify_dependents(scheduler)
 * 
 */

#line 363 "miniparla/runtime.pyx"


#line 363 "miniparla/runtime.pyx"
  /* function exit code */

#line 363 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 363 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 363 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 363 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 363 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 363 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 363 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task._notify_dependents", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 363 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 363 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 363 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 363 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 363 "miniparla/runtime.pyx"
  return __pyx_r;

#line 363 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":366
 *         self.inner_task.notify_dependents(scheduler)
 * 
 *     def _add_dependency(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_task.add_dependency(task)
 * 
 */

#line 366 "miniparla/runtime.pyx"


#line 366 "miniparla/runtime.pyx"
/* Python wrapper */

#line 366 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_22_add_dependency(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_22_add_dependency = 
#line 366 "miniparla/runtime.pyx"
{"_add_dependency", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_4Task_22_add_dependency, METH_VARARGS|METH_KEYWORDS, 0};

#line 366 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_22_add_dependency(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 366 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_task = 0
#line 366 "miniparla/runtime.pyx"
;

#line 366 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 366 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 366 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 366 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 366 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 366 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_add_dependency (wrapper)", 0);

#line 366 "miniparla/runtime.pyx"
  {

#line 366 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_task_2,0};

#line 366 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 366 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 366 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 366 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 366 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 366 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 366 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 366 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 366 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 366 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 366 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 366 "miniparla/runtime.pyx"
      }

#line 366 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 366 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 366 "miniparla/runtime.pyx"
        case  0:

#line 366 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 366 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 366 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 366 "miniparla/runtime.pyx"
        case  1:

#line 366 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_task_2)) != 0)) kw_args--;

#line 366 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_add_dependency", 1, 2, 2, 1); 
#line 366 "miniparla/runtime.pyx"
__PYX_ERR(0, 366, __pyx_L3_error)

#line 366 "miniparla/runtime.pyx"
        }

#line 366 "miniparla/runtime.pyx"
      }

#line 366 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 366 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_add_dependency") < 0)) __PYX_ERR(0, 366, __pyx_L3_error)

#line 366 "miniparla/runtime.pyx"
      }

#line 366 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 366 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 366 "miniparla/runtime.pyx"
    } else {

#line 366 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 366 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 366 "miniparla/runtime.pyx"
    }

#line 366 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 366 "miniparla/runtime.pyx"
    __pyx_v_task = values[1];

#line 366 "miniparla/runtime.pyx"
  }

#line 366 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 366 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add_dependency", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 366 "miniparla/runtime.pyx"
__PYX_ERR(0, 366, __pyx_L3_error)

#line 366 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 366 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task._add_dependency", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 366 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 366 "miniparla/runtime.pyx"
  return NULL;

#line 366 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 366 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_21_add_dependency(__pyx_self, __pyx_v_self, __pyx_v_task);

#line 366 "miniparla/runtime.pyx"


#line 366 "miniparla/runtime.pyx"
  /* function exit code */

#line 366 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 366 "miniparla/runtime.pyx"
  return __pyx_r;

#line 366 "miniparla/runtime.pyx"
}

#line 366 "miniparla/runtime.pyx"


#line 366 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_21_add_dependency(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task) {

#line 366 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 366 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 366 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 366 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 366 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 366 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 366 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 366 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 366 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_add_dependency", 0);

  /* "miniparla/runtime.pyx":367
 * 
 *     def _add_dependency(self, task):
 *         self.inner_task.add_dependency(task)             # <<<<<<<<<<<<<<
 * 
 *     def blocked(self):
 */

#line 367 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_task); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)

#line 367 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 367 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add_dependency); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 367, __pyx_L1_error)

#line 367 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 367 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 367 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 367 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 367 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 367 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 367 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 367 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 367 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 367 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 367 "miniparla/runtime.pyx"
    }

#line 367 "miniparla/runtime.pyx"
  }

#line 367 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_task) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_task);

#line 367 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 367 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)

#line 367 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 367 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 367 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":366
 *         self.inner_task.notify_dependents(scheduler)
 * 
 *     def _add_dependency(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_task.add_dependency(task)
 * 
 */

#line 366 "miniparla/runtime.pyx"


#line 366 "miniparla/runtime.pyx"
  /* function exit code */

#line 366 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 366 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 366 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 366 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 366 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 366 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 366 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task._add_dependency", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 366 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 366 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 366 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 366 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 366 "miniparla/runtime.pyx"
  return __pyx_r;

#line 366 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":369
 *         self.inner_task.add_dependency(task)
 * 
 *     def blocked(self):             # <<<<<<<<<<<<<<
 *         return self.inner_task.blocked()
 * 
 */

#line 369 "miniparla/runtime.pyx"


#line 369 "miniparla/runtime.pyx"
/* Python wrapper */

#line 369 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_24blocked(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_24blocked = 
#line 369 "miniparla/runtime.pyx"
{"blocked", (PyCFunction)__pyx_pw_9miniparla_7runtime_4Task_24blocked, METH_O, 0};

#line 369 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_24blocked(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 369 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 369 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 369 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("blocked (wrapper)", 0);
  __pyx_r = 
#line 369 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_23blocked(__pyx_self, ((PyObject *)__pyx_v_self));

#line 369 "miniparla/runtime.pyx"


#line 369 "miniparla/runtime.pyx"
  /* function exit code */

#line 369 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 369 "miniparla/runtime.pyx"
  return __pyx_r;

#line 369 "miniparla/runtime.pyx"
}

#line 369 "miniparla/runtime.pyx"


#line 369 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_23blocked(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 369 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 369 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 369 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 369 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 369 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 369 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 369 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 369 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 369 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("blocked", 0);

  /* "miniparla/runtime.pyx":370
 * 
 *     def blocked(self):
 *         return self.inner_task.blocked()             # <<<<<<<<<<<<<<
 * 
 *     def blocked_unsafe(self):
 */

#line 370 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 370 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_task); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 370, __pyx_L1_error)

#line 370 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 370 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_blocked); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)

#line 370 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 370 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 370 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 370 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 370 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 370 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 370 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 370 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 370 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 370 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 370 "miniparla/runtime.pyx"
    }

#line 370 "miniparla/runtime.pyx"
  }

#line 370 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 370 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 370 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)

#line 370 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 370 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 370 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 370 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 370 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":369
 *         self.inner_task.add_dependency(task)
 * 
 *     def blocked(self):             # <<<<<<<<<<<<<<
 *         return self.inner_task.blocked()
 * 
 */

#line 369 "miniparla/runtime.pyx"


#line 369 "miniparla/runtime.pyx"
  /* function exit code */

#line 369 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 369 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 369 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 369 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 369 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task.blocked", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 369 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 369 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 369 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 369 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 369 "miniparla/runtime.pyx"
  return __pyx_r;

#line 369 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":372
 *         return self.inner_task.blocked()
 * 
 *     def blocked_unsafe(self):             # <<<<<<<<<<<<<<
 *         return self.inner_task.blocked_unsafe()
 * 
 */

#line 372 "miniparla/runtime.pyx"


#line 372 "miniparla/runtime.pyx"
/* Python wrapper */

#line 372 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_26blocked_unsafe(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_26blocked_unsafe = 
#line 372 "miniparla/runtime.pyx"
{"blocked_unsafe", (PyCFunction)__pyx_pw_9miniparla_7runtime_4Task_26blocked_unsafe, METH_O, 0};

#line 372 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_26blocked_unsafe(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 372 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 372 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 372 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("blocked_unsafe (wrapper)", 0);
  __pyx_r = 
#line 372 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_25blocked_unsafe(__pyx_self, ((PyObject *)__pyx_v_self));

#line 372 "miniparla/runtime.pyx"


#line 372 "miniparla/runtime.pyx"
  /* function exit code */

#line 372 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 372 "miniparla/runtime.pyx"
  return __pyx_r;

#line 372 "miniparla/runtime.pyx"
}

#line 372 "miniparla/runtime.pyx"


#line 372 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_25blocked_unsafe(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 372 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 372 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 372 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 372 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 372 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 372 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 372 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 372 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 372 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("blocked_unsafe", 0);

  /* "miniparla/runtime.pyx":373
 * 
 *     def blocked_unsafe(self):
 *         return self.inner_task.blocked_unsafe()             # <<<<<<<<<<<<<<
 * 
 *     def set_dependencies(self, v):
 */

#line 373 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 373 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_task); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)

#line 373 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 373 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_blocked_unsafe); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 373, __pyx_L1_error)

#line 373 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 373 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 373 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 373 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 373 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 373 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 373 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 373 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 373 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 373 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 373 "miniparla/runtime.pyx"
    }

#line 373 "miniparla/runtime.pyx"
  }

#line 373 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 373 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 373 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)

#line 373 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 373 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 373 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 373 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 373 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":372
 *         return self.inner_task.blocked()
 * 
 *     def blocked_unsafe(self):             # <<<<<<<<<<<<<<
 *         return self.inner_task.blocked_unsafe()
 * 
 */

#line 372 "miniparla/runtime.pyx"


#line 372 "miniparla/runtime.pyx"
  /* function exit code */

#line 372 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 372 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 372 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 372 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 372 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task.blocked_unsafe", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 372 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 372 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 372 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 372 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 372 "miniparla/runtime.pyx"
  return __pyx_r;

#line 372 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":375
 *         return self.inner_task.blocked_unsafe()
 * 
 *     def set_dependencies(self, v):             # <<<<<<<<<<<<<<
 *         #print("Setting dependencies of", self._taskid, flush=True)
 *         self.inner_task.set_dependencies(v)
 */

#line 375 "miniparla/runtime.pyx"


#line 375 "miniparla/runtime.pyx"
/* Python wrapper */

#line 375 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_28set_dependencies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_4Task_28set_dependencies = 
#line 375 "miniparla/runtime.pyx"
{"set_dependencies", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_4Task_28set_dependencies, METH_VARARGS|METH_KEYWORDS, 0};

#line 375 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_4Task_28set_dependencies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 375 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_v = 0
#line 375 "miniparla/runtime.pyx"
;

#line 375 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 375 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 375 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 375 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 375 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 375 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("set_dependencies (wrapper)", 0);

#line 375 "miniparla/runtime.pyx"
  {

#line 375 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_v,0};

#line 375 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 375 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 375 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 375 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 375 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 375 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 375 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 375 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 375 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 375 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 375 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 375 "miniparla/runtime.pyx"
      }

#line 375 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 375 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 375 "miniparla/runtime.pyx"
        case  0:

#line 375 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 375 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 375 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 375 "miniparla/runtime.pyx"
        case  1:

#line 375 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;

#line 375 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_dependencies", 1, 2, 2, 1); 
#line 375 "miniparla/runtime.pyx"
__PYX_ERR(0, 375, __pyx_L3_error)

#line 375 "miniparla/runtime.pyx"
        }

#line 375 "miniparla/runtime.pyx"
      }

#line 375 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 375 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_dependencies") < 0)) __PYX_ERR(0, 375, __pyx_L3_error)

#line 375 "miniparla/runtime.pyx"
      }

#line 375 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 375 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 375 "miniparla/runtime.pyx"
    } else {

#line 375 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 375 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 375 "miniparla/runtime.pyx"
    }

#line 375 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 375 "miniparla/runtime.pyx"
    __pyx_v_v = values[1];

#line 375 "miniparla/runtime.pyx"
  }

#line 375 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 375 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_dependencies", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 375 "miniparla/runtime.pyx"
__PYX_ERR(0, 375, __pyx_L3_error)

#line 375 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 375 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task.set_dependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 375 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 375 "miniparla/runtime.pyx"
  return NULL;

#line 375 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 375 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4Task_27set_dependencies(__pyx_self, __pyx_v_self, __pyx_v_v);

#line 375 "miniparla/runtime.pyx"


#line 375 "miniparla/runtime.pyx"
  /* function exit code */

#line 375 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 375 "miniparla/runtime.pyx"
  return __pyx_r;

#line 375 "miniparla/runtime.pyx"
}

#line 375 "miniparla/runtime.pyx"


#line 375 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4Task_27set_dependencies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_v) {

#line 375 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 375 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 375 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 375 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 375 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 375 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 375 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 375 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 375 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("set_dependencies", 0);

  /* "miniparla/runtime.pyx":377
 *     def set_dependencies(self, v):
 *         #print("Setting dependencies of", self._taskid, flush=True)
 *         self.inner_task.set_dependencies(v)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 377 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_task); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)

#line 377 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 377 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_set_dependencies); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 377, __pyx_L1_error)

#line 377 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 377 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 377 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 377 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 377 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 377 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 377 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 377 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 377 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 377 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 377 "miniparla/runtime.pyx"
    }

#line 377 "miniparla/runtime.pyx"
  }

#line 377 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_v) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_v);

#line 377 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 377 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)

#line 377 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 377 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 377 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":375
 *         return self.inner_task.blocked_unsafe()
 * 
 *     def set_dependencies(self, v):             # <<<<<<<<<<<<<<
 *         #print("Setting dependencies of", self._taskid, flush=True)
 *         self.inner_task.set_dependencies(v)
 */

#line 375 "miniparla/runtime.pyx"


#line 375 "miniparla/runtime.pyx"
  /* function exit code */

#line 375 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 375 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 375 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 375 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 375 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 375 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 375 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Task.set_dependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 375 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 375 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 375 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 375 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 375 "miniparla/runtime.pyx"
  return __pyx_r;

#line 375 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":381
 * 
 * class _TaskLocals(threading.local):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(_TaskLocals, self).__init__()
 *         self.task_scopes = []
 */

#line 381 "miniparla/runtime.pyx"


#line 381 "miniparla/runtime.pyx"
/* Python wrapper */

#line 381 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11_TaskLocals_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_11_TaskLocals_1__init__ = 
#line 381 "miniparla/runtime.pyx"
{"__init__", (PyCFunction)__pyx_pw_9miniparla_7runtime_11_TaskLocals_1__init__, METH_O, 0};

#line 381 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11_TaskLocals_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 381 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 381 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 381 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_r = 
#line 381 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11_TaskLocals___init__(__pyx_self, ((PyObject *)__pyx_v_self));

#line 381 "miniparla/runtime.pyx"


#line 381 "miniparla/runtime.pyx"
  /* function exit code */

#line 381 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 381 "miniparla/runtime.pyx"
  return __pyx_r;

#line 381 "miniparla/runtime.pyx"
}

#line 381 "miniparla/runtime.pyx"


#line 381 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_11_TaskLocals___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 381 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 381 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 381 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 381 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 381 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 381 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 381 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 381 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 381 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "miniparla/runtime.pyx":382
 * class _TaskLocals(threading.local):
 *     def __init__(self):
 *         super(_TaskLocals, self).__init__()             # <<<<<<<<<<<<<<
 *         self.task_scopes = []
 * 
 */

#line 382 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TaskLocals); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)

#line 382 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 382 "miniparla/runtime.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)

#line 382 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 382 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 382 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 382 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 382 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_self);

#line 382 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);

#line 382 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 382 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)

#line 382 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 382 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 382 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)

#line 382 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 382 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 382 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 382 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 382 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 382 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 382 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 382 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 382 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 382 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 382 "miniparla/runtime.pyx"
    }

#line 382 "miniparla/runtime.pyx"
  }

#line 382 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 382 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 382 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)

#line 382 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 382 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 382 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":383
 *     def __init__(self):
 *         super(_TaskLocals, self).__init__()
 *         self.task_scopes = []             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 383 "miniparla/runtime.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)

#line 383 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 383 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_task_scopes, __pyx_t_1) < 0) __PYX_ERR(0, 383, __pyx_L1_error)

#line 383 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":381
 * 
 * class _TaskLocals(threading.local):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(_TaskLocals, self).__init__()
 *         self.task_scopes = []
 */

#line 381 "miniparla/runtime.pyx"


#line 381 "miniparla/runtime.pyx"
  /* function exit code */

#line 381 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 381 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 381 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 381 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 381 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 381 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 381 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime._TaskLocals.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 381 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 381 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 381 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 381 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 381 "miniparla/runtime.pyx"
  return __pyx_r;

#line 381 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":386
 * 
 *     @property
 *     def ctx(self):             # <<<<<<<<<<<<<<
 *         return getattr(self, "_ctx", None)
 * 
 */

#line 386 "miniparla/runtime.pyx"


#line 386 "miniparla/runtime.pyx"
/* Python wrapper */

#line 386 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11_TaskLocals_3ctx(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_11_TaskLocals_3ctx = 
#line 386 "miniparla/runtime.pyx"
{"ctx", (PyCFunction)__pyx_pw_9miniparla_7runtime_11_TaskLocals_3ctx, METH_O, 0};

#line 386 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11_TaskLocals_3ctx(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 386 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 386 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 386 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("ctx (wrapper)", 0);
  __pyx_r = 
#line 386 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11_TaskLocals_2ctx(__pyx_self, ((PyObject *)__pyx_v_self));

#line 386 "miniparla/runtime.pyx"


#line 386 "miniparla/runtime.pyx"
  /* function exit code */

#line 386 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 386 "miniparla/runtime.pyx"
  return __pyx_r;

#line 386 "miniparla/runtime.pyx"
}

#line 386 "miniparla/runtime.pyx"


#line 386 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_11_TaskLocals_2ctx(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 386 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 386 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 386 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 386 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 386 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 386 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 386 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("ctx", 0);

  /* "miniparla/runtime.pyx":387
 *     @property
 *     def ctx(self):
 *         return getattr(self, "_ctx", None)             # <<<<<<<<<<<<<<
 * 
 *     @ctx.setter
 */

#line 387 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 387 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_GetAttr3(__pyx_v_self, __pyx_n_u_ctx_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)

#line 387 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 387 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 387 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 387 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":386
 * 
 *     @property
 *     def ctx(self):             # <<<<<<<<<<<<<<
 *         return getattr(self, "_ctx", None)
 * 
 */

#line 386 "miniparla/runtime.pyx"


#line 386 "miniparla/runtime.pyx"
  /* function exit code */

#line 386 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 386 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 386 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime._TaskLocals.ctx", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 386 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 386 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 386 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 386 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 386 "miniparla/runtime.pyx"
  return __pyx_r;

#line 386 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":390
 * 
 *     @ctx.setter
 *     def ctx(self, v):             # <<<<<<<<<<<<<<
 *         self._ctx = v
 * 
 */

#line 390 "miniparla/runtime.pyx"


#line 390 "miniparla/runtime.pyx"
/* Python wrapper */

#line 390 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11_TaskLocals_5ctx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_11_TaskLocals_5ctx = 
#line 390 "miniparla/runtime.pyx"
{"ctx", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_11_TaskLocals_5ctx, METH_VARARGS|METH_KEYWORDS, 0};

#line 390 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11_TaskLocals_5ctx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 390 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_v = 0
#line 390 "miniparla/runtime.pyx"
;

#line 390 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 390 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 390 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 390 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 390 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 390 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("ctx (wrapper)", 0);

#line 390 "miniparla/runtime.pyx"
  {

#line 390 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_v,0};

#line 390 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 390 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 390 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 390 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 390 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 390 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 390 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 390 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 390 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 390 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 390 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 390 "miniparla/runtime.pyx"
      }

#line 390 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 390 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 390 "miniparla/runtime.pyx"
        case  0:

#line 390 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 390 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 390 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 390 "miniparla/runtime.pyx"
        case  1:

#line 390 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;

#line 390 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("ctx", 1, 2, 2, 1); 
#line 390 "miniparla/runtime.pyx"
__PYX_ERR(0, 390, __pyx_L3_error)

#line 390 "miniparla/runtime.pyx"
        }

#line 390 "miniparla/runtime.pyx"
      }

#line 390 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 390 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ctx") < 0)) __PYX_ERR(0, 390, __pyx_L3_error)

#line 390 "miniparla/runtime.pyx"
      }

#line 390 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 390 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 390 "miniparla/runtime.pyx"
    } else {

#line 390 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 390 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 390 "miniparla/runtime.pyx"
    }

#line 390 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 390 "miniparla/runtime.pyx"
    __pyx_v_v = values[1];

#line 390 "miniparla/runtime.pyx"
  }

#line 390 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 390 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ctx", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 390 "miniparla/runtime.pyx"
__PYX_ERR(0, 390, __pyx_L3_error)

#line 390 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 390 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime._TaskLocals.ctx", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 390 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 390 "miniparla/runtime.pyx"
  return NULL;

#line 390 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 390 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11_TaskLocals_4ctx(__pyx_self, __pyx_v_self, __pyx_v_v);

#line 390 "miniparla/runtime.pyx"


#line 390 "miniparla/runtime.pyx"
  /* function exit code */

#line 390 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 390 "miniparla/runtime.pyx"
  return __pyx_r;

#line 390 "miniparla/runtime.pyx"
}

#line 390 "miniparla/runtime.pyx"


#line 390 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_11_TaskLocals_4ctx(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_v) {

#line 390 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 390 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 390 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 390 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 390 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 390 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("ctx", 0);

  /* "miniparla/runtime.pyx":391
 *     @ctx.setter
 *     def ctx(self, v):
 *         self._ctx = v             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 391 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_ctx_2, __pyx_v_v) < 0) __PYX_ERR(0, 391, __pyx_L1_error)

  /* "miniparla/runtime.pyx":390
 * 
 *     @ctx.setter
 *     def ctx(self, v):             # <<<<<<<<<<<<<<
 *         self._ctx = v
 * 
 */

#line 390 "miniparla/runtime.pyx"


#line 390 "miniparla/runtime.pyx"
  /* function exit code */

#line 390 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 390 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 390 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 390 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime._TaskLocals.ctx", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 390 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 390 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 390 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 390 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 390 "miniparla/runtime.pyx"
  return __pyx_r;

#line 390 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":394
 * 
 *     @property
 *     def global_tasks(self):             # <<<<<<<<<<<<<<
 *         return getattr(self, "_global_tasks", [])
 * 
 */

#line 394 "miniparla/runtime.pyx"


#line 394 "miniparla/runtime.pyx"
/* Python wrapper */

#line 394 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11_TaskLocals_7global_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_11_TaskLocals_7global_tasks = 
#line 394 "miniparla/runtime.pyx"
{"global_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_11_TaskLocals_7global_tasks, METH_O, 0};

#line 394 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11_TaskLocals_7global_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 394 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 394 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 394 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("global_tasks (wrapper)", 0);
  __pyx_r = 
#line 394 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11_TaskLocals_6global_tasks(__pyx_self, ((PyObject *)__pyx_v_self));

#line 394 "miniparla/runtime.pyx"


#line 394 "miniparla/runtime.pyx"
  /* function exit code */

#line 394 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 394 "miniparla/runtime.pyx"
  return __pyx_r;

#line 394 "miniparla/runtime.pyx"
}

#line 394 "miniparla/runtime.pyx"


#line 394 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_11_TaskLocals_6global_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 394 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 394 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 394 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 394 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 394 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 394 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 394 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 394 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("global_tasks", 0);

  /* "miniparla/runtime.pyx":395
 *     @property
 *     def global_tasks(self):
 *         return getattr(self, "_global_tasks", [])             # <<<<<<<<<<<<<<
 * 
 *     @global_tasks.setter
 */

#line 395 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 395 "miniparla/runtime.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)

#line 395 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 395 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_GetAttr3(__pyx_v_self, __pyx_n_u_global_tasks, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)

#line 395 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 395 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 395 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_2;

#line 395 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 395 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":394
 * 
 *     @property
 *     def global_tasks(self):             # <<<<<<<<<<<<<<
 *         return getattr(self, "_global_tasks", [])
 * 
 */

#line 394 "miniparla/runtime.pyx"


#line 394 "miniparla/runtime.pyx"
  /* function exit code */

#line 394 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 394 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 394 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 394 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime._TaskLocals.global_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 394 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 394 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 394 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 394 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 394 "miniparla/runtime.pyx"
  return __pyx_r;

#line 394 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":398
 * 
 *     @global_tasks.setter
 *     def global_tasks(self, v):             # <<<<<<<<<<<<<<
 *         self._global_tasks = v
 * 
 */

#line 398 "miniparla/runtime.pyx"


#line 398 "miniparla/runtime.pyx"
/* Python wrapper */

#line 398 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11_TaskLocals_9global_tasks(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_11_TaskLocals_9global_tasks = 
#line 398 "miniparla/runtime.pyx"
{"global_tasks", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_11_TaskLocals_9global_tasks, METH_VARARGS|METH_KEYWORDS, 0};

#line 398 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_11_TaskLocals_9global_tasks(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 398 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_v = 0
#line 398 "miniparla/runtime.pyx"
;

#line 398 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 398 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 398 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 398 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 398 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 398 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("global_tasks (wrapper)", 0);

#line 398 "miniparla/runtime.pyx"
  {

#line 398 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_v,0};

#line 398 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 398 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 398 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 398 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 398 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 398 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 398 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 398 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 398 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 398 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 398 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 398 "miniparla/runtime.pyx"
      }

#line 398 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 398 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 398 "miniparla/runtime.pyx"
        case  0:

#line 398 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 398 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 398 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 398 "miniparla/runtime.pyx"
        case  1:

#line 398 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;

#line 398 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("global_tasks", 1, 2, 2, 1); 
#line 398 "miniparla/runtime.pyx"
__PYX_ERR(0, 398, __pyx_L3_error)

#line 398 "miniparla/runtime.pyx"
        }

#line 398 "miniparla/runtime.pyx"
      }

#line 398 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 398 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "global_tasks") < 0)) __PYX_ERR(0, 398, __pyx_L3_error)

#line 398 "miniparla/runtime.pyx"
      }

#line 398 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 398 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 398 "miniparla/runtime.pyx"
    } else {

#line 398 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 398 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 398 "miniparla/runtime.pyx"
    }

#line 398 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 398 "miniparla/runtime.pyx"
    __pyx_v_v = values[1];

#line 398 "miniparla/runtime.pyx"
  }

#line 398 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 398 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("global_tasks", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 398 "miniparla/runtime.pyx"
__PYX_ERR(0, 398, __pyx_L3_error)

#line 398 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 398 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime._TaskLocals.global_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 398 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 398 "miniparla/runtime.pyx"
  return NULL;

#line 398 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 398 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_11_TaskLocals_8global_tasks(__pyx_self, __pyx_v_self, __pyx_v_v);

#line 398 "miniparla/runtime.pyx"


#line 398 "miniparla/runtime.pyx"
  /* function exit code */

#line 398 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 398 "miniparla/runtime.pyx"
  return __pyx_r;

#line 398 "miniparla/runtime.pyx"
}

#line 398 "miniparla/runtime.pyx"


#line 398 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_11_TaskLocals_8global_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_v) {

#line 398 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 398 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 398 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 398 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 398 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 398 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("global_tasks", 0);

  /* "miniparla/runtime.pyx":399
 *     @global_tasks.setter
 *     def global_tasks(self, v):
 *         self._global_tasks = v             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 399 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_global_tasks, __pyx_v_v) < 0) __PYX_ERR(0, 399, __pyx_L1_error)

  /* "miniparla/runtime.pyx":398
 * 
 *     @global_tasks.setter
 *     def global_tasks(self, v):             # <<<<<<<<<<<<<<
 *         self._global_tasks = v
 * 
 */

#line 398 "miniparla/runtime.pyx"


#line 398 "miniparla/runtime.pyx"
  /* function exit code */

#line 398 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 398 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 398 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 398 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime._TaskLocals.global_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 398 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 398 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 398 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 398 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 398 "miniparla/runtime.pyx"
  return __pyx_r;

#line 398 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":406
 * class SchedulerContext:
 * 
 *     def spawn_task(self, function, args, dependencies, taskid, req, name):             # <<<<<<<<<<<<<<
 *         return Task(function, args, dependencies=dependencies, taskid=taskid, req=req, name=name)
 * 
 */

#line 406 "miniparla/runtime.pyx"


#line 406 "miniparla/runtime.pyx"
/* Python wrapper */

#line 406 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16SchedulerContext_1spawn_task(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_16SchedulerContext_1spawn_task = 
#line 406 "miniparla/runtime.pyx"
{"spawn_task", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_16SchedulerContext_1spawn_task, METH_VARARGS|METH_KEYWORDS, 0};

#line 406 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16SchedulerContext_1spawn_task(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0
#line 406 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_function = 0
#line 406 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_args = 0
#line 406 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_dependencies = 0
#line 406 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_taskid = 0
#line 406 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_req = 0
#line 406 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_name = 0
#line 406 "miniparla/runtime.pyx"
;

#line 406 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 406 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 406 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 406 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 406 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 406 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("spawn_task (wrapper)", 0);

#line 406 "miniparla/runtime.pyx"
  {

#line 406 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_function,&__pyx_n_s_args,&__pyx_n_s_dependencies_2,&__pyx_n_s_taskid,&__pyx_n_s_req,&__pyx_n_s_name,0};

#line 406 "miniparla/runtime.pyx"
    PyObject* values[7] = {0,0,0,0,0,0,0};

#line 406 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 406 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 406 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 406 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  7: 
#line 406 "miniparla/runtime.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  6: 
#line 406 "miniparla/runtime.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 406 "miniparla/runtime.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 406 "miniparla/runtime.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 406 "miniparla/runtime.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 406 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 406 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 406 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 406 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 406 "miniparla/runtime.pyx"
      }

#line 406 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 406 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 406 "miniparla/runtime.pyx"
        case  0:

#line 406 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 406 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 406 "miniparla/runtime.pyx"
        case  1:

#line 406 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_function)) != 0)) kw_args--;

#line 406 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("spawn_task", 1, 7, 7, 1); 
#line 406 "miniparla/runtime.pyx"
__PYX_ERR(0, 406, __pyx_L3_error)

#line 406 "miniparla/runtime.pyx"
        }

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 406 "miniparla/runtime.pyx"
        case  2:

#line 406 "miniparla/runtime.pyx"
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;

#line 406 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("spawn_task", 1, 7, 7, 2); 
#line 406 "miniparla/runtime.pyx"
__PYX_ERR(0, 406, __pyx_L3_error)

#line 406 "miniparla/runtime.pyx"
        }

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 406 "miniparla/runtime.pyx"
        case  3:

#line 406 "miniparla/runtime.pyx"
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dependencies_2)) != 0)) kw_args--;

#line 406 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("spawn_task", 1, 7, 7, 3); 
#line 406 "miniparla/runtime.pyx"
__PYX_ERR(0, 406, __pyx_L3_error)

#line 406 "miniparla/runtime.pyx"
        }

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 406 "miniparla/runtime.pyx"
        case  4:

#line 406 "miniparla/runtime.pyx"
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_taskid)) != 0)) kw_args--;

#line 406 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("spawn_task", 1, 7, 7, 4); 
#line 406 "miniparla/runtime.pyx"
__PYX_ERR(0, 406, __pyx_L3_error)

#line 406 "miniparla/runtime.pyx"
        }

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 406 "miniparla/runtime.pyx"
        case  5:

#line 406 "miniparla/runtime.pyx"
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_req)) != 0)) kw_args--;

#line 406 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("spawn_task", 1, 7, 7, 5); 
#line 406 "miniparla/runtime.pyx"
__PYX_ERR(0, 406, __pyx_L3_error)

#line 406 "miniparla/runtime.pyx"
        }

#line 406 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 406 "miniparla/runtime.pyx"
        case  6:

#line 406 "miniparla/runtime.pyx"
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;

#line 406 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("spawn_task", 1, 7, 7, 6); 
#line 406 "miniparla/runtime.pyx"
__PYX_ERR(0, 406, __pyx_L3_error)

#line 406 "miniparla/runtime.pyx"
        }

#line 406 "miniparla/runtime.pyx"
      }

#line 406 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 406 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "spawn_task") < 0)) __PYX_ERR(0, 406, __pyx_L3_error)

#line 406 "miniparla/runtime.pyx"
      }

#line 406 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {

#line 406 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 406 "miniparla/runtime.pyx"
    } else {

#line 406 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 406 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 406 "miniparla/runtime.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 406 "miniparla/runtime.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 406 "miniparla/runtime.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 406 "miniparla/runtime.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 406 "miniparla/runtime.pyx"
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 406 "miniparla/runtime.pyx"
    }

#line 406 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 406 "miniparla/runtime.pyx"
    __pyx_v_function = values[1];

#line 406 "miniparla/runtime.pyx"
    __pyx_v_args = values[2];

#line 406 "miniparla/runtime.pyx"
    __pyx_v_dependencies = values[3];

#line 406 "miniparla/runtime.pyx"
    __pyx_v_taskid = values[4];

#line 406 "miniparla/runtime.pyx"
    __pyx_v_req = values[5];

#line 406 "miniparla/runtime.pyx"
    __pyx_v_name = values[6];

#line 406 "miniparla/runtime.pyx"
  }

#line 406 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 406 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("spawn_task", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); 
#line 406 "miniparla/runtime.pyx"
__PYX_ERR(0, 406, __pyx_L3_error)

#line 406 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 406 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.SchedulerContext.spawn_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 406 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 406 "miniparla/runtime.pyx"
  return NULL;

#line 406 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 406 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16SchedulerContext_spawn_task(__pyx_self, __pyx_v_self, __pyx_v_function, __pyx_v_args, __pyx_v_dependencies, __pyx_v_taskid, __pyx_v_req, __pyx_v_name);

#line 406 "miniparla/runtime.pyx"


#line 406 "miniparla/runtime.pyx"
  /* function exit code */

#line 406 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 406 "miniparla/runtime.pyx"
  return __pyx_r;

#line 406 "miniparla/runtime.pyx"
}

#line 406 "miniparla/runtime.pyx"


#line 406 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16SchedulerContext_spawn_task(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_function, PyObject *__pyx_v_args, PyObject *__pyx_v_dependencies, PyObject *__pyx_v_taskid, PyObject *__pyx_v_req, PyObject *__pyx_v_name) {

#line 406 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 406 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 406 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 406 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 406 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 406 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 406 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 406 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 406 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 406 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("spawn_task", 0);

  /* "miniparla/runtime.pyx":407
 * 
 *     def spawn_task(self, function, args, dependencies, taskid, req, name):
 *         return Task(function, args, dependencies=dependencies, taskid=taskid, req=req, name=name)             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */

#line 407 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 407 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Task); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)

#line 407 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 407 "miniparla/runtime.pyx"
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)

#line 407 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 407 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_function);

#line 407 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_function);

#line 407 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_function);

#line 407 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_args);

#line 407 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_args);

#line 407 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_args);

#line 407 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 407, __pyx_L1_error)

#line 407 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 407 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dependencies_2, __pyx_v_dependencies) < 0) __PYX_ERR(0, 407, __pyx_L1_error)

#line 407 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_taskid, __pyx_v_taskid) < 0) __PYX_ERR(0, 407, __pyx_L1_error)

#line 407 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_req, __pyx_v_req) < 0) __PYX_ERR(0, 407, __pyx_L1_error)

#line 407 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(0, 407, __pyx_L1_error)

#line 407 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)

#line 407 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 407 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 407 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 407 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 407 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_4;

#line 407 "miniparla/runtime.pyx"
  __pyx_t_4 = 0;

#line 407 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":406
 * class SchedulerContext:
 * 
 *     def spawn_task(self, function, args, dependencies, taskid, req, name):             # <<<<<<<<<<<<<<
 *         return Task(function, args, dependencies=dependencies, taskid=taskid, req=req, name=name)
 * 
 */

#line 406 "miniparla/runtime.pyx"


#line 406 "miniparla/runtime.pyx"
  /* function exit code */

#line 406 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 406 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 406 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 406 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 406 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 406 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.SchedulerContext.spawn_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 406 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 406 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 406 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 406 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 406 "miniparla/runtime.pyx"
  return __pyx_r;

#line 406 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":409
 *         return Task(function, args, dependencies=dependencies, taskid=taskid, req=req, name=name)
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         #print("INNER")
 *         _scheduler_locals._scheduler_context_stack.append(self)
 */

#line 409 "miniparla/runtime.pyx"


#line 409 "miniparla/runtime.pyx"
/* Python wrapper */

#line 409 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16SchedulerContext_3__enter__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_16SchedulerContext_3__enter__ = 
#line 409 "miniparla/runtime.pyx"
{"__enter__", (PyCFunction)__pyx_pw_9miniparla_7runtime_16SchedulerContext_3__enter__, METH_O, 0};

#line 409 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16SchedulerContext_3__enter__(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 409 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 409 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 409 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = 
#line 409 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16SchedulerContext_2__enter__(__pyx_self, ((PyObject *)__pyx_v_self));

#line 409 "miniparla/runtime.pyx"


#line 409 "miniparla/runtime.pyx"
  /* function exit code */

#line 409 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 409 "miniparla/runtime.pyx"
  return __pyx_r;

#line 409 "miniparla/runtime.pyx"
}

#line 409 "miniparla/runtime.pyx"


#line 409 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16SchedulerContext_2__enter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 409 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 409 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 409 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 409 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 409 "miniparla/runtime.pyx"
  int __pyx_t_3;

#line 409 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 409 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 409 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 409 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "miniparla/runtime.pyx":411
 *     def __enter__(self):
 *         #print("INNER")
 *         _scheduler_locals._scheduler_context_stack.append(self)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

#line 411 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_scheduler_locals); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)

#line 411 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 411 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_scheduler_context_stack); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)

#line 411 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 411 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 411 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_v_self); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 411, __pyx_L1_error)

#line 411 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":412
 *         #print("INNER")
 *         _scheduler_locals._scheduler_context_stack.append(self)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 */

#line 412 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 412 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 412 "miniparla/runtime.pyx"
  __pyx_r = __pyx_v_self;

#line 412 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":409
 *         return Task(function, args, dependencies=dependencies, taskid=taskid, req=req, name=name)
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         #print("INNER")
 *         _scheduler_locals._scheduler_context_stack.append(self)
 */

#line 409 "miniparla/runtime.pyx"


#line 409 "miniparla/runtime.pyx"
  /* function exit code */

#line 409 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 409 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 409 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 409 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.SchedulerContext.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 409 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 409 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 409 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 409 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 409 "miniparla/runtime.pyx"
  return __pyx_r;

#line 409 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":414
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         _scheduler_locals._scheduler_context_stack.pop()
 * 
 */

#line 414 "miniparla/runtime.pyx"


#line 414 "miniparla/runtime.pyx"
/* Python wrapper */

#line 414 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16SchedulerContext_5__exit__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_16SchedulerContext_5__exit__ = 
#line 414 "miniparla/runtime.pyx"
{"__exit__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_16SchedulerContext_5__exit__, METH_VARARGS|METH_KEYWORDS, 0};

#line 414 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16SchedulerContext_5__exit__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0
#line 414 "miniparla/runtime.pyx"
;
  CYTHON_UNUSED PyObject *__pyx_v_exc_type = 0
#line 414 "miniparla/runtime.pyx"
;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0
#line 414 "miniparla/runtime.pyx"
;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0
#line 414 "miniparla/runtime.pyx"
;

#line 414 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 414 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 414 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 414 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 414 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 414 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);

#line 414 "miniparla/runtime.pyx"
  {

#line 414 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};

#line 414 "miniparla/runtime.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 414 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 414 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 414 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 414 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  4: 
#line 414 "miniparla/runtime.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 414 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 414 "miniparla/runtime.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 414 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 414 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 414 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 414 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 414 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 414 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 414 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 414 "miniparla/runtime.pyx"
      }

#line 414 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 414 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 414 "miniparla/runtime.pyx"
        case  0:

#line 414 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 414 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 414 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 414 "miniparla/runtime.pyx"
        case  1:

#line 414 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_type)) != 0)) kw_args--;

#line 414 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 4, 4, 1); 
#line 414 "miniparla/runtime.pyx"
__PYX_ERR(0, 414, __pyx_L3_error)

#line 414 "miniparla/runtime.pyx"
        }

#line 414 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 414 "miniparla/runtime.pyx"
        case  2:

#line 414 "miniparla/runtime.pyx"
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;

#line 414 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 4, 4, 2); 
#line 414 "miniparla/runtime.pyx"
__PYX_ERR(0, 414, __pyx_L3_error)

#line 414 "miniparla/runtime.pyx"
        }

#line 414 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 414 "miniparla/runtime.pyx"
        case  3:

#line 414 "miniparla/runtime.pyx"
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;

#line 414 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 4, 4, 3); 
#line 414 "miniparla/runtime.pyx"
__PYX_ERR(0, 414, __pyx_L3_error)

#line 414 "miniparla/runtime.pyx"
        }

#line 414 "miniparla/runtime.pyx"
      }

#line 414 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 414 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) __PYX_ERR(0, 414, __pyx_L3_error)

#line 414 "miniparla/runtime.pyx"
      }

#line 414 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 414 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 414 "miniparla/runtime.pyx"
    } else {

#line 414 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 414 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 414 "miniparla/runtime.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 414 "miniparla/runtime.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 414 "miniparla/runtime.pyx"
    }

#line 414 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 414 "miniparla/runtime.pyx"
    __pyx_v_exc_type = values[1];

#line 414 "miniparla/runtime.pyx"
    __pyx_v_exc_val = values[2];

#line 414 "miniparla/runtime.pyx"
    __pyx_v_exc_tb = values[3];

#line 414 "miniparla/runtime.pyx"
  }

#line 414 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 414 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 414 "miniparla/runtime.pyx"
__PYX_ERR(0, 414, __pyx_L3_error)

#line 414 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 414 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.SchedulerContext.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 414 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 414 "miniparla/runtime.pyx"
  return NULL;

#line 414 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 414 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16SchedulerContext_4__exit__(__pyx_self, __pyx_v_self, __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

#line 414 "miniparla/runtime.pyx"


#line 414 "miniparla/runtime.pyx"
  /* function exit code */

#line 414 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 414 "miniparla/runtime.pyx"
  return __pyx_r;

#line 414 "miniparla/runtime.pyx"
}

#line 414 "miniparla/runtime.pyx"


#line 414 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16SchedulerContext_4__exit__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {

#line 414 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 414 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 414 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 414 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 414 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 414 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 414 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 414 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "miniparla/runtime.pyx":415
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         _scheduler_locals._scheduler_context_stack.pop()             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 415 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_scheduler_locals); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)

#line 415 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 415 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_scheduler_context_stack); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)

#line 415 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 415 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 415 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_Pop(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)

#line 415 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 415 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 415 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":414
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         _scheduler_locals._scheduler_context_stack.pop()
 * 
 */

#line 414 "miniparla/runtime.pyx"


#line 414 "miniparla/runtime.pyx"
  /* function exit code */

#line 414 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 414 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 414 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 414 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 414 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 414 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.SchedulerContext.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 414 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 414 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 414 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 414 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 414 "miniparla/runtime.pyx"
  return __pyx_r;

#line 414 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":419
 * 
 * class _SchedulerLocals(threading.local):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(_SchedulerLocals, self).__init__()
 *         self._scheduler_context_stack = []
 */

#line 419 "miniparla/runtime.pyx"


#line 419 "miniparla/runtime.pyx"
/* Python wrapper */

#line 419 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16_SchedulerLocals_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_16_SchedulerLocals_1__init__ = 
#line 419 "miniparla/runtime.pyx"
{"__init__", (PyCFunction)__pyx_pw_9miniparla_7runtime_16_SchedulerLocals_1__init__, METH_O, 0};

#line 419 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16_SchedulerLocals_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 419 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 419 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 419 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_r = 
#line 419 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16_SchedulerLocals___init__(__pyx_self, ((PyObject *)__pyx_v_self));

#line 419 "miniparla/runtime.pyx"


#line 419 "miniparla/runtime.pyx"
  /* function exit code */

#line 419 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 419 "miniparla/runtime.pyx"
  return __pyx_r;

#line 419 "miniparla/runtime.pyx"
}

#line 419 "miniparla/runtime.pyx"


#line 419 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16_SchedulerLocals___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 419 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 419 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 419 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 419 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 419 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 419 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 419 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 419 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 419 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "miniparla/runtime.pyx":420
 * class _SchedulerLocals(threading.local):
 *     def __init__(self):
 *         super(_SchedulerLocals, self).__init__()             # <<<<<<<<<<<<<<
 *         self._scheduler_context_stack = []
 * 
 */

#line 420 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_SchedulerLocals); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)

#line 420 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 420 "miniparla/runtime.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)

#line 420 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 420 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 420 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 420 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 420 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_self);

#line 420 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);

#line 420 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 420 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)

#line 420 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 420 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 420 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)

#line 420 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 420 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 420 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 420 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 420 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 420 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 420 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 420 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 420 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 420 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 420 "miniparla/runtime.pyx"
    }

#line 420 "miniparla/runtime.pyx"
  }

#line 420 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 420 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 420 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)

#line 420 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 420 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 420 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":421
 *     def __init__(self):
 *         super(_SchedulerLocals, self).__init__()
 *         self._scheduler_context_stack = []             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 421 "miniparla/runtime.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)

#line 421 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 421 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_scheduler_context_stack, __pyx_t_1) < 0) __PYX_ERR(0, 421, __pyx_L1_error)

#line 421 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":419
 * 
 * class _SchedulerLocals(threading.local):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(_SchedulerLocals, self).__init__()
 *         self._scheduler_context_stack = []
 */

#line 419 "miniparla/runtime.pyx"


#line 419 "miniparla/runtime.pyx"
  /* function exit code */

#line 419 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 419 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 419 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 419 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 419 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 419 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 419 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime._SchedulerLocals.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 419 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 419 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 419 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 419 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 419 "miniparla/runtime.pyx"
  return __pyx_r;

#line 419 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":424
 * 
 *     @property
 *     def scheduler_context(self):             # <<<<<<<<<<<<<<
 *         if self._scheduler_context_stack:
 *             return self._scheduler_context_stack[-1]
 */

#line 424 "miniparla/runtime.pyx"


#line 424 "miniparla/runtime.pyx"
/* Python wrapper */

#line 424 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16_SchedulerLocals_3scheduler_context(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_16_SchedulerLocals_3scheduler_context = 
#line 424 "miniparla/runtime.pyx"
{"scheduler_context", (PyCFunction)__pyx_pw_9miniparla_7runtime_16_SchedulerLocals_3scheduler_context, METH_O, 0};

#line 424 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16_SchedulerLocals_3scheduler_context(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 424 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 424 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 424 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("scheduler_context (wrapper)", 0);
  __pyx_r = 
#line 424 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16_SchedulerLocals_2scheduler_context(__pyx_self, ((PyObject *)__pyx_v_self));

#line 424 "miniparla/runtime.pyx"


#line 424 "miniparla/runtime.pyx"
  /* function exit code */

#line 424 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 424 "miniparla/runtime.pyx"
  return __pyx_r;

#line 424 "miniparla/runtime.pyx"
}

#line 424 "miniparla/runtime.pyx"


#line 424 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16_SchedulerLocals_2scheduler_context(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 424 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 424 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 424 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 424 "miniparla/runtime.pyx"
  int __pyx_t_2;

#line 424 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 424 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 424 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 424 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 424 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("scheduler_context", 0);

  /* "miniparla/runtime.pyx":425
 *     @property
 *     def scheduler_context(self):
 *         if self._scheduler_context_stack:             # <<<<<<<<<<<<<<
 *             return self._scheduler_context_stack[-1]
 *         else:
 */

#line 425 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scheduler_context_stack); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)

#line 425 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 425 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 425, __pyx_L1_error)

#line 425 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 425 "miniparla/runtime.pyx"
  if (likely(__pyx_t_2)) {

    /* "miniparla/runtime.pyx":426
 *     def scheduler_context(self):
 *         if self._scheduler_context_stack:
 *             return self._scheduler_context_stack[-1]             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("No scheduler context")
 */

#line 426 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 426 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scheduler_context_stack); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)

#line 426 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 426 "miniparla/runtime.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 426, __pyx_L1_error)

#line 426 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 426 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 426 "miniparla/runtime.pyx"
    __pyx_r = __pyx_t_3;

#line 426 "miniparla/runtime.pyx"
    __pyx_t_3 = 0;

#line 426 "miniparla/runtime.pyx"
    goto __pyx_L0;

    /* "miniparla/runtime.pyx":425
 *     @property
 *     def scheduler_context(self):
 *         if self._scheduler_context_stack:             # <<<<<<<<<<<<<<
 *             return self._scheduler_context_stack[-1]
 *         else:
 */

#line 425 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":428
 *             return self._scheduler_context_stack[-1]
 *         else:
 *             raise Exception("No scheduler context")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 428 "miniparla/runtime.pyx"
  /*else*/ {

#line 428 "miniparla/runtime.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 428, __pyx_L1_error)

#line 428 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 428 "miniparla/runtime.pyx"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 428 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 428 "miniparla/runtime.pyx"
    __PYX_ERR(0, 428, __pyx_L1_error)

#line 428 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":424
 * 
 *     @property
 *     def scheduler_context(self):             # <<<<<<<<<<<<<<
 *         if self._scheduler_context_stack:
 *             return self._scheduler_context_stack[-1]
 */

#line 424 "miniparla/runtime.pyx"


#line 424 "miniparla/runtime.pyx"
  /* function exit code */

#line 424 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 424 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 424 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 424 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime._SchedulerLocals.scheduler_context", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 424 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 424 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 424 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 424 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 424 "miniparla/runtime.pyx"
  return __pyx_r;

#line 424 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":433
 * _scheduler_locals = _SchedulerLocals()
 * 
 * def get_scheduler_context():             # <<<<<<<<<<<<<<
 *     return _scheduler_locals.scheduler_context
 * 
 */

#line 433 "miniparla/runtime.pyx"


#line 433 "miniparla/runtime.pyx"
/* Python wrapper */

#line 433 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_3get_scheduler_context(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_3get_scheduler_context = 
#line 433 "miniparla/runtime.pyx"
{"get_scheduler_context", (PyCFunction)__pyx_pw_9miniparla_7runtime_3get_scheduler_context, METH_NOARGS, 0};

#line 433 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_3get_scheduler_context(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 433 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 433 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 433 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_scheduler_context (wrapper)", 0);
  __pyx_r = 
#line 433 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_2get_scheduler_context(__pyx_self);

#line 433 "miniparla/runtime.pyx"


#line 433 "miniparla/runtime.pyx"
  /* function exit code */

#line 433 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 433 "miniparla/runtime.pyx"
  return __pyx_r;

#line 433 "miniparla/runtime.pyx"
}

#line 433 "miniparla/runtime.pyx"


#line 433 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_2get_scheduler_context(CYTHON_UNUSED PyObject *__pyx_self) {

#line 433 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 433 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 433 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 433 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 433 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 433 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 433 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 433 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_scheduler_context", 0);

  /* "miniparla/runtime.pyx":434
 * 
 * def get_scheduler_context():
 *     return _scheduler_locals.scheduler_context             # <<<<<<<<<<<<<<
 * 
 * class ControllableThread(threading.Thread):
 */

#line 434 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 434 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_scheduler_locals); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)

#line 434 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 434 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_scheduler_context); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)

#line 434 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 434 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 434 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_2;

#line 434 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 434 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":433
 * _scheduler_locals = _SchedulerLocals()
 * 
 * def get_scheduler_context():             # <<<<<<<<<<<<<<
 *     return _scheduler_locals.scheduler_context
 * 
 */

#line 433 "miniparla/runtime.pyx"


#line 433 "miniparla/runtime.pyx"
  /* function exit code */

#line 433 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 433 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 433 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 433 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.get_scheduler_context", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 433 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 433 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 433 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 433 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 433 "miniparla/runtime.pyx"
  return __pyx_r;

#line 433 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":438
 * class ControllableThread(threading.Thread):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._should_run = True
 */

#line 438 "miniparla/runtime.pyx"


#line 438 "miniparla/runtime.pyx"
/* Python wrapper */

#line 438 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_18ControllableThread_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_18ControllableThread_1__init__ = 
#line 438 "miniparla/runtime.pyx"
{"__init__", (PyCFunction)__pyx_pw_9miniparla_7runtime_18ControllableThread_1__init__, METH_O, 0};

#line 438 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_18ControllableThread_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 438 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 438 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 438 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_r = 
#line 438 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_18ControllableThread___init__(__pyx_self, ((PyObject *)__pyx_v_self));

#line 438 "miniparla/runtime.pyx"


#line 438 "miniparla/runtime.pyx"
  /* function exit code */

#line 438 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 438 "miniparla/runtime.pyx"
  return __pyx_r;

#line 438 "miniparla/runtime.pyx"
}

#line 438 "miniparla/runtime.pyx"


#line 438 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_18ControllableThread___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 438 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 438 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 438 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 438 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 438 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 438 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 438 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 438 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 438 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "miniparla/runtime.pyx":439
 * 
 *     def __init__(self):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._should_run = True
 * 
 */

#line 439 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_CyFunction_GetClassObj(__pyx_self);

#line 439 "miniparla/runtime.pyx"
  if (!__pyx_t_2) { PyErr_SetString(PyExc_SystemError, "super(): empty __class__ cell"); __PYX_ERR(0, 439, __pyx_L1_error) }

#line 439 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_2);

#line 439 "miniparla/runtime.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)

#line 439 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 439 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 439 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 439 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 439 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_self);

#line 439 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);

#line 439 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 439 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)

#line 439 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 439 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 439 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)

#line 439 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 439 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 439 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 439 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 439 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 439 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 439 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 439 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 439 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 439 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 439 "miniparla/runtime.pyx"
    }

#line 439 "miniparla/runtime.pyx"
  }

#line 439 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 439 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 439 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)

#line 439 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 439 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 439 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":440
 *     def __init__(self):
 *         super().__init__()
 *         self._should_run = True             # <<<<<<<<<<<<<<
 * 
 *     def stop(self):
 */

#line 440 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_should_run, Py_True) < 0) __PYX_ERR(0, 440, __pyx_L1_error)

  /* "miniparla/runtime.pyx":438
 * class ControllableThread(threading.Thread):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._should_run = True
 */

#line 438 "miniparla/runtime.pyx"


#line 438 "miniparla/runtime.pyx"
  /* function exit code */

#line 438 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 438 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 438 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 438 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 438 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 438 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 438 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.ControllableThread.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 438 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 438 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 438 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 438 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 438 "miniparla/runtime.pyx"
  return __pyx_r;

#line 438 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":442
 *         self._should_run = True
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         with self._monitor:
 *             self._should_run = False
 */

#line 442 "miniparla/runtime.pyx"


#line 442 "miniparla/runtime.pyx"
/* Python wrapper */

#line 442 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_18ControllableThread_3stop(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_18ControllableThread_3stop = 
#line 442 "miniparla/runtime.pyx"
{"stop", (PyCFunction)__pyx_pw_9miniparla_7runtime_18ControllableThread_3stop, METH_O, 0};

#line 442 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_18ControllableThread_3stop(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 442 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 442 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 442 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = 
#line 442 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_18ControllableThread_2stop(__pyx_self, ((PyObject *)__pyx_v_self));

#line 442 "miniparla/runtime.pyx"


#line 442 "miniparla/runtime.pyx"
  /* function exit code */

#line 442 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 442 "miniparla/runtime.pyx"
  return __pyx_r;

#line 442 "miniparla/runtime.pyx"
}

#line 442 "miniparla/runtime.pyx"


#line 442 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_18ControllableThread_2stop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 442 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 442 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 442 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 442 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 442 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 442 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 442 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 442 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 442 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 442 "miniparla/runtime.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 442 "miniparla/runtime.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 442 "miniparla/runtime.pyx"
  int __pyx_t_10;

#line 442 "miniparla/runtime.pyx"
  int __pyx_t_11;

#line 442 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 442 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 442 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 442 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("stop", 0);

  /* "miniparla/runtime.pyx":443
 * 
 *     def stop(self):
 *         with self._monitor:             # <<<<<<<<<<<<<<
 *             self._should_run = False
 *             self._monitor.notify_all()
 */

#line 443 "miniparla/runtime.pyx"
  /*with:*/ {

#line 443 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_monitor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)

#line 443 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 443 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)

#line 443 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 443 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L3_error)

#line 443 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 443 "miniparla/runtime.pyx"
    __pyx_t_5 = NULL;

#line 443 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 443 "miniparla/runtime.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 443 "miniparla/runtime.pyx"
      if (likely(__pyx_t_5)) {

#line 443 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 443 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 443 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 443 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 443 "miniparla/runtime.pyx"
      }

#line 443 "miniparla/runtime.pyx"
    }

#line 443 "miniparla/runtime.pyx"
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 443 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 443 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L3_error)

#line 443 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 443 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 443 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 443 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 443 "miniparla/runtime.pyx"
    /*try:*/ {

#line 443 "miniparla/runtime.pyx"
      {

#line 443 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_declare

#line 443 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_assign

#line 443 "miniparla/runtime.pyx"
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);

#line 443 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_6);

#line 443 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_7);

#line 443 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_8);

#line 443 "miniparla/runtime.pyx"
        /*try:*/ {

          /* "miniparla/runtime.pyx":444
 *     def stop(self):
 *         with self._monitor:
 *             self._should_run = False             # <<<<<<<<<<<<<<
 *             self._monitor.notify_all()
 * 
 */

#line 444 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_should_run, Py_False) < 0) __PYX_ERR(0, 444, __pyx_L7_error)

          /* "miniparla/runtime.pyx":445
 *         with self._monitor:
 *             self._should_run = False
 *             self._monitor.notify_all()             # <<<<<<<<<<<<<<
 * 
 *     def run(self):
 */

#line 445 "miniparla/runtime.pyx"
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_monitor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 445, __pyx_L7_error)

#line 445 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 445 "miniparla/runtime.pyx"
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_notify_all); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 445, __pyx_L7_error)

#line 445 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 445 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 445 "miniparla/runtime.pyx"
          __pyx_t_3 = NULL;

#line 445 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 445 "miniparla/runtime.pyx"
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);

#line 445 "miniparla/runtime.pyx"
            if (likely(__pyx_t_3)) {

#line 445 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 445 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_3);

#line 445 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 445 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_4, function);

#line 445 "miniparla/runtime.pyx"
            }

#line 445 "miniparla/runtime.pyx"
          }

#line 445 "miniparla/runtime.pyx"
          __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 445 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 445 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L7_error)

#line 445 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 445 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 445 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":443
 * 
 *     def stop(self):
 *         with self._monitor:             # <<<<<<<<<<<<<<
 *             self._should_run = False
 *             self._monitor.notify_all()
 */

#line 443 "miniparla/runtime.pyx"
        }

#line 443 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 443 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 443 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 443 "miniparla/runtime.pyx"
        goto __pyx_L12_try_end;

#line 443 "miniparla/runtime.pyx"
        __pyx_L7_error:;

#line 443 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 443 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 443 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 443 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 443 "miniparla/runtime.pyx"
        /*except:*/ {

#line 443 "miniparla/runtime.pyx"
          __Pyx_AddTraceback("miniparla.runtime.ControllableThread.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 443 "miniparla/runtime.pyx"
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_4, &__pyx_t_3) < 0) __PYX_ERR(0, 443, __pyx_L9_except_error)

#line 443 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 443 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 443 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 443 "miniparla/runtime.pyx"
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 443, __pyx_L9_except_error)

#line 443 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 443 "miniparla/runtime.pyx"
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL);

#line 443 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 443 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 443 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 443, __pyx_L9_except_error)

#line 443 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 443 "miniparla/runtime.pyx"
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9);

#line 443 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 443 "miniparla/runtime.pyx"
          if (__pyx_t_10 < 0) __PYX_ERR(0, 443, __pyx_L9_except_error)

#line 443 "miniparla/runtime.pyx"
          __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);

#line 443 "miniparla/runtime.pyx"
          if (__pyx_t_11) {

#line 443 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_1);

#line 443 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_4);

#line 443 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_3);

#line 443 "miniparla/runtime.pyx"
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_4, __pyx_t_3);
            __pyx_t_1 = 0; __pyx_t_4 = 0; __pyx_t_3 = 0; 
#line 443 "miniparla/runtime.pyx"


#line 443 "miniparla/runtime.pyx"
            __PYX_ERR(0, 443, __pyx_L9_except_error)

#line 443 "miniparla/runtime.pyx"
          }

#line 443 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 443 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 443 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 443 "miniparla/runtime.pyx"
          goto __pyx_L8_exception_handled;

#line 443 "miniparla/runtime.pyx"
        }

#line 443 "miniparla/runtime.pyx"
        __pyx_L9_except_error:;

#line 443 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 443 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 443 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 443 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 443 "miniparla/runtime.pyx"
        goto __pyx_L1_error;

#line 443 "miniparla/runtime.pyx"
        __pyx_L8_exception_handled:;

#line 443 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 443 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 443 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 443 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 443 "miniparla/runtime.pyx"
        __pyx_L12_try_end:;

#line 443 "miniparla/runtime.pyx"
      }

#line 443 "miniparla/runtime.pyx"
    }

#line 443 "miniparla/runtime.pyx"
    /*finally:*/ {

#line 443 "miniparla/runtime.pyx"
      /*normal exit:*/{

#line 443 "miniparla/runtime.pyx"
        if (__pyx_t_2) {

#line 443 "miniparla/runtime.pyx"
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL);

#line 443 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 443 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 443, __pyx_L1_error)

#line 443 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 443 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 443 "miniparla/runtime.pyx"
        }

#line 443 "miniparla/runtime.pyx"
        goto __pyx_L6;

#line 443 "miniparla/runtime.pyx"
      }

#line 443 "miniparla/runtime.pyx"
      __pyx_L6:;

#line 443 "miniparla/runtime.pyx"
    }

#line 443 "miniparla/runtime.pyx"
    goto __pyx_L16;

#line 443 "miniparla/runtime.pyx"
    __pyx_L3_error:;

#line 443 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 443 "miniparla/runtime.pyx"
    goto __pyx_L1_error;

#line 443 "miniparla/runtime.pyx"
    __pyx_L16:;

#line 443 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":442
 *         self._should_run = True
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         with self._monitor:
 *             self._should_run = False
 */

#line 442 "miniparla/runtime.pyx"


#line 442 "miniparla/runtime.pyx"
  /* function exit code */

#line 442 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 442 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 442 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 442 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 442 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 442 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 442 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 442 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.ControllableThread.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 442 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 442 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 442 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 442 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 442 "miniparla/runtime.pyx"
  return __pyx_r;

#line 442 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":447
 *             self._monitor.notify_all()
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 447 "miniparla/runtime.pyx"


#line 447 "miniparla/runtime.pyx"
/* Python wrapper */

#line 447 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_18ControllableThread_5run(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_18ControllableThread_5run = 
#line 447 "miniparla/runtime.pyx"
{"run", (PyCFunction)__pyx_pw_9miniparla_7runtime_18ControllableThread_5run, METH_O, 0};

#line 447 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_18ControllableThread_5run(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 447 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 447 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 447 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = 
#line 447 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_18ControllableThread_4run(__pyx_self, ((PyObject *)__pyx_v_self));

#line 447 "miniparla/runtime.pyx"


#line 447 "miniparla/runtime.pyx"
  /* function exit code */

#line 447 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 447 "miniparla/runtime.pyx"
  return __pyx_r;

#line 447 "miniparla/runtime.pyx"
}

#line 447 "miniparla/runtime.pyx"


#line 447 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_18ControllableThread_4run(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {

#line 447 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 447 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 447 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run", 0);

#line 447 "miniparla/runtime.pyx"


#line 447 "miniparla/runtime.pyx"
  /* function exit code */

#line 447 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 447 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 447 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 447 "miniparla/runtime.pyx"
  return __pyx_r;

#line 447 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":453
 *     cdef InnerWorker* inner_worker
 * 
 *     def __cinit__(self, worker):             # <<<<<<<<<<<<<<
 *         self.inner_worker = new InnerWorker(<void*> worker)
 *         print("Created Inner Worker", flush=True)
 */

#line 453 "miniparla/runtime.pyx"


#line 453 "miniparla/runtime.pyx"
/* Python wrapper */

#line 453 "miniparla/runtime.pyx"
static int __pyx_pw_9miniparla_7runtime_13PyInnerWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 453 "miniparla/runtime.pyx"
static int __pyx_pw_9miniparla_7runtime_13PyInnerWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_worker = 0
#line 453 "miniparla/runtime.pyx"
;

#line 453 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 453 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 453 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 453 "miniparla/runtime.pyx"
  int __pyx_r;

#line 453 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 453 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 453 "miniparla/runtime.pyx"
  {

#line 453 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_worker,0};

#line 453 "miniparla/runtime.pyx"
    PyObject* values[1] = {0};

#line 453 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 453 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 453 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 453 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  1: 
#line 453 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 453 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 453 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 453 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 453 "miniparla/runtime.pyx"
      }

#line 453 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 453 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 453 "miniparla/runtime.pyx"
        case  0:

#line 453 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_worker)) != 0)) kw_args--;
        else 
#line 453 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 453 "miniparla/runtime.pyx"
      }

#line 453 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 453 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 453, __pyx_L3_error)

#line 453 "miniparla/runtime.pyx"
      }

#line 453 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 453 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 453 "miniparla/runtime.pyx"
    } else {

#line 453 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 453 "miniparla/runtime.pyx"
    }

#line 453 "miniparla/runtime.pyx"
    __pyx_v_worker = values[0];

#line 453 "miniparla/runtime.pyx"
  }

#line 453 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 453 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 453 "miniparla/runtime.pyx"
__PYX_ERR(0, 453, __pyx_L3_error)

#line 453 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 453 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 453 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 453 "miniparla/runtime.pyx"
  return -1;

#line 453 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 453 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_13PyInnerWorker___cinit__(((struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *)__pyx_v_self), __pyx_v_worker);

#line 453 "miniparla/runtime.pyx"


#line 453 "miniparla/runtime.pyx"
  /* function exit code */

#line 453 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 453 "miniparla/runtime.pyx"
  return __pyx_r;

#line 453 "miniparla/runtime.pyx"
}

#line 453 "miniparla/runtime.pyx"


#line 453 "miniparla/runtime.pyx"
static int __pyx_pf_9miniparla_7runtime_13PyInnerWorker___cinit__(struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *__pyx_v_self, PyObject *__pyx_v_worker) {

#line 453 "miniparla/runtime.pyx"
  int __pyx_r;

#line 453 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 453 "miniparla/runtime.pyx"
  InnerWorker *__pyx_t_1;

#line 453 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 453 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 453 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 453 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 453 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 453 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "miniparla/runtime.pyx":454
 * 
 *     def __cinit__(self, worker):
 *         self.inner_worker = new InnerWorker(<void*> worker)             # <<<<<<<<<<<<<<
 *         print("Created Inner Worker", flush=True)
 * 
 */

#line 454 "miniparla/runtime.pyx"
  try {

#line 454 "miniparla/runtime.pyx"
    __pyx_t_1 = new InnerWorker(((void *)__pyx_v_worker));

#line 454 "miniparla/runtime.pyx"
  } catch(...) {

#line 454 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 454 "miniparla/runtime.pyx"
    __PYX_ERR(0, 454, __pyx_L1_error)

#line 454 "miniparla/runtime.pyx"
  }

#line 454 "miniparla/runtime.pyx"
  __pyx_v_self->inner_worker = __pyx_t_1;

  /* "miniparla/runtime.pyx":455
 *     def __cinit__(self, worker):
 *         self.inner_worker = new InnerWorker(<void*> worker)
 *         print("Created Inner Worker", flush=True)             # <<<<<<<<<<<<<<
 * 
 * class WorkerThread(ControllableThread, SchedulerContext):
 */

#line 455 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L1_error)

#line 455 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 455 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_flush, Py_True) < 0) __PYX_ERR(0, 455, __pyx_L1_error)

#line 455 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__11, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 455, __pyx_L1_error)

#line 455 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 455 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 455 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "miniparla/runtime.pyx":453
 *     cdef InnerWorker* inner_worker
 * 
 *     def __cinit__(self, worker):             # <<<<<<<<<<<<<<
 *         self.inner_worker = new InnerWorker(<void*> worker)
 *         print("Created Inner Worker", flush=True)
 */

#line 453 "miniparla/runtime.pyx"


#line 453 "miniparla/runtime.pyx"
  /* function exit code */

#line 453 "miniparla/runtime.pyx"
  __pyx_r = 0;

#line 453 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 453 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 453 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 453 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 453 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 453 "miniparla/runtime.pyx"
  __pyx_r = -1;

#line 453 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 453 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 453 "miniparla/runtime.pyx"
  return __pyx_r;

#line 453 "miniparla/runtime.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_13PyInnerWorker_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_13PyInnerWorker_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_9miniparla_7runtime_13PyInnerWorker_2__reduce_cython__(((struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_9miniparla_7runtime_13PyInnerWorker_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerWorker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_13PyInnerWorker_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_13PyInnerWorker_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_9miniparla_7runtime_13PyInnerWorker_4__setstate_cython__(((struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_9miniparla_7runtime_13PyInnerWorker_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerWorker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "miniparla/runtime.pyx":458
 * 
 * class WorkerThread(ControllableThread, SchedulerContext):
 *     def __init__(self, scheduler, index):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._scheduler = scheduler
 */

#line 458 "miniparla/runtime.pyx"


#line 458 "miniparla/runtime.pyx"
/* Python wrapper */

#line 458 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_12WorkerThread_1__init__ = 
#line 458 "miniparla/runtime.pyx"
{"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_12WorkerThread_1__init__, METH_VARARGS|METH_KEYWORDS, 0};

#line 458 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 458 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_scheduler = 0
#line 458 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_index = 0
#line 458 "miniparla/runtime.pyx"
;

#line 458 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 458 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 458 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 458 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 458 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 458 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 458 "miniparla/runtime.pyx"
  {

#line 458 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_scheduler,&__pyx_n_s_index,0};

#line 458 "miniparla/runtime.pyx"
    PyObject* values[3] = {0,0,0};

#line 458 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 458 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 458 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 458 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  3: 
#line 458 "miniparla/runtime.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 458 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 458 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 458 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 458 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 458 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 458 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 458 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 458 "miniparla/runtime.pyx"
      }

#line 458 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 458 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 458 "miniparla/runtime.pyx"
        case  0:

#line 458 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 458 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 458 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 458 "miniparla/runtime.pyx"
        case  1:

#line 458 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scheduler)) != 0)) kw_args--;

#line 458 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); 
#line 458 "miniparla/runtime.pyx"
__PYX_ERR(0, 458, __pyx_L3_error)

#line 458 "miniparla/runtime.pyx"
        }

#line 458 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 458 "miniparla/runtime.pyx"
        case  2:

#line 458 "miniparla/runtime.pyx"
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;

#line 458 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); 
#line 458 "miniparla/runtime.pyx"
__PYX_ERR(0, 458, __pyx_L3_error)

#line 458 "miniparla/runtime.pyx"
        }

#line 458 "miniparla/runtime.pyx"
      }

#line 458 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 458 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 458, __pyx_L3_error)

#line 458 "miniparla/runtime.pyx"
      }

#line 458 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 458 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 458 "miniparla/runtime.pyx"
    } else {

#line 458 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 458 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 458 "miniparla/runtime.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 458 "miniparla/runtime.pyx"
    }

#line 458 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 458 "miniparla/runtime.pyx"
    __pyx_v_scheduler = values[1];

#line 458 "miniparla/runtime.pyx"
    __pyx_v_index = values[2];

#line 458 "miniparla/runtime.pyx"
  }

#line 458 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 458 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 458 "miniparla/runtime.pyx"
__PYX_ERR(0, 458, __pyx_L3_error)

#line 458 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 458 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.WorkerThread.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 458 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 458 "miniparla/runtime.pyx"
  return NULL;

#line 458 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 458 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_12WorkerThread___init__(__pyx_self, __pyx_v_self, __pyx_v_scheduler, __pyx_v_index);

#line 458 "miniparla/runtime.pyx"


#line 458 "miniparla/runtime.pyx"
  /* function exit code */

#line 458 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 458 "miniparla/runtime.pyx"
  return __pyx_r;

#line 458 "miniparla/runtime.pyx"
}

#line 458 "miniparla/runtime.pyx"


#line 458 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_scheduler, PyObject *__pyx_v_index) {

#line 458 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 458 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 458 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 458 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 458 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 458 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 458 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 458 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 458 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 458 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 458 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "miniparla/runtime.pyx":459
 * class WorkerThread(ControllableThread, SchedulerContext):
 *     def __init__(self, scheduler, index):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._scheduler = scheduler
 *         self._monitor = threading.Condition(threading.Lock())
 */

#line 459 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_CyFunction_GetClassObj(__pyx_self);

#line 459 "miniparla/runtime.pyx"
  if (!__pyx_t_2) { PyErr_SetString(PyExc_SystemError, "super(): empty __class__ cell"); __PYX_ERR(0, 459, __pyx_L1_error) }

#line 459 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_2);

#line 459 "miniparla/runtime.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)

#line 459 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 459 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 459 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 459 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 459 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_self);

#line 459 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);

#line 459 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 459 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)

#line 459 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 459 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 459 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)

#line 459 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 459 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 459 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 459 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 459 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 459 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 459 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 459 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 459 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 459 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 459 "miniparla/runtime.pyx"
    }

#line 459 "miniparla/runtime.pyx"
  }

#line 459 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 459 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 459 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)

#line 459 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 459 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 459 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":460
 *     def __init__(self, scheduler, index):
 *         super().__init__()
 *         self._scheduler = scheduler             # <<<<<<<<<<<<<<
 *         self._monitor = threading.Condition(threading.Lock())
 *         self.worker = PyInnerWorker(self)
 */

#line 460 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_scheduler_2, __pyx_v_scheduler) < 0) __PYX_ERR(0, 460, __pyx_L1_error)

  /* "miniparla/runtime.pyx":461
 *         super().__init__()
 *         self._scheduler = scheduler
 *         self._monitor = threading.Condition(threading.Lock())             # <<<<<<<<<<<<<<
 *         self.worker = PyInnerWorker(self)
 *         self.index = index
 */

#line 461 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_threading); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)

#line 461 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 461 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Condition); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)

#line 461 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 461 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 461 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_threading); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 461, __pyx_L1_error)

#line 461 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 461 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Lock); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 461, __pyx_L1_error)

#line 461 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 461 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 461 "miniparla/runtime.pyx"
  __pyx_t_4 = NULL;

#line 461 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 461 "miniparla/runtime.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);

#line 461 "miniparla/runtime.pyx"
    if (likely(__pyx_t_4)) {

#line 461 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 461 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 461 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 461 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 461 "miniparla/runtime.pyx"
    }

#line 461 "miniparla/runtime.pyx"
  }

#line 461 "miniparla/runtime.pyx"
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);

#line 461 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 461 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)

#line 461 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 461 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 461 "miniparla/runtime.pyx"
  __pyx_t_5 = NULL;

#line 461 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 461 "miniparla/runtime.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);

#line 461 "miniparla/runtime.pyx"
    if (likely(__pyx_t_5)) {

#line 461 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 461 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 461 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 461 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 461 "miniparla/runtime.pyx"
    }

#line 461 "miniparla/runtime.pyx"
  }

#line 461 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);

#line 461 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 461 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 461 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)

#line 461 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 461 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 461 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_monitor, __pyx_t_1) < 0) __PYX_ERR(0, 461, __pyx_L1_error)

#line 461 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":462
 *         self._scheduler = scheduler
 *         self._monitor = threading.Condition(threading.Lock())
 *         self.worker = PyInnerWorker(self)             # <<<<<<<<<<<<<<
 *         self.index = index
 *         self.task = None
 */

#line 462 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9miniparla_7runtime_PyInnerWorker), __pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)

#line 462 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 462 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_worker, __pyx_t_1) < 0) __PYX_ERR(0, 462, __pyx_L1_error)

#line 462 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":463
 *         self._monitor = threading.Condition(threading.Lock())
 *         self.worker = PyInnerWorker(self)
 *         self.index = index             # <<<<<<<<<<<<<<
 *         self.task = None
 * 
 */

#line 463 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_index, __pyx_v_index) < 0) __PYX_ERR(0, 463, __pyx_L1_error)

  /* "miniparla/runtime.pyx":464
 *         self.worker = PyInnerWorker(self)
 *         self.index = index
 *         self.task = None             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 464 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_task_2, Py_None) < 0) __PYX_ERR(0, 464, __pyx_L1_error)

  /* "miniparla/runtime.pyx":458
 * 
 * class WorkerThread(ControllableThread, SchedulerContext):
 *     def __init__(self, scheduler, index):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._scheduler = scheduler
 */

#line 458 "miniparla/runtime.pyx"


#line 458 "miniparla/runtime.pyx"
  /* function exit code */

#line 458 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 458 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 458 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 458 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 458 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 458 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 458 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 458 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 458 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.WorkerThread.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 458 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 458 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 458 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 458 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 458 "miniparla/runtime.pyx"
  return __pyx_r;

#line 458 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":467
 * 
 *     @property
 *     def scheduler(self):             # <<<<<<<<<<<<<<
 *         return self._scheduler
 * 
 */

#line 467 "miniparla/runtime.pyx"


#line 467 "miniparla/runtime.pyx"
/* Python wrapper */

#line 467 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_3scheduler(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_12WorkerThread_3scheduler = 
#line 467 "miniparla/runtime.pyx"
{"scheduler", (PyCFunction)__pyx_pw_9miniparla_7runtime_12WorkerThread_3scheduler, METH_O, 0};

#line 467 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_3scheduler(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 467 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 467 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 467 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("scheduler (wrapper)", 0);
  __pyx_r = 
#line 467 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_12WorkerThread_2scheduler(__pyx_self, ((PyObject *)__pyx_v_self));

#line 467 "miniparla/runtime.pyx"


#line 467 "miniparla/runtime.pyx"
  /* function exit code */

#line 467 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 467 "miniparla/runtime.pyx"
  return __pyx_r;

#line 467 "miniparla/runtime.pyx"
}

#line 467 "miniparla/runtime.pyx"


#line 467 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread_2scheduler(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 467 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 467 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 467 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 467 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 467 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 467 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 467 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("scheduler", 0);

  /* "miniparla/runtime.pyx":468
 *     @property
 *     def scheduler(self):
 *         return self._scheduler             # <<<<<<<<<<<<<<
 * 
 *     def assign_task(self, task):
 */

#line 468 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 468 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scheduler_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)

#line 468 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 468 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 468 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 468 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":467
 * 
 *     @property
 *     def scheduler(self):             # <<<<<<<<<<<<<<
 *         return self._scheduler
 * 
 */

#line 467 "miniparla/runtime.pyx"


#line 467 "miniparla/runtime.pyx"
  /* function exit code */

#line 467 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 467 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 467 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.WorkerThread.scheduler", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 467 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 467 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 467 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 467 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 467 "miniparla/runtime.pyx"
  return __pyx_r;

#line 467 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":470
 *         return self._scheduler
 * 
 *     def assign_task(self, task):             # <<<<<<<<<<<<<<
 *         #print("Trying to assign task", flush=True)
 *         with self._monitor:
 */

#line 470 "miniparla/runtime.pyx"


#line 470 "miniparla/runtime.pyx"
/* Python wrapper */

#line 470 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_5assign_task(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_12WorkerThread_5assign_task = 
#line 470 "miniparla/runtime.pyx"
{"assign_task", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_12WorkerThread_5assign_task, METH_VARARGS|METH_KEYWORDS, 0};

#line 470 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_5assign_task(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 470 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_task = 0
#line 470 "miniparla/runtime.pyx"
;

#line 470 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 470 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 470 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 470 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 470 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 470 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("assign_task (wrapper)", 0);

#line 470 "miniparla/runtime.pyx"
  {

#line 470 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_task_2,0};

#line 470 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 470 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 470 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 470 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 470 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 470 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 470 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 470 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 470 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 470 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 470 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 470 "miniparla/runtime.pyx"
      }

#line 470 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 470 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 470 "miniparla/runtime.pyx"
        case  0:

#line 470 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 470 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 470 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 470 "miniparla/runtime.pyx"
        case  1:

#line 470 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_task_2)) != 0)) kw_args--;

#line 470 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("assign_task", 1, 2, 2, 1); 
#line 470 "miniparla/runtime.pyx"
__PYX_ERR(0, 470, __pyx_L3_error)

#line 470 "miniparla/runtime.pyx"
        }

#line 470 "miniparla/runtime.pyx"
      }

#line 470 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 470 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "assign_task") < 0)) __PYX_ERR(0, 470, __pyx_L3_error)

#line 470 "miniparla/runtime.pyx"
      }

#line 470 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 470 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 470 "miniparla/runtime.pyx"
    } else {

#line 470 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 470 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 470 "miniparla/runtime.pyx"
    }

#line 470 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 470 "miniparla/runtime.pyx"
    __pyx_v_task = values[1];

#line 470 "miniparla/runtime.pyx"
  }

#line 470 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 470 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("assign_task", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 470 "miniparla/runtime.pyx"
__PYX_ERR(0, 470, __pyx_L3_error)

#line 470 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 470 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.WorkerThread.assign_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 470 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 470 "miniparla/runtime.pyx"
  return NULL;

#line 470 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 470 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_12WorkerThread_4assign_task(__pyx_self, __pyx_v_self, __pyx_v_task);

#line 470 "miniparla/runtime.pyx"


#line 470 "miniparla/runtime.pyx"
  /* function exit code */

#line 470 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 470 "miniparla/runtime.pyx"
  return __pyx_r;

#line 470 "miniparla/runtime.pyx"
}

#line 470 "miniparla/runtime.pyx"


#line 470 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread_4assign_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task) {

#line 470 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 470 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 470 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 470 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 470 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 470 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 470 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 470 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 470 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 470 "miniparla/runtime.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 470 "miniparla/runtime.pyx"
  int __pyx_t_9;

#line 470 "miniparla/runtime.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 470 "miniparla/runtime.pyx"
  int __pyx_t_11;

#line 470 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 470 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 470 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 470 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("assign_task", 0);

  /* "miniparla/runtime.pyx":472
 *     def assign_task(self, task):
 *         #print("Trying to assign task", flush=True)
 *         with self._monitor:             # <<<<<<<<<<<<<<
 *             #print("Inisde monitor", flush=True)
 *             if self.task:
 */

#line 472 "miniparla/runtime.pyx"
  /*with:*/ {

#line 472 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_monitor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)

#line 472 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 472 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 472, __pyx_L1_error)

#line 472 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 472 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L3_error)

#line 472 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 472 "miniparla/runtime.pyx"
    __pyx_t_5 = NULL;

#line 472 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 472 "miniparla/runtime.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 472 "miniparla/runtime.pyx"
      if (likely(__pyx_t_5)) {

#line 472 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 472 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 472 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 472 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 472 "miniparla/runtime.pyx"
      }

#line 472 "miniparla/runtime.pyx"
    }

#line 472 "miniparla/runtime.pyx"
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 472 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 472 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L3_error)

#line 472 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 472 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 472 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 472 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 472 "miniparla/runtime.pyx"
    /*try:*/ {

#line 472 "miniparla/runtime.pyx"
      {

#line 472 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_declare

#line 472 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_assign

#line 472 "miniparla/runtime.pyx"
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);

#line 472 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_6);

#line 472 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_7);

#line 472 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_8);

#line 472 "miniparla/runtime.pyx"
        /*try:*/ {

          /* "miniparla/runtime.pyx":474
 *         with self._monitor:
 *             #print("Inisde monitor", flush=True)
 *             if self.task:             # <<<<<<<<<<<<<<
 *                 raise Exception("Worker already has a task")
 *             #print("Assigning task %s to worker %s" % (task.id, self.index), flush=True)
 */

#line 474 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L7_error)

#line 474 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 474 "miniparla/runtime.pyx"
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 474, __pyx_L7_error)

#line 474 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 474 "miniparla/runtime.pyx"
          if (unlikely(__pyx_t_9)) {

            /* "miniparla/runtime.pyx":475
 *             #print("Inisde monitor", flush=True)
 *             if self.task:
 *                 raise Exception("Worker already has a task")             # <<<<<<<<<<<<<<
 *             #print("Assigning task %s to worker %s" % (task.id, self.index), flush=True)
 *             self.task = task
 */

#line 475 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L7_error)

#line 475 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 475 "miniparla/runtime.pyx"
            __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 475 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 475 "miniparla/runtime.pyx"
            __PYX_ERR(0, 475, __pyx_L7_error)

            /* "miniparla/runtime.pyx":474
 *         with self._monitor:
 *             #print("Inisde monitor", flush=True)
 *             if self.task:             # <<<<<<<<<<<<<<
 *                 raise Exception("Worker already has a task")
 *             #print("Assigning task %s to worker %s" % (task.id, self.index), flush=True)
 */

#line 474 "miniparla/runtime.pyx"
          }

          /* "miniparla/runtime.pyx":477
 *                 raise Exception("Worker already has a task")
 *             #print("Assigning task %s to worker %s" % (task.id, self.index), flush=True)
 *             self.task = task             # <<<<<<<<<<<<<<
 *             #print("Notifying", flush=True)
 *             self._monitor.notify()
 */

#line 477 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_task_2, __pyx_v_task) < 0) __PYX_ERR(0, 477, __pyx_L7_error)

          /* "miniparla/runtime.pyx":479
 *             self.task = task
 *             #print("Notifying", flush=True)
 *             self._monitor.notify()             # <<<<<<<<<<<<<<
 * 
 *     def _remove_task(self):
 */

#line 479 "miniparla/runtime.pyx"
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_monitor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L7_error)

#line 479 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 479 "miniparla/runtime.pyx"
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_notify); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L7_error)

#line 479 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 479 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 479 "miniparla/runtime.pyx"
          __pyx_t_3 = NULL;

#line 479 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 479 "miniparla/runtime.pyx"
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);

#line 479 "miniparla/runtime.pyx"
            if (likely(__pyx_t_3)) {

#line 479 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 479 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_3);

#line 479 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 479 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_4, function);

#line 479 "miniparla/runtime.pyx"
            }

#line 479 "miniparla/runtime.pyx"
          }

#line 479 "miniparla/runtime.pyx"
          __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 479 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 479 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L7_error)

#line 479 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 479 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 479 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":472
 *     def assign_task(self, task):
 *         #print("Trying to assign task", flush=True)
 *         with self._monitor:             # <<<<<<<<<<<<<<
 *             #print("Inisde monitor", flush=True)
 *             if self.task:
 */

#line 472 "miniparla/runtime.pyx"
        }

#line 472 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 472 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 472 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 472 "miniparla/runtime.pyx"
        goto __pyx_L12_try_end;

#line 472 "miniparla/runtime.pyx"
        __pyx_L7_error:;

#line 472 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 472 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 472 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 472 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 472 "miniparla/runtime.pyx"
        /*except:*/ {

#line 472 "miniparla/runtime.pyx"
          __Pyx_AddTraceback("miniparla.runtime.WorkerThread.assign_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 472 "miniparla/runtime.pyx"
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_4, &__pyx_t_3) < 0) __PYX_ERR(0, 472, __pyx_L9_except_error)

#line 472 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 472 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 472 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 472 "miniparla/runtime.pyx"
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 472, __pyx_L9_except_error)

#line 472 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 472 "miniparla/runtime.pyx"
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL);

#line 472 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 472 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 472 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 472, __pyx_L9_except_error)

#line 472 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_10);

#line 472 "miniparla/runtime.pyx"
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_10);

#line 472 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 472 "miniparla/runtime.pyx"
          if (__pyx_t_9 < 0) __PYX_ERR(0, 472, __pyx_L9_except_error)

#line 472 "miniparla/runtime.pyx"
          __pyx_t_11 = ((!(__pyx_t_9 != 0)) != 0);

#line 472 "miniparla/runtime.pyx"
          if (__pyx_t_11) {

#line 472 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_1);

#line 472 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_4);

#line 472 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_3);

#line 472 "miniparla/runtime.pyx"
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_4, __pyx_t_3);
            __pyx_t_1 = 0; __pyx_t_4 = 0; __pyx_t_3 = 0; 
#line 472 "miniparla/runtime.pyx"


#line 472 "miniparla/runtime.pyx"
            __PYX_ERR(0, 472, __pyx_L9_except_error)

#line 472 "miniparla/runtime.pyx"
          }

#line 472 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 472 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 472 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 472 "miniparla/runtime.pyx"
          goto __pyx_L8_exception_handled;

#line 472 "miniparla/runtime.pyx"
        }

#line 472 "miniparla/runtime.pyx"
        __pyx_L9_except_error:;

#line 472 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 472 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 472 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 472 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 472 "miniparla/runtime.pyx"
        goto __pyx_L1_error;

#line 472 "miniparla/runtime.pyx"
        __pyx_L8_exception_handled:;

#line 472 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 472 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 472 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 472 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 472 "miniparla/runtime.pyx"
        __pyx_L12_try_end:;

#line 472 "miniparla/runtime.pyx"
      }

#line 472 "miniparla/runtime.pyx"
    }

#line 472 "miniparla/runtime.pyx"
    /*finally:*/ {

#line 472 "miniparla/runtime.pyx"
      /*normal exit:*/{

#line 472 "miniparla/runtime.pyx"
        if (__pyx_t_2) {

#line 472 "miniparla/runtime.pyx"
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL);

#line 472 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 472 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 472, __pyx_L1_error)

#line 472 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 472 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 472 "miniparla/runtime.pyx"
        }

#line 472 "miniparla/runtime.pyx"
        goto __pyx_L6;

#line 472 "miniparla/runtime.pyx"
      }

#line 472 "miniparla/runtime.pyx"
      __pyx_L6:;

#line 472 "miniparla/runtime.pyx"
    }

#line 472 "miniparla/runtime.pyx"
    goto __pyx_L17;

#line 472 "miniparla/runtime.pyx"
    __pyx_L3_error:;

#line 472 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 472 "miniparla/runtime.pyx"
    goto __pyx_L1_error;

#line 472 "miniparla/runtime.pyx"
    __pyx_L17:;

#line 472 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":470
 *         return self._scheduler
 * 
 *     def assign_task(self, task):             # <<<<<<<<<<<<<<
 *         #print("Trying to assign task", flush=True)
 *         with self._monitor:
 */

#line 470 "miniparla/runtime.pyx"


#line 470 "miniparla/runtime.pyx"
  /* function exit code */

#line 470 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 470 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 470 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 470 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 470 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 470 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 470 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 470 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.WorkerThread.assign_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 470 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 470 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 470 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 470 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 470 "miniparla/runtime.pyx"
  return __pyx_r;

#line 470 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":481
 *             self._monitor.notify()
 * 
 *     def _remove_task(self):             # <<<<<<<<<<<<<<
 *         with self._monitor:
 *             if not self.task:
 */

#line 481 "miniparla/runtime.pyx"


#line 481 "miniparla/runtime.pyx"
/* Python wrapper */

#line 481 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_7_remove_task(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_12WorkerThread_7_remove_task = 
#line 481 "miniparla/runtime.pyx"
{"_remove_task", (PyCFunction)__pyx_pw_9miniparla_7runtime_12WorkerThread_7_remove_task, METH_O, 0};

#line 481 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_7_remove_task(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 481 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 481 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 481 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_remove_task (wrapper)", 0);
  __pyx_r = 
#line 481 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_12WorkerThread_6_remove_task(__pyx_self, ((PyObject *)__pyx_v_self));

#line 481 "miniparla/runtime.pyx"


#line 481 "miniparla/runtime.pyx"
  /* function exit code */

#line 481 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 481 "miniparla/runtime.pyx"
  return __pyx_r;

#line 481 "miniparla/runtime.pyx"
}

#line 481 "miniparla/runtime.pyx"


#line 481 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread_6_remove_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 481 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 481 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 481 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 481 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 481 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 481 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 481 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 481 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 481 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 481 "miniparla/runtime.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 481 "miniparla/runtime.pyx"
  int __pyx_t_9;

#line 481 "miniparla/runtime.pyx"
  int __pyx_t_10;

#line 481 "miniparla/runtime.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 481 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 481 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 481 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 481 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_remove_task", 0);

  /* "miniparla/runtime.pyx":482
 * 
 *     def _remove_task(self):
 *         with self._monitor:             # <<<<<<<<<<<<<<
 *             if not self.task:
 *                 raise Exception("Worker does not have a task")
 */

#line 482 "miniparla/runtime.pyx"
  /*with:*/ {

#line 482 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_monitor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)

#line 482 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 482 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 482, __pyx_L1_error)

#line 482 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 482 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L3_error)

#line 482 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 482 "miniparla/runtime.pyx"
    __pyx_t_5 = NULL;

#line 482 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 482 "miniparla/runtime.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 482 "miniparla/runtime.pyx"
      if (likely(__pyx_t_5)) {

#line 482 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 482 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 482 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 482 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 482 "miniparla/runtime.pyx"
      }

#line 482 "miniparla/runtime.pyx"
    }

#line 482 "miniparla/runtime.pyx"
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 482 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 482 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L3_error)

#line 482 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 482 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 482 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 482 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 482 "miniparla/runtime.pyx"
    /*try:*/ {

#line 482 "miniparla/runtime.pyx"
      {

#line 482 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_declare

#line 482 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_assign

#line 482 "miniparla/runtime.pyx"
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);

#line 482 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_6);

#line 482 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_7);

#line 482 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_8);

#line 482 "miniparla/runtime.pyx"
        /*try:*/ {

          /* "miniparla/runtime.pyx":483
 *     def _remove_task(self):
 *         with self._monitor:
 *             if not self.task:             # <<<<<<<<<<<<<<
 *                 raise Exception("Worker does not have a task")
 *             self.scheduler.decr_running_tasks()
 */

#line 483 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L7_error)

#line 483 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 483 "miniparla/runtime.pyx"
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 483, __pyx_L7_error)

#line 483 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 483 "miniparla/runtime.pyx"
          __pyx_t_10 = ((!__pyx_t_9) != 0);

#line 483 "miniparla/runtime.pyx"
          if (unlikely(__pyx_t_10)) {

            /* "miniparla/runtime.pyx":484
 *         with self._monitor:
 *             if not self.task:
 *                 raise Exception("Worker does not have a task")             # <<<<<<<<<<<<<<
 *             self.scheduler.decr_running_tasks()
 *             self.scheduler.incr_resources(self.task.req.vcus)
 */

#line 484 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L7_error)

#line 484 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 484 "miniparla/runtime.pyx"
            __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 484 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 484 "miniparla/runtime.pyx"
            __PYX_ERR(0, 484, __pyx_L7_error)

            /* "miniparla/runtime.pyx":483
 *     def _remove_task(self):
 *         with self._monitor:
 *             if not self.task:             # <<<<<<<<<<<<<<
 *                 raise Exception("Worker does not have a task")
 *             self.scheduler.decr_running_tasks()
 */

#line 483 "miniparla/runtime.pyx"
          }

          /* "miniparla/runtime.pyx":485
 *             if not self.task:
 *                 raise Exception("Worker does not have a task")
 *             self.scheduler.decr_running_tasks()             # <<<<<<<<<<<<<<
 *             self.scheduler.incr_resources(self.task.req.vcus)
 *             self.task = None
 */

#line 485 "miniparla/runtime.pyx"
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 485, __pyx_L7_error)

#line 485 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 485 "miniparla/runtime.pyx"
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_decr_running_tasks); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L7_error)

#line 485 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 485 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 485 "miniparla/runtime.pyx"
          __pyx_t_3 = NULL;

#line 485 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 485 "miniparla/runtime.pyx"
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);

#line 485 "miniparla/runtime.pyx"
            if (likely(__pyx_t_3)) {

#line 485 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 485 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_3);

#line 485 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 485 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_4, function);

#line 485 "miniparla/runtime.pyx"
            }

#line 485 "miniparla/runtime.pyx"
          }

#line 485 "miniparla/runtime.pyx"
          __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 485 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 485 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L7_error)

#line 485 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 485 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 485 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":486
 *                 raise Exception("Worker does not have a task")
 *             self.scheduler.decr_running_tasks()
 *             self.scheduler.incr_resources(self.task.req.vcus)             # <<<<<<<<<<<<<<
 *             self.task = None
 * 
 */

#line 486 "miniparla/runtime.pyx"
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L7_error)

#line 486 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 486 "miniparla/runtime.pyx"
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_incr_resources); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 486, __pyx_L7_error)

#line 486 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 486 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 486 "miniparla/runtime.pyx"
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L7_error)

#line 486 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 486 "miniparla/runtime.pyx"
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_req); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 486, __pyx_L7_error)

#line 486 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 486 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 486 "miniparla/runtime.pyx"
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_vcus); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L7_error)

#line 486 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 486 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 486 "miniparla/runtime.pyx"
          __pyx_t_5 = NULL;

#line 486 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 486 "miniparla/runtime.pyx"
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 486 "miniparla/runtime.pyx"
            if (likely(__pyx_t_5)) {

#line 486 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 486 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_5);

#line 486 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 486 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_3, function);

#line 486 "miniparla/runtime.pyx"
            }

#line 486 "miniparla/runtime.pyx"
          }

#line 486 "miniparla/runtime.pyx"
          __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);

#line 486 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 486 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 486 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L7_error)

#line 486 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 486 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 486 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":487
 *             self.scheduler.decr_running_tasks()
 *             self.scheduler.incr_resources(self.task.req.vcus)
 *             self.task = None             # <<<<<<<<<<<<<<
 * 
 *     def run(self):
 */

#line 487 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_task_2, Py_None) < 0) __PYX_ERR(0, 487, __pyx_L7_error)

          /* "miniparla/runtime.pyx":482
 * 
 *     def _remove_task(self):
 *         with self._monitor:             # <<<<<<<<<<<<<<
 *             if not self.task:
 *                 raise Exception("Worker does not have a task")
 */

#line 482 "miniparla/runtime.pyx"
        }

#line 482 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 482 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 482 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 482 "miniparla/runtime.pyx"
        goto __pyx_L12_try_end;

#line 482 "miniparla/runtime.pyx"
        __pyx_L7_error:;

#line 482 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 482 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 482 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 482 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 482 "miniparla/runtime.pyx"
        /*except:*/ {

#line 482 "miniparla/runtime.pyx"
          __Pyx_AddTraceback("miniparla.runtime.WorkerThread._remove_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 482 "miniparla/runtime.pyx"
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 482, __pyx_L9_except_error)

#line 482 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 482 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 482 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 482 "miniparla/runtime.pyx"
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 482, __pyx_L9_except_error)

#line 482 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 482 "miniparla/runtime.pyx"
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL);

#line 482 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 482 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 482 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 482, __pyx_L9_except_error)

#line 482 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_11);

#line 482 "miniparla/runtime.pyx"
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_11);

#line 482 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 482 "miniparla/runtime.pyx"
          if (__pyx_t_10 < 0) __PYX_ERR(0, 482, __pyx_L9_except_error)

#line 482 "miniparla/runtime.pyx"
          __pyx_t_9 = ((!(__pyx_t_10 != 0)) != 0);

#line 482 "miniparla/runtime.pyx"
          if (__pyx_t_9) {

#line 482 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_1);

#line 482 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_3);

#line 482 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_4);

#line 482 "miniparla/runtime.pyx"
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_3, __pyx_t_4);
            __pyx_t_1 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; 
#line 482 "miniparla/runtime.pyx"


#line 482 "miniparla/runtime.pyx"
            __PYX_ERR(0, 482, __pyx_L9_except_error)

#line 482 "miniparla/runtime.pyx"
          }

#line 482 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 482 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 482 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 482 "miniparla/runtime.pyx"
          goto __pyx_L8_exception_handled;

#line 482 "miniparla/runtime.pyx"
        }

#line 482 "miniparla/runtime.pyx"
        __pyx_L9_except_error:;

#line 482 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 482 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 482 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 482 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 482 "miniparla/runtime.pyx"
        goto __pyx_L1_error;

#line 482 "miniparla/runtime.pyx"
        __pyx_L8_exception_handled:;

#line 482 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 482 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 482 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 482 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 482 "miniparla/runtime.pyx"
        __pyx_L12_try_end:;

#line 482 "miniparla/runtime.pyx"
      }

#line 482 "miniparla/runtime.pyx"
    }

#line 482 "miniparla/runtime.pyx"
    /*finally:*/ {

#line 482 "miniparla/runtime.pyx"
      /*normal exit:*/{

#line 482 "miniparla/runtime.pyx"
        if (__pyx_t_2) {

#line 482 "miniparla/runtime.pyx"
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL);

#line 482 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 482 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 482, __pyx_L1_error)

#line 482 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 482 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 482 "miniparla/runtime.pyx"
        }

#line 482 "miniparla/runtime.pyx"
        goto __pyx_L6;

#line 482 "miniparla/runtime.pyx"
      }

#line 482 "miniparla/runtime.pyx"
      __pyx_L6:;

#line 482 "miniparla/runtime.pyx"
    }

#line 482 "miniparla/runtime.pyx"
    goto __pyx_L17;

#line 482 "miniparla/runtime.pyx"
    __pyx_L3_error:;

#line 482 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 482 "miniparla/runtime.pyx"
    goto __pyx_L1_error;

#line 482 "miniparla/runtime.pyx"
    __pyx_L17:;

#line 482 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":481
 *             self._monitor.notify()
 * 
 *     def _remove_task(self):             # <<<<<<<<<<<<<<
 *         with self._monitor:
 *             if not self.task:
 */

#line 481 "miniparla/runtime.pyx"


#line 481 "miniparla/runtime.pyx"
  /* function exit code */

#line 481 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 481 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 481 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 481 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 481 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 481 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 481 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 481 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.WorkerThread._remove_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 481 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 481 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 481 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 481 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 481 "miniparla/runtime.pyx"
  return __pyx_r;

#line 481 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":489
 *             self.task = None
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         try:
 * 
 */

#line 489 "miniparla/runtime.pyx"


#line 489 "miniparla/runtime.pyx"
/* Python wrapper */

#line 489 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_9run(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_12WorkerThread_9run = 
#line 489 "miniparla/runtime.pyx"
{"run", (PyCFunction)__pyx_pw_9miniparla_7runtime_12WorkerThread_9run, METH_O, 0};

#line 489 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_9run(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 489 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 489 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = 
#line 489 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_12WorkerThread_8run(__pyx_self, ((PyObject *)__pyx_v_self));

#line 489 "miniparla/runtime.pyx"


#line 489 "miniparla/runtime.pyx"
  /* function exit code */

#line 489 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 489 "miniparla/runtime.pyx"
  return __pyx_r;

#line 489 "miniparla/runtime.pyx"
}

#line 489 "miniparla/runtime.pyx"


#line 489 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread_8run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_e = NULL
#line 489 "miniparla/runtime.pyx"
;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 489 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 489 "miniparla/runtime.pyx"
  int __pyx_t_11;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_13 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_14 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_15 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_16 = NULL;

#line 489 "miniparla/runtime.pyx"
  int __pyx_t_17;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_18 = NULL;

#line 489 "miniparla/runtime.pyx"
  int __pyx_t_19;

#line 489 "miniparla/runtime.pyx"
  int __pyx_t_20;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_21 = NULL;

#line 489 "miniparla/runtime.pyx"
  PyObject *__pyx_t_22 = NULL;

#line 489 "miniparla/runtime.pyx"
  int __pyx_t_23;

#line 489 "miniparla/runtime.pyx"
  char const *__pyx_t_24;

#line 489 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 489 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 489 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 489 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run", 0);

  /* "miniparla/runtime.pyx":490
 * 
 *     def run(self):
 *         try:             # <<<<<<<<<<<<<<
 * 
 *             with self:
 */

#line 490 "miniparla/runtime.pyx"
  {

#line 490 "miniparla/runtime.pyx"
    __Pyx_PyThreadState_declare

#line 490 "miniparla/runtime.pyx"
    __Pyx_PyThreadState_assign

#line 490 "miniparla/runtime.pyx"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 490 "miniparla/runtime.pyx"
    __Pyx_XGOTREF(__pyx_t_1);

#line 490 "miniparla/runtime.pyx"
    __Pyx_XGOTREF(__pyx_t_2);

#line 490 "miniparla/runtime.pyx"
    __Pyx_XGOTREF(__pyx_t_3);

#line 490 "miniparla/runtime.pyx"
    /*try:*/ {

      /* "miniparla/runtime.pyx":492
 *         try:
 * 
 *             with self:             # <<<<<<<<<<<<<<
 *                 # print("Starting Task", flush=True)
 *                 self.scheduler.enqueue_worker(self)
 */

#line 492 "miniparla/runtime.pyx"
      /*with:*/ {

#line 492 "miniparla/runtime.pyx"
        __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_v_self, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L3_error)

#line 492 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 492 "miniparla/runtime.pyx"
        __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_v_self, __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 492, __pyx_L9_error)

#line 492 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 492 "miniparla/runtime.pyx"
        __pyx_t_7 = NULL;

#line 492 "miniparla/runtime.pyx"
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {

#line 492 "miniparla/runtime.pyx"
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);

#line 492 "miniparla/runtime.pyx"
          if (likely(__pyx_t_7)) {

#line 492 "miniparla/runtime.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 492 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_t_7);

#line 492 "miniparla/runtime.pyx"
            __Pyx_INCREF(function);

#line 492 "miniparla/runtime.pyx"
            __Pyx_DECREF_SET(__pyx_t_6, function);

#line 492 "miniparla/runtime.pyx"
          }

#line 492 "miniparla/runtime.pyx"
        }

#line 492 "miniparla/runtime.pyx"
        __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);

#line 492 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 492 "miniparla/runtime.pyx"
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 492, __pyx_L9_error)

#line 492 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 492 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 492 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 492 "miniparla/runtime.pyx"
        /*try:*/ {

#line 492 "miniparla/runtime.pyx"
          {

#line 492 "miniparla/runtime.pyx"
            __Pyx_PyThreadState_declare

#line 492 "miniparla/runtime.pyx"
            __Pyx_PyThreadState_assign

#line 492 "miniparla/runtime.pyx"
            __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);

#line 492 "miniparla/runtime.pyx"
            __Pyx_XGOTREF(__pyx_t_8);

#line 492 "miniparla/runtime.pyx"
            __Pyx_XGOTREF(__pyx_t_9);

#line 492 "miniparla/runtime.pyx"
            __Pyx_XGOTREF(__pyx_t_10);

#line 492 "miniparla/runtime.pyx"
            /*try:*/ {

              /* "miniparla/runtime.pyx":494
 *             with self:
 *                 # print("Starting Task", flush=True)
 *                 self.scheduler.enqueue_worker(self)             # <<<<<<<<<<<<<<
 *                 # print("Enqueued worker", flush=True)
 * 
 */

#line 494 "miniparla/runtime.pyx"
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 494, __pyx_L13_error)

#line 494 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_6);

#line 494 "miniparla/runtime.pyx"
              __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_enqueue_worker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 494, __pyx_L13_error)

#line 494 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_7);

#line 494 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 494 "miniparla/runtime.pyx"
              __pyx_t_6 = NULL;

#line 494 "miniparla/runtime.pyx"
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {

#line 494 "miniparla/runtime.pyx"
                __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);

#line 494 "miniparla/runtime.pyx"
                if (likely(__pyx_t_6)) {

#line 494 "miniparla/runtime.pyx"
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 494 "miniparla/runtime.pyx"
                  __Pyx_INCREF(__pyx_t_6);

#line 494 "miniparla/runtime.pyx"
                  __Pyx_INCREF(function);

#line 494 "miniparla/runtime.pyx"
                  __Pyx_DECREF_SET(__pyx_t_7, function);

#line 494 "miniparla/runtime.pyx"
                }

#line 494 "miniparla/runtime.pyx"
              }

#line 494 "miniparla/runtime.pyx"
              __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_v_self) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_self);

#line 494 "miniparla/runtime.pyx"
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 494 "miniparla/runtime.pyx"
              if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 494, __pyx_L13_error)

#line 494 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_5);

#line 494 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 494 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

              /* "miniparla/runtime.pyx":497
 *                 # print("Enqueued worker", flush=True)
 * 
 *                 while self._should_run:             # <<<<<<<<<<<<<<
 *                     with self._monitor:
 *                         #print("THREAD WAITING: ", self.index, flush=True)
 */

#line 497 "miniparla/runtime.pyx"
              while (1) {

#line 497 "miniparla/runtime.pyx"
                __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_should_run); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 497, __pyx_L13_error)

#line 497 "miniparla/runtime.pyx"
                __Pyx_GOTREF(__pyx_t_5);

#line 497 "miniparla/runtime.pyx"
                __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 497, __pyx_L13_error)

#line 497 "miniparla/runtime.pyx"
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 497 "miniparla/runtime.pyx"
                if (!__pyx_t_11) break;

                /* "miniparla/runtime.pyx":498
 * 
 *                 while self._should_run:
 *                     with self._monitor:             # <<<<<<<<<<<<<<
 *                         #print("THREAD WAITING: ", self.index, flush=True)
 *                         if not self.task:
 */

#line 498 "miniparla/runtime.pyx"
                /*with:*/ {

#line 498 "miniparla/runtime.pyx"
                  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_monitor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 498, __pyx_L13_error)

#line 498 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_5);

#line 498 "miniparla/runtime.pyx"
                  __pyx_t_12 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 498, __pyx_L13_error)

#line 498 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_12);

#line 498 "miniparla/runtime.pyx"
                  __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 498, __pyx_L21_error)

#line 498 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_6);

#line 498 "miniparla/runtime.pyx"
                  __pyx_t_13 = NULL;

#line 498 "miniparla/runtime.pyx"
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {

#line 498 "miniparla/runtime.pyx"
                    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_6);

#line 498 "miniparla/runtime.pyx"
                    if (likely(__pyx_t_13)) {

#line 498 "miniparla/runtime.pyx"
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_INCREF(__pyx_t_13);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_INCREF(function);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 498 "miniparla/runtime.pyx"
                    }

#line 498 "miniparla/runtime.pyx"
                  }

#line 498 "miniparla/runtime.pyx"
                  __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_6);

#line 498 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 498 "miniparla/runtime.pyx"
                  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 498, __pyx_L21_error)

#line 498 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_7);

#line 498 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 498 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 498 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 498 "miniparla/runtime.pyx"
                  /*try:*/ {

#line 498 "miniparla/runtime.pyx"
                    {

#line 498 "miniparla/runtime.pyx"
                      __Pyx_PyThreadState_declare

#line 498 "miniparla/runtime.pyx"
                      __Pyx_PyThreadState_assign

#line 498 "miniparla/runtime.pyx"
                      __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XGOTREF(__pyx_t_14);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XGOTREF(__pyx_t_15);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XGOTREF(__pyx_t_16);

#line 498 "miniparla/runtime.pyx"
                      /*try:*/ {

                        /* "miniparla/runtime.pyx":500
 *                     with self._monitor:
 *                         #print("THREAD WAITING: ", self.index, flush=True)
 *                         if not self.task:             # <<<<<<<<<<<<<<
 *                             self._monitor.wait()
 * 
 */

#line 500 "miniparla/runtime.pyx"
                        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 500, __pyx_L27_error)

#line 500 "miniparla/runtime.pyx"
                        __Pyx_GOTREF(__pyx_t_5);

#line 500 "miniparla/runtime.pyx"
                        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 500, __pyx_L27_error)

#line 500 "miniparla/runtime.pyx"
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 500 "miniparla/runtime.pyx"
                        __pyx_t_17 = ((!__pyx_t_11) != 0);

#line 500 "miniparla/runtime.pyx"
                        if (__pyx_t_17) {

                          /* "miniparla/runtime.pyx":501
 *                         #print("THREAD WAITING: ", self.index, flush=True)
 *                         if not self.task:
 *                             self._monitor.wait()             # <<<<<<<<<<<<<<
 * 
 *                     #print("THREAD ACTIVE", self.index, flush=True)
 */

#line 501 "miniparla/runtime.pyx"
                          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_monitor); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 501, __pyx_L27_error)

#line 501 "miniparla/runtime.pyx"
                          __Pyx_GOTREF(__pyx_t_7);

#line 501 "miniparla/runtime.pyx"
                          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_wait); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 501, __pyx_L27_error)

#line 501 "miniparla/runtime.pyx"
                          __Pyx_GOTREF(__pyx_t_6);

#line 501 "miniparla/runtime.pyx"
                          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 501 "miniparla/runtime.pyx"
                          __pyx_t_7 = NULL;

#line 501 "miniparla/runtime.pyx"
                          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {

#line 501 "miniparla/runtime.pyx"
                            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);

#line 501 "miniparla/runtime.pyx"
                            if (likely(__pyx_t_7)) {

#line 501 "miniparla/runtime.pyx"
                              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 501 "miniparla/runtime.pyx"
                              __Pyx_INCREF(__pyx_t_7);

#line 501 "miniparla/runtime.pyx"
                              __Pyx_INCREF(function);

#line 501 "miniparla/runtime.pyx"
                              __Pyx_DECREF_SET(__pyx_t_6, function);

#line 501 "miniparla/runtime.pyx"
                            }

#line 501 "miniparla/runtime.pyx"
                          }

#line 501 "miniparla/runtime.pyx"
                          __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);

#line 501 "miniparla/runtime.pyx"
                          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 501 "miniparla/runtime.pyx"
                          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 501, __pyx_L27_error)

#line 501 "miniparla/runtime.pyx"
                          __Pyx_GOTREF(__pyx_t_5);

#line 501 "miniparla/runtime.pyx"
                          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 501 "miniparla/runtime.pyx"
                          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

                          /* "miniparla/runtime.pyx":500
 *                     with self._monitor:
 *                         #print("THREAD WAITING: ", self.index, flush=True)
 *                         if not self.task:             # <<<<<<<<<<<<<<
 *                             self._monitor.wait()
 * 
 */

#line 500 "miniparla/runtime.pyx"
                        }

                        /* "miniparla/runtime.pyx":498
 * 
 *                 while self._should_run:
 *                     with self._monitor:             # <<<<<<<<<<<<<<
 *                         #print("THREAD WAITING: ", self.index, flush=True)
 *                         if not self.task:
 */

#line 498 "miniparla/runtime.pyx"
                      }

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 498 "miniparla/runtime.pyx"
                      goto __pyx_L34_try_end;

#line 498 "miniparla/runtime.pyx"
                      __pyx_L27_error:;

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 498 "miniparla/runtime.pyx"
                      /*except:*/ {

#line 498 "miniparla/runtime.pyx"
                        __Pyx_AddTraceback("miniparla.runtime.WorkerThread.run", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 498 "miniparla/runtime.pyx"
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 498, __pyx_L29_except_error)

#line 498 "miniparla/runtime.pyx"
                        __Pyx_GOTREF(__pyx_t_5);

#line 498 "miniparla/runtime.pyx"
                        __Pyx_GOTREF(__pyx_t_6);

#line 498 "miniparla/runtime.pyx"
                        __Pyx_GOTREF(__pyx_t_7);

#line 498 "miniparla/runtime.pyx"
                        __pyx_t_13 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 498, __pyx_L29_except_error)

#line 498 "miniparla/runtime.pyx"
                        __Pyx_GOTREF(__pyx_t_13);

#line 498 "miniparla/runtime.pyx"
                        __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_13, NULL);

#line 498 "miniparla/runtime.pyx"
                        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 498 "miniparla/runtime.pyx"
                        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 498 "miniparla/runtime.pyx"
                        if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 498, __pyx_L29_except_error)

#line 498 "miniparla/runtime.pyx"
                        __Pyx_GOTREF(__pyx_t_18);

#line 498 "miniparla/runtime.pyx"
                        __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_18);

#line 498 "miniparla/runtime.pyx"
                        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

#line 498 "miniparla/runtime.pyx"
                        if (__pyx_t_17 < 0) __PYX_ERR(0, 498, __pyx_L29_except_error)

#line 498 "miniparla/runtime.pyx"
                        __pyx_t_11 = ((!(__pyx_t_17 != 0)) != 0);

#line 498 "miniparla/runtime.pyx"
                        if (__pyx_t_11) {

#line 498 "miniparla/runtime.pyx"
                          __Pyx_GIVEREF(__pyx_t_5);

#line 498 "miniparla/runtime.pyx"
                          __Pyx_GIVEREF(__pyx_t_6);

#line 498 "miniparla/runtime.pyx"
                          __Pyx_XGIVEREF(__pyx_t_7);

#line 498 "miniparla/runtime.pyx"
                          __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_7);
                          __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; 
#line 498 "miniparla/runtime.pyx"


#line 498 "miniparla/runtime.pyx"
                          __PYX_ERR(0, 498, __pyx_L29_except_error)

#line 498 "miniparla/runtime.pyx"
                        }

#line 498 "miniparla/runtime.pyx"
                        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 498 "miniparla/runtime.pyx"
                        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 498 "miniparla/runtime.pyx"
                        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 498 "miniparla/runtime.pyx"
                        goto __pyx_L28_exception_handled;

#line 498 "miniparla/runtime.pyx"
                      }

#line 498 "miniparla/runtime.pyx"
                      __pyx_L29_except_error:;

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XGIVEREF(__pyx_t_14);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XGIVEREF(__pyx_t_15);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XGIVEREF(__pyx_t_16);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);

#line 498 "miniparla/runtime.pyx"
                      goto __pyx_L13_error;

#line 498 "miniparla/runtime.pyx"
                      __pyx_L28_exception_handled:;

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XGIVEREF(__pyx_t_14);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XGIVEREF(__pyx_t_15);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_XGIVEREF(__pyx_t_16);

#line 498 "miniparla/runtime.pyx"
                      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);

#line 498 "miniparla/runtime.pyx"
                      __pyx_L34_try_end:;

#line 498 "miniparla/runtime.pyx"
                    }

#line 498 "miniparla/runtime.pyx"
                  }

#line 498 "miniparla/runtime.pyx"
                  /*finally:*/ {

#line 498 "miniparla/runtime.pyx"
                    /*normal exit:*/{

#line 498 "miniparla/runtime.pyx"
                      if (__pyx_t_12) {

#line 498 "miniparla/runtime.pyx"
                        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_tuple__6, NULL);

#line 498 "miniparla/runtime.pyx"
                        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 498 "miniparla/runtime.pyx"
                        if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 498, __pyx_L13_error)

#line 498 "miniparla/runtime.pyx"
                        __Pyx_GOTREF(__pyx_t_16);

#line 498 "miniparla/runtime.pyx"
                        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 498 "miniparla/runtime.pyx"
                      }

#line 498 "miniparla/runtime.pyx"
                      goto __pyx_L26;

#line 498 "miniparla/runtime.pyx"
                    }

#line 498 "miniparla/runtime.pyx"
                    __pyx_L26:;

#line 498 "miniparla/runtime.pyx"
                  }

#line 498 "miniparla/runtime.pyx"
                  goto __pyx_L39;

#line 498 "miniparla/runtime.pyx"
                  __pyx_L21_error:;

#line 498 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 498 "miniparla/runtime.pyx"
                  goto __pyx_L13_error;

#line 498 "miniparla/runtime.pyx"
                  __pyx_L39:;

#line 498 "miniparla/runtime.pyx"
                }

                /* "miniparla/runtime.pyx":504
 * 
 *                     #print("THREAD ACTIVE", self.index, flush=True)
 *                     if self.task:             # <<<<<<<<<<<<<<
 *                         #print("TASK ACTIVE", self.index, flush=True)
 *                         self.task.run()
 */

#line 504 "miniparla/runtime.pyx"
                __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 504, __pyx_L13_error)

#line 504 "miniparla/runtime.pyx"
                __Pyx_GOTREF(__pyx_t_7);

#line 504 "miniparla/runtime.pyx"
                __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 504, __pyx_L13_error)

#line 504 "miniparla/runtime.pyx"
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 504 "miniparla/runtime.pyx"
                if (__pyx_t_11) {

                  /* "miniparla/runtime.pyx":506
 *                     if self.task:
 *                         #print("TASK ACTIVE", self.index, flush=True)
 *                         self.task.run()             # <<<<<<<<<<<<<<
 *                         self._remove_task()
 *                         self.scheduler.enqueue_worker(self)
 */

#line 506 "miniparla/runtime.pyx"
                  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 506, __pyx_L13_error)

#line 506 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_6);

#line 506 "miniparla/runtime.pyx"
                  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_run); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 506, __pyx_L13_error)

#line 506 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_5);

#line 506 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 506 "miniparla/runtime.pyx"
                  __pyx_t_6 = NULL;

#line 506 "miniparla/runtime.pyx"
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 506 "miniparla/runtime.pyx"
                    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);

#line 506 "miniparla/runtime.pyx"
                    if (likely(__pyx_t_6)) {

#line 506 "miniparla/runtime.pyx"
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 506 "miniparla/runtime.pyx"
                      __Pyx_INCREF(__pyx_t_6);

#line 506 "miniparla/runtime.pyx"
                      __Pyx_INCREF(function);

#line 506 "miniparla/runtime.pyx"
                      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 506 "miniparla/runtime.pyx"
                    }

#line 506 "miniparla/runtime.pyx"
                  }

#line 506 "miniparla/runtime.pyx"
                  __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);

#line 506 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 506 "miniparla/runtime.pyx"
                  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 506, __pyx_L13_error)

#line 506 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_7);

#line 506 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 506 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                  /* "miniparla/runtime.pyx":507
 *                         #print("TASK ACTIVE", self.index, flush=True)
 *                         self.task.run()
 *                         self._remove_task()             # <<<<<<<<<<<<<<
 *                         self.scheduler.enqueue_worker(self)
 *                         #self.scheduler.run_scheduler()
 */

#line 507 "miniparla/runtime.pyx"
                  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_remove_task); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 507, __pyx_L13_error)

#line 507 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_5);

#line 507 "miniparla/runtime.pyx"
                  __pyx_t_6 = NULL;

#line 507 "miniparla/runtime.pyx"
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 507 "miniparla/runtime.pyx"
                    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);

#line 507 "miniparla/runtime.pyx"
                    if (likely(__pyx_t_6)) {

#line 507 "miniparla/runtime.pyx"
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 507 "miniparla/runtime.pyx"
                      __Pyx_INCREF(__pyx_t_6);

#line 507 "miniparla/runtime.pyx"
                      __Pyx_INCREF(function);

#line 507 "miniparla/runtime.pyx"
                      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 507 "miniparla/runtime.pyx"
                    }

#line 507 "miniparla/runtime.pyx"
                  }

#line 507 "miniparla/runtime.pyx"
                  __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);

#line 507 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 507 "miniparla/runtime.pyx"
                  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 507, __pyx_L13_error)

#line 507 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_7);

#line 507 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 507 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                  /* "miniparla/runtime.pyx":508
 *                         self.task.run()
 *                         self._remove_task()
 *                         self.scheduler.enqueue_worker(self)             # <<<<<<<<<<<<<<
 *                         #self.scheduler.run_scheduler()
 *                         #print("FINISHED TASK")
 */

#line 508 "miniparla/runtime.pyx"
                  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 508, __pyx_L13_error)

#line 508 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_5);

#line 508 "miniparla/runtime.pyx"
                  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_enqueue_worker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 508, __pyx_L13_error)

#line 508 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_6);

#line 508 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 508 "miniparla/runtime.pyx"
                  __pyx_t_5 = NULL;

#line 508 "miniparla/runtime.pyx"
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {

#line 508 "miniparla/runtime.pyx"
                    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);

#line 508 "miniparla/runtime.pyx"
                    if (likely(__pyx_t_5)) {

#line 508 "miniparla/runtime.pyx"
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 508 "miniparla/runtime.pyx"
                      __Pyx_INCREF(__pyx_t_5);

#line 508 "miniparla/runtime.pyx"
                      __Pyx_INCREF(function);

#line 508 "miniparla/runtime.pyx"
                      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 508 "miniparla/runtime.pyx"
                    }

#line 508 "miniparla/runtime.pyx"
                  }

#line 508 "miniparla/runtime.pyx"
                  __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_self) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_self);

#line 508 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 508 "miniparla/runtime.pyx"
                  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 508, __pyx_L13_error)

#line 508 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_7);

#line 508 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 508 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                  /* "miniparla/runtime.pyx":504
 * 
 *                     #print("THREAD ACTIVE", self.index, flush=True)
 *                     if self.task:             # <<<<<<<<<<<<<<
 *                         #print("TASK ACTIVE", self.index, flush=True)
 *                         self.task.run()
 */

#line 504 "miniparla/runtime.pyx"
                  goto __pyx_L40;

#line 504 "miniparla/runtime.pyx"
                }

                /* "miniparla/runtime.pyx":511
 *                         #self.scheduler.run_scheduler()
 *                         #print("FINISHED TASK")
 *                     elif not self.task and self._should_run:             # <<<<<<<<<<<<<<
 *                         raise WorkerThreadException("How did I get here?")
 * 
 */

#line 511 "miniparla/runtime.pyx"
                __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_task_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 511, __pyx_L13_error)

#line 511 "miniparla/runtime.pyx"
                __Pyx_GOTREF(__pyx_t_7);

#line 511 "miniparla/runtime.pyx"
                __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 511, __pyx_L13_error)

#line 511 "miniparla/runtime.pyx"
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 511 "miniparla/runtime.pyx"
                __pyx_t_19 = ((!__pyx_t_17) != 0);

#line 511 "miniparla/runtime.pyx"
                if (__pyx_t_19) {

#line 511 "miniparla/runtime.pyx"
                } else {

#line 511 "miniparla/runtime.pyx"
                  __pyx_t_11 = __pyx_t_19;

#line 511 "miniparla/runtime.pyx"
                  goto __pyx_L41_bool_binop_done;

#line 511 "miniparla/runtime.pyx"
                }

#line 511 "miniparla/runtime.pyx"
                __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_should_run); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 511, __pyx_L13_error)

#line 511 "miniparla/runtime.pyx"
                __Pyx_GOTREF(__pyx_t_7);

#line 511 "miniparla/runtime.pyx"
                __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 511, __pyx_L13_error)

#line 511 "miniparla/runtime.pyx"
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 511 "miniparla/runtime.pyx"
                __pyx_t_11 = __pyx_t_19;

#line 511 "miniparla/runtime.pyx"
                __pyx_L41_bool_binop_done:;

#line 511 "miniparla/runtime.pyx"
                if (unlikely(__pyx_t_11)) {

                  /* "miniparla/runtime.pyx":512
 *                         #print("FINISHED TASK")
 *                     elif not self.task and self._should_run:
 *                         raise WorkerThreadException("How did I get here?")             # <<<<<<<<<<<<<<
 * 
 *         except Exception as e:
 */

#line 512 "miniparla/runtime.pyx"
                  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_WorkerThreadException); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 512, __pyx_L13_error)

#line 512 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_6);

#line 512 "miniparla/runtime.pyx"
                  __pyx_t_5 = NULL;

#line 512 "miniparla/runtime.pyx"
                  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 512 "miniparla/runtime.pyx"
                    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);

#line 512 "miniparla/runtime.pyx"
                    if (likely(__pyx_t_5)) {

#line 512 "miniparla/runtime.pyx"
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 512 "miniparla/runtime.pyx"
                      __Pyx_INCREF(__pyx_t_5);

#line 512 "miniparla/runtime.pyx"
                      __Pyx_INCREF(function);

#line 512 "miniparla/runtime.pyx"
                      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 512 "miniparla/runtime.pyx"
                    }

#line 512 "miniparla/runtime.pyx"
                  }

#line 512 "miniparla/runtime.pyx"
                  __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_kp_u_How_did_I_get_here) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u_How_did_I_get_here);

#line 512 "miniparla/runtime.pyx"
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 512 "miniparla/runtime.pyx"
                  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 512, __pyx_L13_error)

#line 512 "miniparla/runtime.pyx"
                  __Pyx_GOTREF(__pyx_t_7);

#line 512 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 512 "miniparla/runtime.pyx"
                  __Pyx_Raise(__pyx_t_7, 0, 0, 0);

#line 512 "miniparla/runtime.pyx"
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 512 "miniparla/runtime.pyx"
                  __PYX_ERR(0, 512, __pyx_L13_error)

                  /* "miniparla/runtime.pyx":511
 *                         #self.scheduler.run_scheduler()
 *                         #print("FINISHED TASK")
 *                     elif not self.task and self._should_run:             # <<<<<<<<<<<<<<
 *                         raise WorkerThreadException("How did I get here?")
 * 
 */

#line 511 "miniparla/runtime.pyx"
                }

#line 511 "miniparla/runtime.pyx"
                __pyx_L40:;

#line 511 "miniparla/runtime.pyx"
              }

              /* "miniparla/runtime.pyx":492
 *         try:
 * 
 *             with self:             # <<<<<<<<<<<<<<
 *                 # print("Starting Task", flush=True)
 *                 self.scheduler.enqueue_worker(self)
 */

#line 492 "miniparla/runtime.pyx"
            }

#line 492 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 492 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 492 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 492 "miniparla/runtime.pyx"
            goto __pyx_L18_try_end;

#line 492 "miniparla/runtime.pyx"
            __pyx_L13_error:;

#line 492 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 492 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 492 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 492 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 492 "miniparla/runtime.pyx"
            /*except:*/ {

#line 492 "miniparla/runtime.pyx"
              __Pyx_AddTraceback("miniparla.runtime.WorkerThread.run", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 492 "miniparla/runtime.pyx"
              if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 492, __pyx_L15_except_error)

#line 492 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_7);

#line 492 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_6);

#line 492 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_5);

#line 492 "miniparla/runtime.pyx"
              __pyx_t_13 = PyTuple_Pack(3, __pyx_t_7, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 492, __pyx_L15_except_error)

#line 492 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_13);

#line 492 "miniparla/runtime.pyx"
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_13, NULL);

#line 492 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 492 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 492 "miniparla/runtime.pyx"
              if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 492, __pyx_L15_except_error)

#line 492 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_12);

#line 492 "miniparla/runtime.pyx"
              __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_12);

#line 492 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 492 "miniparla/runtime.pyx"
              if (__pyx_t_11 < 0) __PYX_ERR(0, 492, __pyx_L15_except_error)

#line 492 "miniparla/runtime.pyx"
              __pyx_t_19 = ((!(__pyx_t_11 != 0)) != 0);

#line 492 "miniparla/runtime.pyx"
              if (__pyx_t_19) {

#line 492 "miniparla/runtime.pyx"
                __Pyx_GIVEREF(__pyx_t_7);

#line 492 "miniparla/runtime.pyx"
                __Pyx_GIVEREF(__pyx_t_6);

#line 492 "miniparla/runtime.pyx"
                __Pyx_XGIVEREF(__pyx_t_5);

#line 492 "miniparla/runtime.pyx"
                __Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_6, __pyx_t_5);
                __pyx_t_7 = 0; __pyx_t_6 = 0; __pyx_t_5 = 0; 
#line 492 "miniparla/runtime.pyx"


#line 492 "miniparla/runtime.pyx"
                __PYX_ERR(0, 492, __pyx_L15_except_error)

#line 492 "miniparla/runtime.pyx"
              }

#line 492 "miniparla/runtime.pyx"
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 492 "miniparla/runtime.pyx"
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 492 "miniparla/runtime.pyx"
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 492 "miniparla/runtime.pyx"
              goto __pyx_L14_exception_handled;

#line 492 "miniparla/runtime.pyx"
            }

#line 492 "miniparla/runtime.pyx"
            __pyx_L15_except_error:;

#line 492 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_8);

#line 492 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_9);

#line 492 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_10);

#line 492 "miniparla/runtime.pyx"
            __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 492 "miniparla/runtime.pyx"
            goto __pyx_L3_error;

#line 492 "miniparla/runtime.pyx"
            __pyx_L14_exception_handled:;

#line 492 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_8);

#line 492 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_9);

#line 492 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_10);

#line 492 "miniparla/runtime.pyx"
            __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 492 "miniparla/runtime.pyx"
            __pyx_L18_try_end:;

#line 492 "miniparla/runtime.pyx"
          }

#line 492 "miniparla/runtime.pyx"
        }

#line 492 "miniparla/runtime.pyx"
        /*finally:*/ {

#line 492 "miniparla/runtime.pyx"
          /*normal exit:*/{

#line 492 "miniparla/runtime.pyx"
            if (__pyx_t_4) {

#line 492 "miniparla/runtime.pyx"
              __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__6, NULL);

#line 492 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 492 "miniparla/runtime.pyx"
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 492, __pyx_L3_error)

#line 492 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_10);

#line 492 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 492 "miniparla/runtime.pyx"
            }

#line 492 "miniparla/runtime.pyx"
            goto __pyx_L12;

#line 492 "miniparla/runtime.pyx"
          }

#line 492 "miniparla/runtime.pyx"
          __pyx_L12:;

#line 492 "miniparla/runtime.pyx"
        }

#line 492 "miniparla/runtime.pyx"
        goto __pyx_L46;

#line 492 "miniparla/runtime.pyx"
        __pyx_L9_error:;

#line 492 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 492 "miniparla/runtime.pyx"
        goto __pyx_L3_error;

#line 492 "miniparla/runtime.pyx"
        __pyx_L46:;

#line 492 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":490
 * 
 *     def run(self):
 *         try:             # <<<<<<<<<<<<<<
 * 
 *             with self:
 */

#line 490 "miniparla/runtime.pyx"
    }

#line 490 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 490 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 490 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 490 "miniparla/runtime.pyx"
    goto __pyx_L8_try_end;

#line 490 "miniparla/runtime.pyx"
    __pyx_L3_error:;

#line 490 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 490 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 490 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 490 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "miniparla/runtime.pyx":514
 *                         raise WorkerThreadException("How did I get here?")
 * 
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.scheduler.stop()
 *             raise e
 */

#line 514 "miniparla/runtime.pyx"
    __pyx_t_20 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 514 "miniparla/runtime.pyx"
    if (__pyx_t_20) {

#line 514 "miniparla/runtime.pyx"
      __Pyx_AddTraceback("miniparla.runtime.WorkerThread.run", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 514 "miniparla/runtime.pyx"
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 514, __pyx_L5_except_error)

#line 514 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 514 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 514 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 514 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_6);

#line 514 "miniparla/runtime.pyx"
      __pyx_v_e = __pyx_t_6;

#line 514 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":515
 * 
 *         except Exception as e:
 *             self.scheduler.stop()             # <<<<<<<<<<<<<<
 *             raise e
 * 
 */

#line 515 "miniparla/runtime.pyx"
        __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scheduler); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 515, __pyx_L52_error)

#line 515 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_21);

#line 515 "miniparla/runtime.pyx"
        __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_stop); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 515, __pyx_L52_error)

#line 515 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_22);

#line 515 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

#line 515 "miniparla/runtime.pyx"
        __pyx_t_21 = NULL;

#line 515 "miniparla/runtime.pyx"
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_22))) {

#line 515 "miniparla/runtime.pyx"
          __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_22);

#line 515 "miniparla/runtime.pyx"
          if (likely(__pyx_t_21)) {

#line 515 "miniparla/runtime.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);

#line 515 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_t_21);

#line 515 "miniparla/runtime.pyx"
            __Pyx_INCREF(function);

#line 515 "miniparla/runtime.pyx"
            __Pyx_DECREF_SET(__pyx_t_22, function);

#line 515 "miniparla/runtime.pyx"
          }

#line 515 "miniparla/runtime.pyx"
        }

#line 515 "miniparla/runtime.pyx"
        __pyx_t_13 = (__pyx_t_21) ? __Pyx_PyObject_CallOneArg(__pyx_t_22, __pyx_t_21) : __Pyx_PyObject_CallNoArg(__pyx_t_22);

#line 515 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;

#line 515 "miniparla/runtime.pyx"
        if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 515, __pyx_L52_error)

#line 515 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_13);

#line 515 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;

#line 515 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "miniparla/runtime.pyx":516
 *         except Exception as e:
 *             self.scheduler.stop()
 *             raise e             # <<<<<<<<<<<<<<
 * 
 *     def stop(self):
 */

#line 516 "miniparla/runtime.pyx"
        __Pyx_Raise(__pyx_v_e, 0, 0, 0);

#line 516 "miniparla/runtime.pyx"
        __PYX_ERR(0, 516, __pyx_L52_error)

#line 516 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":514
 *                         raise WorkerThreadException("How did I get here?")
 * 
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.scheduler.stop()
 *             raise e
 */

#line 514 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 514 "miniparla/runtime.pyx"
        __pyx_L52_error:;

#line 514 "miniparla/runtime.pyx"
        /*exception exit:*/{

#line 514 "miniparla/runtime.pyx"
          __Pyx_PyThreadState_declare

#line 514 "miniparla/runtime.pyx"
          __Pyx_PyThreadState_assign

#line 514 "miniparla/runtime.pyx"
          __pyx_t_4 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_8 = 0; __pyx_t_12 = 0; __pyx_t_16 = 0;

#line 514 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 514 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;

#line 514 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;

#line 514 "miniparla/runtime.pyx"
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_8, &__pyx_t_12, &__pyx_t_16);

#line 514 "miniparla/runtime.pyx"
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_4, &__pyx_t_10, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_10, &__pyx_t_9);

#line 514 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_4);

#line 514 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_10);

#line 514 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_9);

#line 514 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_8);

#line 514 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_12);

#line 514 "miniparla/runtime.pyx"
          __Pyx_XGOTREF(__pyx_t_16);

#line 514 "miniparla/runtime.pyx"
          __pyx_t_20 = __pyx_lineno; __pyx_t_23 = __pyx_clineno; __pyx_t_24 = __pyx_filename;

#line 514 "miniparla/runtime.pyx"
          {

#line 514 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_v_e);

#line 514 "miniparla/runtime.pyx"
            __pyx_v_e = NULL;

#line 514 "miniparla/runtime.pyx"
          }

#line 514 "miniparla/runtime.pyx"
          if (PY_MAJOR_VERSION >= 3) {

#line 514 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_8);

#line 514 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_12);

#line 514 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_16);

#line 514 "miniparla/runtime.pyx"
            __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_12, __pyx_t_16);

#line 514 "miniparla/runtime.pyx"
          }

#line 514 "miniparla/runtime.pyx"
          __Pyx_XGIVEREF(__pyx_t_4);

#line 514 "miniparla/runtime.pyx"
          __Pyx_XGIVEREF(__pyx_t_10);

#line 514 "miniparla/runtime.pyx"
          __Pyx_XGIVEREF(__pyx_t_9);

#line 514 "miniparla/runtime.pyx"
          __Pyx_ErrRestore(__pyx_t_4, __pyx_t_10, __pyx_t_9);

#line 514 "miniparla/runtime.pyx"
          __pyx_t_4 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_8 = 0; __pyx_t_12 = 0; __pyx_t_16 = 0;

#line 514 "miniparla/runtime.pyx"
          __pyx_lineno = __pyx_t_20; __pyx_clineno = __pyx_t_23; __pyx_filename = __pyx_t_24;

#line 514 "miniparla/runtime.pyx"
          goto __pyx_L5_except_error;

#line 514 "miniparla/runtime.pyx"
        }

#line 514 "miniparla/runtime.pyx"
      }

#line 514 "miniparla/runtime.pyx"
    }

#line 514 "miniparla/runtime.pyx"
    goto __pyx_L5_except_error;

#line 514 "miniparla/runtime.pyx"
    __pyx_L5_except_error:;

    /* "miniparla/runtime.pyx":490
 * 
 *     def run(self):
 *         try:             # <<<<<<<<<<<<<<
 * 
 *             with self:
 */

#line 490 "miniparla/runtime.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 490 "miniparla/runtime.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 490 "miniparla/runtime.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 490 "miniparla/runtime.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 490 "miniparla/runtime.pyx"
    goto __pyx_L1_error;

#line 490 "miniparla/runtime.pyx"
    __pyx_L8_try_end:;

#line 490 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":489
 *             self.task = None
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         try:
 * 
 */

#line 489 "miniparla/runtime.pyx"


#line 489 "miniparla/runtime.pyx"
  /* function exit code */

#line 489 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 489 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 489 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 489 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 489 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 489 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 489 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_13);

#line 489 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_21);

#line 489 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_22);

#line 489 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.WorkerThread.run", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 489 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 489 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 489 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_e);

#line 489 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 489 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 489 "miniparla/runtime.pyx"
  return __pyx_r;

#line 489 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":518
 *             raise e
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         super().stop()
 *         #print("Stopping Thread", self.index, flush=True)
 */

#line 518 "miniparla/runtime.pyx"


#line 518 "miniparla/runtime.pyx"
/* Python wrapper */

#line 518 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_11stop(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_12WorkerThread_11stop = 
#line 518 "miniparla/runtime.pyx"
{"stop", (PyCFunction)__pyx_pw_9miniparla_7runtime_12WorkerThread_11stop, METH_O, 0};

#line 518 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_12WorkerThread_11stop(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 518 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 518 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 518 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = 
#line 518 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_12WorkerThread_10stop(__pyx_self, ((PyObject *)__pyx_v_self));

#line 518 "miniparla/runtime.pyx"


#line 518 "miniparla/runtime.pyx"
  /* function exit code */

#line 518 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 518 "miniparla/runtime.pyx"
  return __pyx_r;

#line 518 "miniparla/runtime.pyx"
}

#line 518 "miniparla/runtime.pyx"


#line 518 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_12WorkerThread_10stop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 518 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 518 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 518 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 518 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 518 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 518 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 518 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 518 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 518 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("stop", 0);

  /* "miniparla/runtime.pyx":519
 * 
 *     def stop(self):
 *         super().stop()             # <<<<<<<<<<<<<<
 *         #print("Stopping Thread", self.index, flush=True)
 * 
 */

#line 519 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_CyFunction_GetClassObj(__pyx_self);

#line 519 "miniparla/runtime.pyx"
  if (!__pyx_t_2) { PyErr_SetString(PyExc_SystemError, "super(): empty __class__ cell"); __PYX_ERR(0, 519, __pyx_L1_error) }

#line 519 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_2);

#line 519 "miniparla/runtime.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 519, __pyx_L1_error)

#line 519 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 519 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 519 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 519 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 519 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_self);

#line 519 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);

#line 519 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 519 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L1_error)

#line 519 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 519 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 519 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 519, __pyx_L1_error)

#line 519 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 519 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 519 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 519 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 519 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 519 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 519 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 519 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 519 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 519 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 519 "miniparla/runtime.pyx"
    }

#line 519 "miniparla/runtime.pyx"
  }

#line 519 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 519 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 519 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)

#line 519 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 519 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 519 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":518
 *             raise e
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         super().stop()
 *         #print("Stopping Thread", self.index, flush=True)
 */

#line 518 "miniparla/runtime.pyx"


#line 518 "miniparla/runtime.pyx"
  /* function exit code */

#line 518 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 518 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 518 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 518 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 518 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 518 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 518 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.WorkerThread.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 518 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 518 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 518 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 518 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 518 "miniparla/runtime.pyx"
  return __pyx_r;

#line 518 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":525
 * class TaskDict:
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.__dict = {}
 */

#line 525 "miniparla/runtime.pyx"


#line 525 "miniparla/runtime.pyx"
/* Python wrapper */

#line 525 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_8TaskDict_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_8TaskDict_1__init__ = 
#line 525 "miniparla/runtime.pyx"
{"__init__", (PyCFunction)__pyx_pw_9miniparla_7runtime_8TaskDict_1__init__, METH_O, 0};

#line 525 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_8TaskDict_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 525 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 525 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 525 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_r = 
#line 525 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_8TaskDict___init__(__pyx_self, ((PyObject *)__pyx_v_self));

#line 525 "miniparla/runtime.pyx"


#line 525 "miniparla/runtime.pyx"
  /* function exit code */

#line 525 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 525 "miniparla/runtime.pyx"
  return __pyx_r;

#line 525 "miniparla/runtime.pyx"
}

#line 525 "miniparla/runtime.pyx"


#line 525 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_8TaskDict___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 525 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 525 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 525 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 525 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 525 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 525 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 525 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 525 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 525 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 525 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 525 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "miniparla/runtime.pyx":527
 *     def __init__(self):
 * 
 *         self.__dict = {}             # <<<<<<<<<<<<<<
 *         self.__mutex = threading.Condition(threading.Lock())
 * 
 */

#line 527 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)

#line 527 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 527 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_TaskDict__dict, __pyx_t_1) < 0) __PYX_ERR(0, 527, __pyx_L1_error)

#line 527 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":528
 * 
 *         self.__dict = {}
 *         self.__mutex = threading.Condition(threading.Lock())             # <<<<<<<<<<<<<<
 * 
 *     def add(self, task):
 */

#line 528 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_threading); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)

#line 528 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 528 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Condition); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)

#line 528 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 528 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 528 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_threading); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)

#line 528 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 528 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Lock); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 528, __pyx_L1_error)

#line 528 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 528 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 528 "miniparla/runtime.pyx"
  __pyx_t_4 = NULL;

#line 528 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 528 "miniparla/runtime.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);

#line 528 "miniparla/runtime.pyx"
    if (likely(__pyx_t_4)) {

#line 528 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 528 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 528 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 528 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 528 "miniparla/runtime.pyx"
    }

#line 528 "miniparla/runtime.pyx"
  }

#line 528 "miniparla/runtime.pyx"
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);

#line 528 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 528 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)

#line 528 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 528 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 528 "miniparla/runtime.pyx"
  __pyx_t_5 = NULL;

#line 528 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 528 "miniparla/runtime.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 528 "miniparla/runtime.pyx"
    if (likely(__pyx_t_5)) {

#line 528 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 528 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 528 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 528 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 528 "miniparla/runtime.pyx"
    }

#line 528 "miniparla/runtime.pyx"
  }

#line 528 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);

#line 528 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 528 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 528 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)

#line 528 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 528 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 528 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_TaskDict__mutex, __pyx_t_1) < 0) __PYX_ERR(0, 528, __pyx_L1_error)

#line 528 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":525
 * class TaskDict:
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.__dict = {}
 */

#line 525 "miniparla/runtime.pyx"


#line 525 "miniparla/runtime.pyx"
  /* function exit code */

#line 525 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 525 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 525 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 525 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 525 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 525 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 525 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 525 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 525 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskDict.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 525 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 525 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 525 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 525 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 525 "miniparla/runtime.pyx"
  return __pyx_r;

#line 525 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":530
 *         self.__mutex = threading.Condition(threading.Lock())
 * 
 *     def add(self, task):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             self.__dict[task.id] = task
 */

#line 530 "miniparla/runtime.pyx"


#line 530 "miniparla/runtime.pyx"
/* Python wrapper */

#line 530 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_8TaskDict_3add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_8TaskDict_3add = 
#line 530 "miniparla/runtime.pyx"
{"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_8TaskDict_3add, METH_VARARGS|METH_KEYWORDS, 0};

#line 530 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_8TaskDict_3add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 530 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_task = 0
#line 530 "miniparla/runtime.pyx"
;

#line 530 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 530 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 530 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 530 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 530 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 530 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("add (wrapper)", 0);

#line 530 "miniparla/runtime.pyx"
  {

#line 530 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_task_2,0};

#line 530 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 530 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 530 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 530 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 530 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 530 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 530 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 530 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 530 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 530 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 530 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 530 "miniparla/runtime.pyx"
      }

#line 530 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 530 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 530 "miniparla/runtime.pyx"
        case  0:

#line 530 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 530 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 530 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 530 "miniparla/runtime.pyx"
        case  1:

#line 530 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_task_2)) != 0)) kw_args--;

#line 530 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, 1); 
#line 530 "miniparla/runtime.pyx"
__PYX_ERR(0, 530, __pyx_L3_error)

#line 530 "miniparla/runtime.pyx"
        }

#line 530 "miniparla/runtime.pyx"
      }

#line 530 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 530 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(0, 530, __pyx_L3_error)

#line 530 "miniparla/runtime.pyx"
      }

#line 530 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 530 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 530 "miniparla/runtime.pyx"
    } else {

#line 530 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 530 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 530 "miniparla/runtime.pyx"
    }

#line 530 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 530 "miniparla/runtime.pyx"
    __pyx_v_task = values[1];

#line 530 "miniparla/runtime.pyx"
  }

#line 530 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 530 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 530 "miniparla/runtime.pyx"
__PYX_ERR(0, 530, __pyx_L3_error)

#line 530 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 530 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskDict.add", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 530 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 530 "miniparla/runtime.pyx"
  return NULL;

#line 530 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 530 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_8TaskDict_2add(__pyx_self, __pyx_v_self, __pyx_v_task);

#line 530 "miniparla/runtime.pyx"


#line 530 "miniparla/runtime.pyx"
  /* function exit code */

#line 530 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 530 "miniparla/runtime.pyx"
  return __pyx_r;

#line 530 "miniparla/runtime.pyx"
}

#line 530 "miniparla/runtime.pyx"


#line 530 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_8TaskDict_2add(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task) {

#line 530 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 530 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 530 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 530 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 530 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 530 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 530 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 530 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 530 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 530 "miniparla/runtime.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 530 "miniparla/runtime.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 530 "miniparla/runtime.pyx"
  int __pyx_t_10;

#line 530 "miniparla/runtime.pyx"
  int __pyx_t_11;

#line 530 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 530 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 530 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 530 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("add", 0);

  /* "miniparla/runtime.pyx":531
 * 
 *     def add(self, task):
 *         with self.__mutex:             # <<<<<<<<<<<<<<
 *             self.__dict[task.id] = task
 * 
 */

#line 531 "miniparla/runtime.pyx"
  /*with:*/ {

#line 531 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TaskDict__mutex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)

#line 531 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 531 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)

#line 531 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 531 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 531, __pyx_L3_error)

#line 531 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 531 "miniparla/runtime.pyx"
    __pyx_t_5 = NULL;

#line 531 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 531 "miniparla/runtime.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 531 "miniparla/runtime.pyx"
      if (likely(__pyx_t_5)) {

#line 531 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 531 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 531 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 531 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 531 "miniparla/runtime.pyx"
      }

#line 531 "miniparla/runtime.pyx"
    }

#line 531 "miniparla/runtime.pyx"
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 531 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 531 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 531, __pyx_L3_error)

#line 531 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 531 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 531 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 531 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 531 "miniparla/runtime.pyx"
    /*try:*/ {

#line 531 "miniparla/runtime.pyx"
      {

#line 531 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_declare

#line 531 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_assign

#line 531 "miniparla/runtime.pyx"
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);

#line 531 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_6);

#line 531 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_7);

#line 531 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_8);

#line 531 "miniparla/runtime.pyx"
        /*try:*/ {

          /* "miniparla/runtime.pyx":532
 *     def add(self, task):
 *         with self.__mutex:
 *             self.__dict[task.id] = task             # <<<<<<<<<<<<<<
 * 
 *     def get(self, task_inner):
 */

#line 532 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TaskDict__dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L7_error)

#line 532 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 532 "miniparla/runtime.pyx"
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_task, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L7_error)

#line 532 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 532 "miniparla/runtime.pyx"
          if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_t_3, __pyx_v_task) < 0)) __PYX_ERR(0, 532, __pyx_L7_error)

#line 532 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 532 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "miniparla/runtime.pyx":531
 * 
 *     def add(self, task):
 *         with self.__mutex:             # <<<<<<<<<<<<<<
 *             self.__dict[task.id] = task
 * 
 */

#line 531 "miniparla/runtime.pyx"
        }

#line 531 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 531 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 531 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 531 "miniparla/runtime.pyx"
        goto __pyx_L12_try_end;

#line 531 "miniparla/runtime.pyx"
        __pyx_L7_error:;

#line 531 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 531 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 531 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 531 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 531 "miniparla/runtime.pyx"
        /*except:*/ {

#line 531 "miniparla/runtime.pyx"
          __Pyx_AddTraceback("miniparla.runtime.TaskDict.add", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 531 "miniparla/runtime.pyx"
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_4) < 0) __PYX_ERR(0, 531, __pyx_L9_except_error)

#line 531 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 531 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 531 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 531 "miniparla/runtime.pyx"
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 531, __pyx_L9_except_error)

#line 531 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 531 "miniparla/runtime.pyx"
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL);

#line 531 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 531 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 531 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 531, __pyx_L9_except_error)

#line 531 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 531 "miniparla/runtime.pyx"
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9);

#line 531 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 531 "miniparla/runtime.pyx"
          if (__pyx_t_10 < 0) __PYX_ERR(0, 531, __pyx_L9_except_error)

#line 531 "miniparla/runtime.pyx"
          __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);

#line 531 "miniparla/runtime.pyx"
          if (__pyx_t_11) {

#line 531 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_3);

#line 531 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_1);

#line 531 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_4);

#line 531 "miniparla/runtime.pyx"
            __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_1, __pyx_t_4);
            __pyx_t_3 = 0; __pyx_t_1 = 0; __pyx_t_4 = 0; 
#line 531 "miniparla/runtime.pyx"


#line 531 "miniparla/runtime.pyx"
            __PYX_ERR(0, 531, __pyx_L9_except_error)

#line 531 "miniparla/runtime.pyx"
          }

#line 531 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 531 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 531 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 531 "miniparla/runtime.pyx"
          goto __pyx_L8_exception_handled;

#line 531 "miniparla/runtime.pyx"
        }

#line 531 "miniparla/runtime.pyx"
        __pyx_L9_except_error:;

#line 531 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 531 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 531 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 531 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 531 "miniparla/runtime.pyx"
        goto __pyx_L1_error;

#line 531 "miniparla/runtime.pyx"
        __pyx_L8_exception_handled:;

#line 531 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 531 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 531 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 531 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 531 "miniparla/runtime.pyx"
        __pyx_L12_try_end:;

#line 531 "miniparla/runtime.pyx"
      }

#line 531 "miniparla/runtime.pyx"
    }

#line 531 "miniparla/runtime.pyx"
    /*finally:*/ {

#line 531 "miniparla/runtime.pyx"
      /*normal exit:*/{

#line 531 "miniparla/runtime.pyx"
        if (__pyx_t_2) {

#line 531 "miniparla/runtime.pyx"
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL);

#line 531 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 531 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 531, __pyx_L1_error)

#line 531 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 531 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 531 "miniparla/runtime.pyx"
        }

#line 531 "miniparla/runtime.pyx"
        goto __pyx_L6;

#line 531 "miniparla/runtime.pyx"
      }

#line 531 "miniparla/runtime.pyx"
      __pyx_L6:;

#line 531 "miniparla/runtime.pyx"
    }

#line 531 "miniparla/runtime.pyx"
    goto __pyx_L16;

#line 531 "miniparla/runtime.pyx"
    __pyx_L3_error:;

#line 531 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 531 "miniparla/runtime.pyx"
    goto __pyx_L1_error;

#line 531 "miniparla/runtime.pyx"
    __pyx_L16:;

#line 531 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":530
 *         self.__mutex = threading.Condition(threading.Lock())
 * 
 *     def add(self, task):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             self.__dict[task.id] = task
 */

#line 530 "miniparla/runtime.pyx"


#line 530 "miniparla/runtime.pyx"
  /* function exit code */

#line 530 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 530 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 530 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 530 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 530 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 530 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 530 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 530 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskDict.add", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 530 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 530 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 530 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 530 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 530 "miniparla/runtime.pyx"
  return __pyx_r;

#line 530 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":534
 *             self.__dict[task.id] = task
 * 
 *     def get(self, task_inner):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             return self.__dict.get(task_inner.id, None)
 */

#line 534 "miniparla/runtime.pyx"


#line 534 "miniparla/runtime.pyx"
/* Python wrapper */

#line 534 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_8TaskDict_5get(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_8TaskDict_5get = 
#line 534 "miniparla/runtime.pyx"
{"get", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_8TaskDict_5get, METH_VARARGS|METH_KEYWORDS, 0};

#line 534 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_8TaskDict_5get(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 534 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_task_inner = 0
#line 534 "miniparla/runtime.pyx"
;

#line 534 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 534 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 534 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 534 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 534 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get (wrapper)", 0);

#line 534 "miniparla/runtime.pyx"
  {

#line 534 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_task_inner,0};

#line 534 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 534 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 534 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 534 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 534 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 534 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 534 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 534 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 534 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 534 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 534 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 534 "miniparla/runtime.pyx"
      }

#line 534 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 534 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 534 "miniparla/runtime.pyx"
        case  0:

#line 534 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 534 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 534 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 534 "miniparla/runtime.pyx"
        case  1:

#line 534 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_task_inner)) != 0)) kw_args--;

#line 534 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get", 1, 2, 2, 1); 
#line 534 "miniparla/runtime.pyx"
__PYX_ERR(0, 534, __pyx_L3_error)

#line 534 "miniparla/runtime.pyx"
        }

#line 534 "miniparla/runtime.pyx"
      }

#line 534 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 534 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get") < 0)) __PYX_ERR(0, 534, __pyx_L3_error)

#line 534 "miniparla/runtime.pyx"
      }

#line 534 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 534 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 534 "miniparla/runtime.pyx"
    } else {

#line 534 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 534 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 534 "miniparla/runtime.pyx"
    }

#line 534 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 534 "miniparla/runtime.pyx"
    __pyx_v_task_inner = values[1];

#line 534 "miniparla/runtime.pyx"
  }

#line 534 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 534 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 534 "miniparla/runtime.pyx"
__PYX_ERR(0, 534, __pyx_L3_error)

#line 534 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 534 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskDict.get", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 534 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 534 "miniparla/runtime.pyx"
  return NULL;

#line 534 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 534 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_8TaskDict_4get(__pyx_self, __pyx_v_self, __pyx_v_task_inner);

#line 534 "miniparla/runtime.pyx"


#line 534 "miniparla/runtime.pyx"
  /* function exit code */

#line 534 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 534 "miniparla/runtime.pyx"
  return __pyx_r;

#line 534 "miniparla/runtime.pyx"
}

#line 534 "miniparla/runtime.pyx"


#line 534 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_8TaskDict_4get(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task_inner) {

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 534 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 534 "miniparla/runtime.pyx"
  int __pyx_t_9;

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 534 "miniparla/runtime.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 534 "miniparla/runtime.pyx"
  int __pyx_t_12;

#line 534 "miniparla/runtime.pyx"
  int __pyx_t_13;

#line 534 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 534 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 534 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 534 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get", 0);

  /* "miniparla/runtime.pyx":535
 * 
 *     def get(self, task_inner):
 *         with self.__mutex:             # <<<<<<<<<<<<<<
 *             return self.__dict.get(task_inner.id, None)
 * 
 */

#line 535 "miniparla/runtime.pyx"
  /*with:*/ {

#line 535 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TaskDict__mutex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)

#line 535 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 535 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 535, __pyx_L1_error)

#line 535 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 535 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 535, __pyx_L3_error)

#line 535 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 535 "miniparla/runtime.pyx"
    __pyx_t_5 = NULL;

#line 535 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 535 "miniparla/runtime.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 535 "miniparla/runtime.pyx"
      if (likely(__pyx_t_5)) {

#line 535 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 535 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 535 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 535 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 535 "miniparla/runtime.pyx"
      }

#line 535 "miniparla/runtime.pyx"
    }

#line 535 "miniparla/runtime.pyx"
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 535 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 535 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L3_error)

#line 535 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 535 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 535 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 535 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 535 "miniparla/runtime.pyx"
    /*try:*/ {

#line 535 "miniparla/runtime.pyx"
      {

#line 535 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_declare

#line 535 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_assign

#line 535 "miniparla/runtime.pyx"
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_6);

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_7);

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_8);

#line 535 "miniparla/runtime.pyx"
        /*try:*/ {

          /* "miniparla/runtime.pyx":536
 *     def get(self, task_inner):
 *         with self.__mutex:
 *             return self.__dict.get(task_inner.id, None)             # <<<<<<<<<<<<<<
 * 
 *     def remove(self, task):
 */

#line 536 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_r);

#line 536 "miniparla/runtime.pyx"
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TaskDict__dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 536, __pyx_L7_error)

#line 536 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 536 "miniparla/runtime.pyx"
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 536, __pyx_L7_error)

#line 536 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 536 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 536 "miniparla/runtime.pyx"
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_task_inner, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 536, __pyx_L7_error)

#line 536 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 536 "miniparla/runtime.pyx"
          __pyx_t_5 = NULL;

#line 536 "miniparla/runtime.pyx"
          __pyx_t_9 = 0;

#line 536 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 536 "miniparla/runtime.pyx"
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 536 "miniparla/runtime.pyx"
            if (likely(__pyx_t_5)) {

#line 536 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 536 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_5);

#line 536 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 536 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_4, function);

#line 536 "miniparla/runtime.pyx"
              __pyx_t_9 = 1;

#line 536 "miniparla/runtime.pyx"
            }

#line 536 "miniparla/runtime.pyx"
          }

#line 536 "miniparla/runtime.pyx"
          #if CYTHON_FAST_PYCALL

#line 536 "miniparla/runtime.pyx"
          if (PyFunction_Check(__pyx_t_4)) {

#line 536 "miniparla/runtime.pyx"
            PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, Py_None};

#line 536 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L7_error)

#line 536 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 536 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 536 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 536 "miniparla/runtime.pyx"
          } else

#line 536 "miniparla/runtime.pyx"
          #endif

#line 536 "miniparla/runtime.pyx"
          #if CYTHON_FAST_PYCCALL

#line 536 "miniparla/runtime.pyx"
          if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {

#line 536 "miniparla/runtime.pyx"
            PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, Py_None};

#line 536 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L7_error)

#line 536 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 536 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 536 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 536 "miniparla/runtime.pyx"
          } else

#line 536 "miniparla/runtime.pyx"
          #endif

#line 536 "miniparla/runtime.pyx"
          {

#line 536 "miniparla/runtime.pyx"
            __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 536, __pyx_L7_error)

#line 536 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_10);

#line 536 "miniparla/runtime.pyx"
            if (__pyx_t_5) {

#line 536 "miniparla/runtime.pyx"
              __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 536 "miniparla/runtime.pyx"
            }

#line 536 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_3);

#line 536 "miniparla/runtime.pyx"
            PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_3);

#line 536 "miniparla/runtime.pyx"
            __Pyx_INCREF(Py_None);

#line 536 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(Py_None);

#line 536 "miniparla/runtime.pyx"
            PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, Py_None);

#line 536 "miniparla/runtime.pyx"
            __pyx_t_3 = 0;

#line 536 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L7_error)

#line 536 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 536 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 536 "miniparla/runtime.pyx"
          }

#line 536 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 536 "miniparla/runtime.pyx"
          __pyx_r = __pyx_t_1;

#line 536 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

#line 536 "miniparla/runtime.pyx"
          goto __pyx_L11_try_return;

          /* "miniparla/runtime.pyx":535
 * 
 *     def get(self, task_inner):
 *         with self.__mutex:             # <<<<<<<<<<<<<<
 *             return self.__dict.get(task_inner.id, None)
 * 
 */

#line 535 "miniparla/runtime.pyx"
        }

#line 535 "miniparla/runtime.pyx"
        __pyx_L7_error:;

#line 535 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 535 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 535 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 535 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 535 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 535 "miniparla/runtime.pyx"
        /*except:*/ {

#line 535 "miniparla/runtime.pyx"
          __Pyx_AddTraceback("miniparla.runtime.TaskDict.get", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 535 "miniparla/runtime.pyx"
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_4, &__pyx_t_10) < 0) __PYX_ERR(0, 535, __pyx_L9_except_error)

#line 535 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 535 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 535 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_10);

#line 535 "miniparla/runtime.pyx"
          __pyx_t_3 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L9_except_error)

#line 535 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 535 "miniparla/runtime.pyx"
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL);

#line 535 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 535 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 535 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 535, __pyx_L9_except_error)

#line 535 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_11);

#line 535 "miniparla/runtime.pyx"
          __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_11);

#line 535 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 535 "miniparla/runtime.pyx"
          if (__pyx_t_12 < 0) __PYX_ERR(0, 535, __pyx_L9_except_error)

#line 535 "miniparla/runtime.pyx"
          __pyx_t_13 = ((!(__pyx_t_12 != 0)) != 0);

#line 535 "miniparla/runtime.pyx"
          if (__pyx_t_13) {

#line 535 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_1);

#line 535 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_4);

#line 535 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_10);

#line 535 "miniparla/runtime.pyx"
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_4, __pyx_t_10);
            __pyx_t_1 = 0; __pyx_t_4 = 0; __pyx_t_10 = 0; 
#line 535 "miniparla/runtime.pyx"


#line 535 "miniparla/runtime.pyx"
            __PYX_ERR(0, 535, __pyx_L9_except_error)

#line 535 "miniparla/runtime.pyx"
          }

#line 535 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 535 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 535 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 535 "miniparla/runtime.pyx"
          goto __pyx_L8_exception_handled;

#line 535 "miniparla/runtime.pyx"
        }

#line 535 "miniparla/runtime.pyx"
        __pyx_L9_except_error:;

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 535 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 535 "miniparla/runtime.pyx"
        goto __pyx_L1_error;

#line 535 "miniparla/runtime.pyx"
        __pyx_L11_try_return:;

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 535 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 535 "miniparla/runtime.pyx"
        goto __pyx_L4_return;

#line 535 "miniparla/runtime.pyx"
        __pyx_L8_exception_handled:;

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 535 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 535 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 535 "miniparla/runtime.pyx"
      }

#line 535 "miniparla/runtime.pyx"
    }

#line 535 "miniparla/runtime.pyx"
    /*finally:*/ {

#line 535 "miniparla/runtime.pyx"
      /*normal exit:*/{

#line 535 "miniparla/runtime.pyx"
        if (__pyx_t_2) {

#line 535 "miniparla/runtime.pyx"
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL);

#line 535 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 535 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 535, __pyx_L1_error)

#line 535 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 535 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 535 "miniparla/runtime.pyx"
        }

#line 535 "miniparla/runtime.pyx"
        goto __pyx_L6;

#line 535 "miniparla/runtime.pyx"
      }

#line 535 "miniparla/runtime.pyx"
      __pyx_L4_return: {

#line 535 "miniparla/runtime.pyx"
        __pyx_t_8 = __pyx_r;

#line 535 "miniparla/runtime.pyx"
        __pyx_r = 0;

#line 535 "miniparla/runtime.pyx"
        if (__pyx_t_2) {

#line 535 "miniparla/runtime.pyx"
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL);

#line 535 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 535 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 535, __pyx_L1_error)

#line 535 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 535 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 535 "miniparla/runtime.pyx"
        }

#line 535 "miniparla/runtime.pyx"
        __pyx_r = __pyx_t_8;

#line 535 "miniparla/runtime.pyx"
        __pyx_t_8 = 0;

#line 535 "miniparla/runtime.pyx"
        goto __pyx_L0;

#line 535 "miniparla/runtime.pyx"
      }

#line 535 "miniparla/runtime.pyx"
      __pyx_L6:;

#line 535 "miniparla/runtime.pyx"
    }

#line 535 "miniparla/runtime.pyx"
    goto __pyx_L16;

#line 535 "miniparla/runtime.pyx"
    __pyx_L3_error:;

#line 535 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 535 "miniparla/runtime.pyx"
    goto __pyx_L1_error;

#line 535 "miniparla/runtime.pyx"
    __pyx_L16:;

#line 535 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":534
 *             self.__dict[task.id] = task
 * 
 *     def get(self, task_inner):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             return self.__dict.get(task_inner.id, None)
 */

#line 534 "miniparla/runtime.pyx"


#line 534 "miniparla/runtime.pyx"
  /* function exit code */

#line 534 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 534 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 534 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 534 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 534 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 534 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 534 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 534 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 534 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskDict.get", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 534 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 534 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 534 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 534 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 534 "miniparla/runtime.pyx"
  return __pyx_r;

#line 534 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":538
 *             return self.__dict.get(task_inner.id, None)
 * 
 *     def remove(self, task):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             del self.__dict[task.id]
 */

#line 538 "miniparla/runtime.pyx"


#line 538 "miniparla/runtime.pyx"
/* Python wrapper */

#line 538 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_8TaskDict_7remove(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_8TaskDict_7remove = 
#line 538 "miniparla/runtime.pyx"
{"remove", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_8TaskDict_7remove, METH_VARARGS|METH_KEYWORDS, 0};

#line 538 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_8TaskDict_7remove(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 538 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_task = 0
#line 538 "miniparla/runtime.pyx"
;

#line 538 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 538 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 538 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 538 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 538 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 538 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("remove (wrapper)", 0);

#line 538 "miniparla/runtime.pyx"
  {

#line 538 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_task_2,0};

#line 538 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 538 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 538 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 538 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 538 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 538 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 538 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 538 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 538 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 538 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 538 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 538 "miniparla/runtime.pyx"
      }

#line 538 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 538 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 538 "miniparla/runtime.pyx"
        case  0:

#line 538 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 538 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 538 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 538 "miniparla/runtime.pyx"
        case  1:

#line 538 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_task_2)) != 0)) kw_args--;

#line 538 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("remove", 1, 2, 2, 1); 
#line 538 "miniparla/runtime.pyx"
__PYX_ERR(0, 538, __pyx_L3_error)

#line 538 "miniparla/runtime.pyx"
        }

#line 538 "miniparla/runtime.pyx"
      }

#line 538 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 538 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "remove") < 0)) __PYX_ERR(0, 538, __pyx_L3_error)

#line 538 "miniparla/runtime.pyx"
      }

#line 538 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 538 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 538 "miniparla/runtime.pyx"
    } else {

#line 538 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 538 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 538 "miniparla/runtime.pyx"
    }

#line 538 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 538 "miniparla/runtime.pyx"
    __pyx_v_task = values[1];

#line 538 "miniparla/runtime.pyx"
  }

#line 538 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 538 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("remove", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 538 "miniparla/runtime.pyx"
__PYX_ERR(0, 538, __pyx_L3_error)

#line 538 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 538 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskDict.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 538 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 538 "miniparla/runtime.pyx"
  return NULL;

#line 538 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 538 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_8TaskDict_6remove(__pyx_self, __pyx_v_self, __pyx_v_task);

#line 538 "miniparla/runtime.pyx"


#line 538 "miniparla/runtime.pyx"
  /* function exit code */

#line 538 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 538 "miniparla/runtime.pyx"
  return __pyx_r;

#line 538 "miniparla/runtime.pyx"
}

#line 538 "miniparla/runtime.pyx"


#line 538 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_8TaskDict_6remove(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task) {

#line 538 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 538 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 538 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 538 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 538 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 538 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 538 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 538 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 538 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 538 "miniparla/runtime.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 538 "miniparla/runtime.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 538 "miniparla/runtime.pyx"
  int __pyx_t_10;

#line 538 "miniparla/runtime.pyx"
  int __pyx_t_11;

#line 538 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 538 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 538 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 538 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("remove", 0);

  /* "miniparla/runtime.pyx":539
 * 
 *     def remove(self, task):
 *         with self.__mutex:             # <<<<<<<<<<<<<<
 *             del self.__dict[task.id]
 * 
 */

#line 539 "miniparla/runtime.pyx"
  /*with:*/ {

#line 539 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TaskDict__mutex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)

#line 539 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 539 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)

#line 539 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 539 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 539, __pyx_L3_error)

#line 539 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 539 "miniparla/runtime.pyx"
    __pyx_t_5 = NULL;

#line 539 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 539 "miniparla/runtime.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 539 "miniparla/runtime.pyx"
      if (likely(__pyx_t_5)) {

#line 539 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 539 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 539 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 539 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 539 "miniparla/runtime.pyx"
      }

#line 539 "miniparla/runtime.pyx"
    }

#line 539 "miniparla/runtime.pyx"
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);

#line 539 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 539 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L3_error)

#line 539 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 539 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 539 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 539 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 539 "miniparla/runtime.pyx"
    /*try:*/ {

#line 539 "miniparla/runtime.pyx"
      {

#line 539 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_declare

#line 539 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_assign

#line 539 "miniparla/runtime.pyx"
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);

#line 539 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_6);

#line 539 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_7);

#line 539 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_8);

#line 539 "miniparla/runtime.pyx"
        /*try:*/ {

          /* "miniparla/runtime.pyx":540
 *     def remove(self, task):
 *         with self.__mutex:
 *             del self.__dict[task.id]             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 540 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_TaskDict__dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L7_error)

#line 540 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 540 "miniparla/runtime.pyx"
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_task, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 540, __pyx_L7_error)

#line 540 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 540 "miniparla/runtime.pyx"
          if (unlikely(PyObject_DelItem(__pyx_t_1, __pyx_t_3) < 0)) __PYX_ERR(0, 540, __pyx_L7_error)

#line 540 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 540 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "miniparla/runtime.pyx":539
 * 
 *     def remove(self, task):
 *         with self.__mutex:             # <<<<<<<<<<<<<<
 *             del self.__dict[task.id]
 * 
 */

#line 539 "miniparla/runtime.pyx"
        }

#line 539 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 539 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 539 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 539 "miniparla/runtime.pyx"
        goto __pyx_L12_try_end;

#line 539 "miniparla/runtime.pyx"
        __pyx_L7_error:;

#line 539 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 539 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 539 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 539 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 539 "miniparla/runtime.pyx"
        /*except:*/ {

#line 539 "miniparla/runtime.pyx"
          __Pyx_AddTraceback("miniparla.runtime.TaskDict.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 539 "miniparla/runtime.pyx"
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_4) < 0) __PYX_ERR(0, 539, __pyx_L9_except_error)

#line 539 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 539 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 539 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 539 "miniparla/runtime.pyx"
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 539, __pyx_L9_except_error)

#line 539 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 539 "miniparla/runtime.pyx"
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL);

#line 539 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 539 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 539 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 539, __pyx_L9_except_error)

#line 539 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 539 "miniparla/runtime.pyx"
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9);

#line 539 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 539 "miniparla/runtime.pyx"
          if (__pyx_t_10 < 0) __PYX_ERR(0, 539, __pyx_L9_except_error)

#line 539 "miniparla/runtime.pyx"
          __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);

#line 539 "miniparla/runtime.pyx"
          if (__pyx_t_11) {

#line 539 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_3);

#line 539 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_1);

#line 539 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_4);

#line 539 "miniparla/runtime.pyx"
            __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_1, __pyx_t_4);
            __pyx_t_3 = 0; __pyx_t_1 = 0; __pyx_t_4 = 0; 
#line 539 "miniparla/runtime.pyx"


#line 539 "miniparla/runtime.pyx"
            __PYX_ERR(0, 539, __pyx_L9_except_error)

#line 539 "miniparla/runtime.pyx"
          }

#line 539 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 539 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 539 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 539 "miniparla/runtime.pyx"
          goto __pyx_L8_exception_handled;

#line 539 "miniparla/runtime.pyx"
        }

#line 539 "miniparla/runtime.pyx"
        __pyx_L9_except_error:;

#line 539 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 539 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 539 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 539 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 539 "miniparla/runtime.pyx"
        goto __pyx_L1_error;

#line 539 "miniparla/runtime.pyx"
        __pyx_L8_exception_handled:;

#line 539 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 539 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 539 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 539 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 539 "miniparla/runtime.pyx"
        __pyx_L12_try_end:;

#line 539 "miniparla/runtime.pyx"
      }

#line 539 "miniparla/runtime.pyx"
    }

#line 539 "miniparla/runtime.pyx"
    /*finally:*/ {

#line 539 "miniparla/runtime.pyx"
      /*normal exit:*/{

#line 539 "miniparla/runtime.pyx"
        if (__pyx_t_2) {

#line 539 "miniparla/runtime.pyx"
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL);

#line 539 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 539 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 539, __pyx_L1_error)

#line 539 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 539 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 539 "miniparla/runtime.pyx"
        }

#line 539 "miniparla/runtime.pyx"
        goto __pyx_L6;

#line 539 "miniparla/runtime.pyx"
      }

#line 539 "miniparla/runtime.pyx"
      __pyx_L6:;

#line 539 "miniparla/runtime.pyx"
    }

#line 539 "miniparla/runtime.pyx"
    goto __pyx_L16;

#line 539 "miniparla/runtime.pyx"
    __pyx_L3_error:;

#line 539 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 539 "miniparla/runtime.pyx"
    goto __pyx_L1_error;

#line 539 "miniparla/runtime.pyx"
    __pyx_L16:;

#line 539 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":538
 *             return self.__dict.get(task_inner.id, None)
 * 
 *     def remove(self, task):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             del self.__dict[task.id]
 */

#line 538 "miniparla/runtime.pyx"


#line 538 "miniparla/runtime.pyx"
  /* function exit code */

#line 538 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 538 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 538 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 538 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 538 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 538 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 538 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 538 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.TaskDict.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 538 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 538 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 538 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 538 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 538 "miniparla/runtime.pyx"
  return __pyx_r;

#line 538 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":547
 *     cdef InnerScheduler* scheduler
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.scheduler = new InnerScheduler()
 * 
 */

#line 547 "miniparla/runtime.pyx"


#line 547 "miniparla/runtime.pyx"
/* Python wrapper */

#line 547 "miniparla/runtime.pyx"
static int __pyx_pw_9miniparla_7runtime_16PyInnerScheduler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 547 "miniparla/runtime.pyx"
static int __pyx_pw_9miniparla_7runtime_16PyInnerScheduler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 547 "miniparla/runtime.pyx"
  int __pyx_r;

#line 547 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 547 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 547 "miniparla/runtime.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 547 "miniparla/runtime.pyx"
}

#line 547 "miniparla/runtime.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 547 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler___cinit__(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 547 "miniparla/runtime.pyx"


#line 547 "miniparla/runtime.pyx"
  /* function exit code */

#line 547 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 547 "miniparla/runtime.pyx"
  return __pyx_r;

#line 547 "miniparla/runtime.pyx"
}

#line 547 "miniparla/runtime.pyx"


#line 547 "miniparla/runtime.pyx"
static int __pyx_pf_9miniparla_7runtime_16PyInnerScheduler___cinit__(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {

#line 547 "miniparla/runtime.pyx"
  int __pyx_r;

#line 547 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 547 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 547 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 547 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 547 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 547 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "miniparla/runtime.pyx":548
 * 
 *     def __cinit__(self):
 *         self.scheduler = new InnerScheduler()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, int num_threads, float max_resources):
 */

#line 548 "miniparla/runtime.pyx"
  try {

#line 548 "miniparla/runtime.pyx"
    __pyx_t_1 = new InnerScheduler();

#line 548 "miniparla/runtime.pyx"
  } catch(...) {

#line 548 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 548 "miniparla/runtime.pyx"
    __PYX_ERR(0, 548, __pyx_L1_error)

#line 548 "miniparla/runtime.pyx"
  }

#line 548 "miniparla/runtime.pyx"
  __pyx_v_self->scheduler = __pyx_t_1;

  /* "miniparla/runtime.pyx":547
 *     cdef InnerScheduler* scheduler
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.scheduler = new InnerScheduler()
 * 
 */

#line 547 "miniparla/runtime.pyx"


#line 547 "miniparla/runtime.pyx"
  /* function exit code */

#line 547 "miniparla/runtime.pyx"
  __pyx_r = 0;

#line 547 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 547 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 547 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 547 "miniparla/runtime.pyx"
  __pyx_r = -1;

#line 547 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 547 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 547 "miniparla/runtime.pyx"
  return __pyx_r;

#line 547 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":550
 *         self.scheduler = new InnerScheduler()
 * 
 *     def __init__(self, int num_threads, float max_resources):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef float c_resources = max_resources
 */

#line 550 "miniparla/runtime.pyx"


#line 550 "miniparla/runtime.pyx"
/* Python wrapper */

#line 550 "miniparla/runtime.pyx"
static int __pyx_pw_9miniparla_7runtime_16PyInnerScheduler_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 550 "miniparla/runtime.pyx"
static int __pyx_pw_9miniparla_7runtime_16PyInnerScheduler_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED int __pyx_v_num_threads
#line 550 "miniparla/runtime.pyx"
;
  float __pyx_v_max_resources
#line 550 "miniparla/runtime.pyx"
;

#line 550 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 550 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 550 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 550 "miniparla/runtime.pyx"
  int __pyx_r;

#line 550 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 550 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 550 "miniparla/runtime.pyx"
  {

#line 550 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num_threads,&__pyx_n_s_max_resources,0};

#line 550 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 550 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 550 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 550 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 550 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 550 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 550 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 550 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 550 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 550 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 550 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 550 "miniparla/runtime.pyx"
      }

#line 550 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 550 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 550 "miniparla/runtime.pyx"
        case  0:

#line 550 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_threads)) != 0)) kw_args--;
        else 
#line 550 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 550 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 550 "miniparla/runtime.pyx"
        case  1:

#line 550 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_resources)) != 0)) kw_args--;

#line 550 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); 
#line 550 "miniparla/runtime.pyx"
__PYX_ERR(0, 550, __pyx_L3_error)

#line 550 "miniparla/runtime.pyx"
        }

#line 550 "miniparla/runtime.pyx"
      }

#line 550 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 550 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 550, __pyx_L3_error)

#line 550 "miniparla/runtime.pyx"
      }

#line 550 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 550 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 550 "miniparla/runtime.pyx"
    } else {

#line 550 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 550 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 550 "miniparla/runtime.pyx"
    }

#line 550 "miniparla/runtime.pyx"
    __pyx_v_num_threads = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_num_threads == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 550, __pyx_L3_error)

#line 550 "miniparla/runtime.pyx"
    __pyx_v_max_resources = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_max_resources == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 550, __pyx_L3_error)

#line 550 "miniparla/runtime.pyx"
  }

#line 550 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 550 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 550 "miniparla/runtime.pyx"
__PYX_ERR(0, 550, __pyx_L3_error)

#line 550 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 550 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 550 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 550 "miniparla/runtime.pyx"
  return -1;

#line 550 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 550 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_2__init__(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self), __pyx_v_num_threads, __pyx_v_max_resources);

#line 550 "miniparla/runtime.pyx"


#line 550 "miniparla/runtime.pyx"
  /* function exit code */

#line 550 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 550 "miniparla/runtime.pyx"
  return __pyx_r;

#line 550 "miniparla/runtime.pyx"
}

#line 550 "miniparla/runtime.pyx"


#line 550 "miniparla/runtime.pyx"
static int __pyx_pf_9miniparla_7runtime_16PyInnerScheduler_2__init__(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, CYTHON_UNUSED int __pyx_v_num_threads, float __pyx_v_max_resources) {
  InnerScheduler *__pyx_v_s
#line 550 "miniparla/runtime.pyx"
;
  float __pyx_v_c_resources
#line 550 "miniparla/runtime.pyx"
;

#line 550 "miniparla/runtime.pyx"
  int __pyx_r;

#line 550 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 550 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 550 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 550 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 550 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 550 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "miniparla/runtime.pyx":551
 * 
 *     def __init__(self, int num_threads, float max_resources):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         cdef float c_resources = max_resources
 *         #with nogil:
 */

#line 551 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 551 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":552
 *     def __init__(self, int num_threads, float max_resources):
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef float c_resources = max_resources             # <<<<<<<<<<<<<<
 *         #with nogil:
 *         #    s.set_resources(c_resources)
 */

#line 552 "miniparla/runtime.pyx"
  __pyx_v_c_resources = __pyx_v_max_resources;

  /* "miniparla/runtime.pyx":556
 *         #    s.set_resources(c_resources)
 * 
 *         s.set_resources(c_resources)             # <<<<<<<<<<<<<<
 *         #self.scheduler.set_nthreads(0)
 * 
 */

#line 556 "miniparla/runtime.pyx"
  try {

#line 556 "miniparla/runtime.pyx"
    __pyx_v_s->set_resources(__pyx_v_c_resources);

#line 556 "miniparla/runtime.pyx"
  } catch(...) {

#line 556 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 556 "miniparla/runtime.pyx"
    __PYX_ERR(0, 556, __pyx_L1_error)

#line 556 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":550
 *         self.scheduler = new InnerScheduler()
 * 
 *     def __init__(self, int num_threads, float max_resources):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef float c_resources = max_resources
 */

#line 550 "miniparla/runtime.pyx"


#line 550 "miniparla/runtime.pyx"
  /* function exit code */

#line 550 "miniparla/runtime.pyx"
  __pyx_r = 0;

#line 550 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 550 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 550 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 550 "miniparla/runtime.pyx"
  __pyx_r = -1;

#line 550 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 550 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 550 "miniparla/runtime.pyx"
  return __pyx_r;

#line 550 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":559
 *         #self.scheduler.set_nthreads(0)
 * 
 *     def set_callback(self, obj):             # <<<<<<<<<<<<<<
 *         #print("Setting callback")
 *         #print("Setting function", obj)
 */

#line 559 "miniparla/runtime.pyx"


#line 559 "miniparla/runtime.pyx"
/* Python wrapper */

#line 559 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_5set_callback(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/

#line 559 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_5set_callback(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {

#line 559 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 559 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 559 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("set_callback (wrapper)", 0);
  __pyx_r = 
#line 559 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_4set_callback(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

#line 559 "miniparla/runtime.pyx"


#line 559 "miniparla/runtime.pyx"
  /* function exit code */

#line 559 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 559 "miniparla/runtime.pyx"
  return __pyx_r;

#line 559 "miniparla/runtime.pyx"
}

#line 559 "miniparla/runtime.pyx"


#line 559 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_4set_callback(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, PyObject *__pyx_v_obj) {
  callerfunc __pyx_v_c_f
#line 559 "miniparla/runtime.pyx"
;
  stopfunc __pyx_v_c_stop
#line 559 "miniparla/runtime.pyx"
;
  void *__pyx_v_c_i
#line 559 "miniparla/runtime.pyx"
;
  InnerScheduler *__pyx_v_s
#line 559 "miniparla/runtime.pyx"
;

#line 559 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 559 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 559 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 559 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 559 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 559 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 559 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("set_callback", 0);

  /* "miniparla/runtime.pyx":562
 *         #print("Setting callback")
 *         #print("Setting function", obj)
 *         cdef callerfunc c_f = <callerfunc> callback_add             # <<<<<<<<<<<<<<
 *         cdef stopfunc c_stop = <stopfunc> callback_stop
 *         cdef void* c_i = <void*> obj
 */

#line 562 "miniparla/runtime.pyx"
  __pyx_v_c_f = ((callerfunc)__pyx_f_9miniparla_7runtime_callback_add);

  /* "miniparla/runtime.pyx":563
 *         #print("Setting function", obj)
 *         cdef callerfunc c_f = <callerfunc> callback_add
 *         cdef stopfunc c_stop = <stopfunc> callback_stop             # <<<<<<<<<<<<<<
 *         cdef void* c_i = <void*> obj
 * 
 */

#line 563 "miniparla/runtime.pyx"
  __pyx_v_c_stop = ((stopfunc)__pyx_f_9miniparla_7runtime_callback_stop);

  /* "miniparla/runtime.pyx":564
 *         cdef callerfunc c_f = <callerfunc> callback_add
 *         cdef stopfunc c_stop = <stopfunc> callback_stop
 *         cdef void* c_i = <void*> obj             # <<<<<<<<<<<<<<
 * 
 *         cdef InnerScheduler* s = self.scheduler
 */

#line 564 "miniparla/runtime.pyx"
  __pyx_v_c_i = ((void *)__pyx_v_obj);

  /* "miniparla/runtime.pyx":566
 *         cdef void* c_i = <void*> obj
 * 
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 * 
 *         #with nogil:
 */

#line 566 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 566 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":571
 *         #    s.set_python_callback(c_f, c_stop, c_i)
 * 
 *         s.set_python_callback(c_f, c_stop, c_i)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 571 "miniparla/runtime.pyx"
  try {

#line 571 "miniparla/runtime.pyx"
    __pyx_v_s->set_python_callback(__pyx_v_c_f, __pyx_v_c_stop, __pyx_v_c_i);

#line 571 "miniparla/runtime.pyx"
  } catch(...) {

#line 571 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 571 "miniparla/runtime.pyx"
    __PYX_ERR(0, 571, __pyx_L1_error)

#line 571 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":559
 *         #self.scheduler.set_nthreads(0)
 * 
 *     def set_callback(self, obj):             # <<<<<<<<<<<<<<
 *         #print("Setting callback")
 *         #print("Setting function", obj)
 */

#line 559 "miniparla/runtime.pyx"


#line 559 "miniparla/runtime.pyx"
  /* function exit code */

#line 559 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 559 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 559 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 559 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.set_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 559 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 559 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 559 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 559 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 559 "miniparla/runtime.pyx"
  return __pyx_r;

#line 559 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":573
 *         s.set_python_callback(c_f, c_stop, c_i)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.scheduler
 * 
 */

#line 573 "miniparla/runtime.pyx"


#line 573 "miniparla/runtime.pyx"
/* Python wrapper */

#line 573 "miniparla/runtime.pyx"
static void __pyx_pw_9miniparla_7runtime_16PyInnerScheduler_7__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 573 "miniparla/runtime.pyx"
static void __pyx_pw_9miniparla_7runtime_16PyInnerScheduler_7__dealloc__(PyObject *__pyx_v_self) {

#line 573 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 573 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 573 "miniparla/runtime.pyx"
  __pyx_pf_9miniparla_7runtime_16PyInnerScheduler_6__dealloc__(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 573 "miniparla/runtime.pyx"


#line 573 "miniparla/runtime.pyx"
  /* function exit code */

#line 573 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 573 "miniparla/runtime.pyx"
}

#line 573 "miniparla/runtime.pyx"


#line 573 "miniparla/runtime.pyx"
static void __pyx_pf_9miniparla_7runtime_16PyInnerScheduler_6__dealloc__(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {

#line 573 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 573 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "miniparla/runtime.pyx":574
 * 
 *     def __dealloc__(self):
 *         del self.scheduler             # <<<<<<<<<<<<<<
 * 
 *     def run(self):
 */

#line 574 "miniparla/runtime.pyx"
  delete __pyx_v_self->scheduler;

  /* "miniparla/runtime.pyx":573
 *         s.set_python_callback(c_f, c_stop, c_i)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.scheduler
 * 
 */

#line 573 "miniparla/runtime.pyx"


#line 573 "miniparla/runtime.pyx"
  /* function exit code */

#line 573 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 573 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":576
 *         del self.scheduler
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 */

#line 576 "miniparla/runtime.pyx"


#line 576 "miniparla/runtime.pyx"
/* Python wrapper */

#line 576 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_9run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 576 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_9run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 576 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 576 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 576 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = 
#line 576 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_8run(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 576 "miniparla/runtime.pyx"


#line 576 "miniparla/runtime.pyx"
  /* function exit code */

#line 576 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 576 "miniparla/runtime.pyx"
  return __pyx_r;

#line 576 "miniparla/runtime.pyx"
}

#line 576 "miniparla/runtime.pyx"


#line 576 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_8run(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  InnerScheduler *__pyx_v_s
#line 576 "miniparla/runtime.pyx"
;

#line 576 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 576 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 576 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 576 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 576 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 576 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 576 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run", 0);

  /* "miniparla/runtime.pyx":577
 * 
 *     def run(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         with nogil:
 *             s.run()
 */

#line 577 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 577 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":578
 *     def run(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s.run()
 * 
 */

#line 578 "miniparla/runtime.pyx"
  {

#line 578 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 578 "miniparla/runtime.pyx"
      PyThreadState *_save;

#line 578 "miniparla/runtime.pyx"
      Py_UNBLOCK_THREADS

#line 578 "miniparla/runtime.pyx"
      __Pyx_FastGIL_Remember();

#line 578 "miniparla/runtime.pyx"
      #endif

#line 578 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":579
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 *             s.run()             # <<<<<<<<<<<<<<
 * 
 *     def stop(self):
 */

#line 579 "miniparla/runtime.pyx"
        try {

#line 579 "miniparla/runtime.pyx"
          __pyx_v_s->run();

#line 579 "miniparla/runtime.pyx"
        } catch(...) {

#line 579 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 579 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 579 "miniparla/runtime.pyx"
          #endif

#line 579 "miniparla/runtime.pyx"
          __Pyx_CppExn2PyErr();

#line 579 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 579 "miniparla/runtime.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 579 "miniparla/runtime.pyx"
          #endif

#line 579 "miniparla/runtime.pyx"
          __PYX_ERR(0, 579, __pyx_L4_error)

#line 579 "miniparla/runtime.pyx"
        }

#line 579 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":578
 *     def run(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s.run()
 * 
 */

#line 578 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 578 "miniparla/runtime.pyx"
        /*normal exit:*/{

#line 578 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 578 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 578 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 578 "miniparla/runtime.pyx"
          #endif

#line 578 "miniparla/runtime.pyx"
          goto __pyx_L5;

#line 578 "miniparla/runtime.pyx"
        }

#line 578 "miniparla/runtime.pyx"
        __pyx_L4_error: {

#line 578 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 578 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 578 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 578 "miniparla/runtime.pyx"
          #endif

#line 578 "miniparla/runtime.pyx"
          goto __pyx_L1_error;

#line 578 "miniparla/runtime.pyx"
        }

#line 578 "miniparla/runtime.pyx"
        __pyx_L5:;

#line 578 "miniparla/runtime.pyx"
      }

#line 578 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":576
 *         del self.scheduler
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 */

#line 576 "miniparla/runtime.pyx"


#line 576 "miniparla/runtime.pyx"
  /* function exit code */

#line 576 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 576 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 576 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 576 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.run", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 576 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 576 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 576 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 576 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 576 "miniparla/runtime.pyx"
  return __pyx_r;

#line 576 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":581
 *             s.run()
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 */

#line 581 "miniparla/runtime.pyx"


#line 581 "miniparla/runtime.pyx"
/* Python wrapper */

#line 581 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_11stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 581 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_11stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 581 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 581 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 581 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = 
#line 581 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_10stop(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 581 "miniparla/runtime.pyx"


#line 581 "miniparla/runtime.pyx"
  /* function exit code */

#line 581 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 581 "miniparla/runtime.pyx"
  return __pyx_r;

#line 581 "miniparla/runtime.pyx"
}

#line 581 "miniparla/runtime.pyx"


#line 581 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_10stop(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  InnerScheduler *__pyx_v_s
#line 581 "miniparla/runtime.pyx"
;

#line 581 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 581 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 581 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 581 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 581 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 581 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 581 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("stop", 0);

  /* "miniparla/runtime.pyx":582
 * 
 *     def stop(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         with nogil:
 *             s.stop()
 */

#line 582 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 582 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":583
 *     def stop(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s.stop()
 * 
 */

#line 583 "miniparla/runtime.pyx"
  {

#line 583 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 583 "miniparla/runtime.pyx"
      PyThreadState *_save;

#line 583 "miniparla/runtime.pyx"
      Py_UNBLOCK_THREADS

#line 583 "miniparla/runtime.pyx"
      __Pyx_FastGIL_Remember();

#line 583 "miniparla/runtime.pyx"
      #endif

#line 583 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":584
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 *             s.stop()             # <<<<<<<<<<<<<<
 * 
 *     def incr_active_tasks(self):
 */

#line 584 "miniparla/runtime.pyx"
        try {

#line 584 "miniparla/runtime.pyx"
          __pyx_v_s->stop();

#line 584 "miniparla/runtime.pyx"
        } catch(...) {

#line 584 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 584 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 584 "miniparla/runtime.pyx"
          #endif

#line 584 "miniparla/runtime.pyx"
          __Pyx_CppExn2PyErr();

#line 584 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 584 "miniparla/runtime.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 584 "miniparla/runtime.pyx"
          #endif

#line 584 "miniparla/runtime.pyx"
          __PYX_ERR(0, 584, __pyx_L4_error)

#line 584 "miniparla/runtime.pyx"
        }

#line 584 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":583
 *     def stop(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s.stop()
 * 
 */

#line 583 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 583 "miniparla/runtime.pyx"
        /*normal exit:*/{

#line 583 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 583 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 583 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 583 "miniparla/runtime.pyx"
          #endif

#line 583 "miniparla/runtime.pyx"
          goto __pyx_L5;

#line 583 "miniparla/runtime.pyx"
        }

#line 583 "miniparla/runtime.pyx"
        __pyx_L4_error: {

#line 583 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 583 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 583 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 583 "miniparla/runtime.pyx"
          #endif

#line 583 "miniparla/runtime.pyx"
          goto __pyx_L1_error;

#line 583 "miniparla/runtime.pyx"
        }

#line 583 "miniparla/runtime.pyx"
        __pyx_L5:;

#line 583 "miniparla/runtime.pyx"
      }

#line 583 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":581
 *             s.run()
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 */

#line 581 "miniparla/runtime.pyx"


#line 581 "miniparla/runtime.pyx"
  /* function exit code */

#line 581 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 581 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 581 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 581 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 581 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 581 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 581 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 581 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 581 "miniparla/runtime.pyx"
  return __pyx_r;

#line 581 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":586
 *             s.stop()
 * 
 *     def incr_active_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         # with nogil:
 */

#line 586 "miniparla/runtime.pyx"


#line 586 "miniparla/runtime.pyx"
/* Python wrapper */

#line 586 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_13incr_active_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 586 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_13incr_active_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 586 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 586 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 586 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_active_tasks (wrapper)", 0);
  __pyx_r = 
#line 586 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_12incr_active_tasks(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 586 "miniparla/runtime.pyx"


#line 586 "miniparla/runtime.pyx"
  /* function exit code */

#line 586 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 586 "miniparla/runtime.pyx"
  return __pyx_r;

#line 586 "miniparla/runtime.pyx"
}

#line 586 "miniparla/runtime.pyx"


#line 586 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_12incr_active_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  InnerScheduler *__pyx_v_s
#line 586 "miniparla/runtime.pyx"
;

#line 586 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 586 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 586 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 586 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 586 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 586 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 586 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_active_tasks", 0);

  /* "miniparla/runtime.pyx":587
 * 
 *     def incr_active_tasks(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         # with nogil:
 *             # s.incr_active_tasks()
 */

#line 587 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 587 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":590
 *         # with nogil:
 *             # s.incr_active_tasks()
 *         s.incr_active_tasks()             # <<<<<<<<<<<<<<
 * 
 *     def decr_active_tasks(self):
 */

#line 590 "miniparla/runtime.pyx"
  try {

#line 590 "miniparla/runtime.pyx"
    __pyx_v_s->incr_active_tasks();

#line 590 "miniparla/runtime.pyx"
  } catch(...) {

#line 590 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 590 "miniparla/runtime.pyx"
    __PYX_ERR(0, 590, __pyx_L1_error)

#line 590 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":586
 *             s.stop()
 * 
 *     def incr_active_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         # with nogil:
 */

#line 586 "miniparla/runtime.pyx"


#line 586 "miniparla/runtime.pyx"
  /* function exit code */

#line 586 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 586 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 586 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 586 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.incr_active_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 586 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 586 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 586 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 586 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 586 "miniparla/runtime.pyx"
  return __pyx_r;

#line 586 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":592
 *         s.incr_active_tasks()
 * 
 *     def decr_active_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         # with nogil:
 */

#line 592 "miniparla/runtime.pyx"


#line 592 "miniparla/runtime.pyx"
/* Python wrapper */

#line 592 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_15decr_active_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 592 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_15decr_active_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 592 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 592 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 592 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_active_tasks (wrapper)", 0);
  __pyx_r = 
#line 592 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_14decr_active_tasks(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 592 "miniparla/runtime.pyx"


#line 592 "miniparla/runtime.pyx"
  /* function exit code */

#line 592 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 592 "miniparla/runtime.pyx"
  return __pyx_r;

#line 592 "miniparla/runtime.pyx"
}

#line 592 "miniparla/runtime.pyx"


#line 592 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_14decr_active_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  InnerScheduler *__pyx_v_s
#line 592 "miniparla/runtime.pyx"
;

#line 592 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 592 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 592 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 592 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 592 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 592 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 592 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_active_tasks", 0);

  /* "miniparla/runtime.pyx":593
 * 
 *     def decr_active_tasks(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         # with nogil:
 *             # s.decr_active_tasks()
 */

#line 593 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 593 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":596
 *         # with nogil:
 *             # s.decr_active_tasks()
 *         s.decr_active_tasks()             # <<<<<<<<<<<<<<
 * 
 *     def incr_running_tasks(self):
 */

#line 596 "miniparla/runtime.pyx"
  try {

#line 596 "miniparla/runtime.pyx"
    __pyx_v_s->decr_active_tasks();

#line 596 "miniparla/runtime.pyx"
  } catch(...) {

#line 596 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 596 "miniparla/runtime.pyx"
    __PYX_ERR(0, 596, __pyx_L1_error)

#line 596 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":592
 *         s.incr_active_tasks()
 * 
 *     def decr_active_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         # with nogil:
 */

#line 592 "miniparla/runtime.pyx"


#line 592 "miniparla/runtime.pyx"
  /* function exit code */

#line 592 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 592 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 592 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 592 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.decr_active_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 592 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 592 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 592 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 592 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 592 "miniparla/runtime.pyx"
  return __pyx_r;

#line 592 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":598
 *         s.decr_active_tasks()
 * 
 *     def incr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         # with nogil:
 */

#line 598 "miniparla/runtime.pyx"


#line 598 "miniparla/runtime.pyx"
/* Python wrapper */

#line 598 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_17incr_running_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 598 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_17incr_running_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 598 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 598 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 598 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_running_tasks (wrapper)", 0);
  __pyx_r = 
#line 598 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_16incr_running_tasks(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 598 "miniparla/runtime.pyx"


#line 598 "miniparla/runtime.pyx"
  /* function exit code */

#line 598 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 598 "miniparla/runtime.pyx"
  return __pyx_r;

#line 598 "miniparla/runtime.pyx"
}

#line 598 "miniparla/runtime.pyx"


#line 598 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_16incr_running_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  InnerScheduler *__pyx_v_s
#line 598 "miniparla/runtime.pyx"
;

#line 598 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 598 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 598 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 598 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 598 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 598 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 598 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_running_tasks", 0);

  /* "miniparla/runtime.pyx":599
 * 
 *     def incr_running_tasks(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         # with nogil:
 *             # s.incr_running_tasks()
 */

#line 599 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 599 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":602
 *         # with nogil:
 *             # s.incr_running_tasks()
 *         s.incr_running_tasks()             # <<<<<<<<<<<<<<
 * 
 *     def decr_running_tasks(self):
 */

#line 602 "miniparla/runtime.pyx"
  try {

#line 602 "miniparla/runtime.pyx"
    __pyx_v_s->incr_running_tasks();

#line 602 "miniparla/runtime.pyx"
  } catch(...) {

#line 602 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 602 "miniparla/runtime.pyx"
    __PYX_ERR(0, 602, __pyx_L1_error)

#line 602 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":598
 *         s.decr_active_tasks()
 * 
 *     def incr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         # with nogil:
 */

#line 598 "miniparla/runtime.pyx"


#line 598 "miniparla/runtime.pyx"
  /* function exit code */

#line 598 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 598 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 598 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 598 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.incr_running_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 598 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 598 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 598 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 598 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 598 "miniparla/runtime.pyx"
  return __pyx_r;

#line 598 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":604
 *         s.incr_running_tasks()
 * 
 *     def decr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         #with nogil:
 */

#line 604 "miniparla/runtime.pyx"


#line 604 "miniparla/runtime.pyx"
/* Python wrapper */

#line 604 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_19decr_running_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 604 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_19decr_running_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 604 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 604 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 604 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_running_tasks (wrapper)", 0);
  __pyx_r = 
#line 604 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_18decr_running_tasks(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 604 "miniparla/runtime.pyx"


#line 604 "miniparla/runtime.pyx"
  /* function exit code */

#line 604 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 604 "miniparla/runtime.pyx"
  return __pyx_r;

#line 604 "miniparla/runtime.pyx"
}

#line 604 "miniparla/runtime.pyx"


#line 604 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_18decr_running_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  CYTHON_UNUSED InnerScheduler *__pyx_v_s
#line 604 "miniparla/runtime.pyx"
;

#line 604 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 604 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 604 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 604 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 604 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 604 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 604 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_running_tasks", 0);

  /* "miniparla/runtime.pyx":605
 * 
 *     def decr_running_tasks(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         #with nogil:
 *         #    s.decr_running_tasks()
 */

#line 605 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 605 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":608
 *         #with nogil:
 *         #    s.decr_running_tasks()
 *         self.scheduler.decr_running_tasks()             # <<<<<<<<<<<<<<
 * 
 *     def incr_free_threads(self):
 */

#line 608 "miniparla/runtime.pyx"
  try {

#line 608 "miniparla/runtime.pyx"
    __pyx_v_self->scheduler->decr_running_tasks();

#line 608 "miniparla/runtime.pyx"
  } catch(...) {

#line 608 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 608 "miniparla/runtime.pyx"
    __PYX_ERR(0, 608, __pyx_L1_error)

#line 608 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":604
 *         s.incr_running_tasks()
 * 
 *     def decr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         #with nogil:
 */

#line 604 "miniparla/runtime.pyx"


#line 604 "miniparla/runtime.pyx"
  /* function exit code */

#line 604 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 604 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 604 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 604 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.decr_running_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 604 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 604 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 604 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 604 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 604 "miniparla/runtime.pyx"
  return __pyx_r;

#line 604 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":610
 *         self.scheduler.decr_running_tasks()
 * 
 *     def incr_free_threads(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 */

#line 610 "miniparla/runtime.pyx"


#line 610 "miniparla/runtime.pyx"
/* Python wrapper */

#line 610 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_21incr_free_threads(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 610 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_21incr_free_threads(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 610 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 610 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 610 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_free_threads (wrapper)", 0);
  __pyx_r = 
#line 610 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_20incr_free_threads(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 610 "miniparla/runtime.pyx"


#line 610 "miniparla/runtime.pyx"
  /* function exit code */

#line 610 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 610 "miniparla/runtime.pyx"
  return __pyx_r;

#line 610 "miniparla/runtime.pyx"
}

#line 610 "miniparla/runtime.pyx"


#line 610 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_20incr_free_threads(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  InnerScheduler *__pyx_v_s
#line 610 "miniparla/runtime.pyx"
;

#line 610 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 610 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 610 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 610 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 610 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 610 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 610 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_free_threads", 0);

  /* "miniparla/runtime.pyx":611
 * 
 *     def incr_free_threads(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         with nogil:
 *             s.incr_free_threads()
 */

#line 611 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 611 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":612
 *     def incr_free_threads(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s.incr_free_threads()
 *         #self.scheduler.incr_free_threads()
 */

#line 612 "miniparla/runtime.pyx"
  {

#line 612 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 612 "miniparla/runtime.pyx"
      PyThreadState *_save;

#line 612 "miniparla/runtime.pyx"
      Py_UNBLOCK_THREADS

#line 612 "miniparla/runtime.pyx"
      __Pyx_FastGIL_Remember();

#line 612 "miniparla/runtime.pyx"
      #endif

#line 612 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":613
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 *             s.incr_free_threads()             # <<<<<<<<<<<<<<
 *         #self.scheduler.incr_free_threads()
 * 
 */

#line 613 "miniparla/runtime.pyx"
        try {

#line 613 "miniparla/runtime.pyx"
          __pyx_v_s->incr_free_threads();

#line 613 "miniparla/runtime.pyx"
        } catch(...) {

#line 613 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 613 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 613 "miniparla/runtime.pyx"
          #endif

#line 613 "miniparla/runtime.pyx"
          __Pyx_CppExn2PyErr();

#line 613 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 613 "miniparla/runtime.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 613 "miniparla/runtime.pyx"
          #endif

#line 613 "miniparla/runtime.pyx"
          __PYX_ERR(0, 613, __pyx_L4_error)

#line 613 "miniparla/runtime.pyx"
        }

#line 613 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":612
 *     def incr_free_threads(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s.incr_free_threads()
 *         #self.scheduler.incr_free_threads()
 */

#line 612 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 612 "miniparla/runtime.pyx"
        /*normal exit:*/{

#line 612 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 612 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 612 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 612 "miniparla/runtime.pyx"
          #endif

#line 612 "miniparla/runtime.pyx"
          goto __pyx_L5;

#line 612 "miniparla/runtime.pyx"
        }

#line 612 "miniparla/runtime.pyx"
        __pyx_L4_error: {

#line 612 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 612 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 612 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 612 "miniparla/runtime.pyx"
          #endif

#line 612 "miniparla/runtime.pyx"
          goto __pyx_L1_error;

#line 612 "miniparla/runtime.pyx"
        }

#line 612 "miniparla/runtime.pyx"
        __pyx_L5:;

#line 612 "miniparla/runtime.pyx"
      }

#line 612 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":610
 *         self.scheduler.decr_running_tasks()
 * 
 *     def incr_free_threads(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 */

#line 610 "miniparla/runtime.pyx"


#line 610 "miniparla/runtime.pyx"
  /* function exit code */

#line 610 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 610 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 610 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 610 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.incr_free_threads", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 610 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 610 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 610 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 610 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 610 "miniparla/runtime.pyx"
  return __pyx_r;

#line 610 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":616
 *         #self.scheduler.incr_free_threads()
 * 
 *     def decr_free_threads(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 */

#line 616 "miniparla/runtime.pyx"


#line 616 "miniparla/runtime.pyx"
/* Python wrapper */

#line 616 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_23decr_free_threads(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 616 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_23decr_free_threads(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 616 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 616 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 616 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_free_threads (wrapper)", 0);
  __pyx_r = 
#line 616 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_22decr_free_threads(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 616 "miniparla/runtime.pyx"


#line 616 "miniparla/runtime.pyx"
  /* function exit code */

#line 616 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 616 "miniparla/runtime.pyx"
  return __pyx_r;

#line 616 "miniparla/runtime.pyx"
}

#line 616 "miniparla/runtime.pyx"


#line 616 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_22decr_free_threads(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  InnerScheduler *__pyx_v_s
#line 616 "miniparla/runtime.pyx"
;

#line 616 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 616 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 616 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 616 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 616 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 616 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 616 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_free_threads", 0);

  /* "miniparla/runtime.pyx":617
 * 
 *     def decr_free_threads(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         with nogil:
 *             s.decr_free_threads()
 */

#line 617 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 617 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":618
 *     def decr_free_threads(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s.decr_free_threads()
 *         #self.scheduler.decr_free_threads()
 */

#line 618 "miniparla/runtime.pyx"
  {

#line 618 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 618 "miniparla/runtime.pyx"
      PyThreadState *_save;

#line 618 "miniparla/runtime.pyx"
      Py_UNBLOCK_THREADS

#line 618 "miniparla/runtime.pyx"
      __Pyx_FastGIL_Remember();

#line 618 "miniparla/runtime.pyx"
      #endif

#line 618 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":619
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 *             s.decr_free_threads()             # <<<<<<<<<<<<<<
 *         #self.scheduler.decr_free_threads()
 * 
 */

#line 619 "miniparla/runtime.pyx"
        try {

#line 619 "miniparla/runtime.pyx"
          __pyx_v_s->decr_free_threads();

#line 619 "miniparla/runtime.pyx"
        } catch(...) {

#line 619 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 619 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 619 "miniparla/runtime.pyx"
          #endif

#line 619 "miniparla/runtime.pyx"
          __Pyx_CppExn2PyErr();

#line 619 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 619 "miniparla/runtime.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 619 "miniparla/runtime.pyx"
          #endif

#line 619 "miniparla/runtime.pyx"
          __PYX_ERR(0, 619, __pyx_L4_error)

#line 619 "miniparla/runtime.pyx"
        }

#line 619 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":618
 *     def decr_free_threads(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s.decr_free_threads()
 *         #self.scheduler.decr_free_threads()
 */

#line 618 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 618 "miniparla/runtime.pyx"
        /*normal exit:*/{

#line 618 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 618 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 618 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 618 "miniparla/runtime.pyx"
          #endif

#line 618 "miniparla/runtime.pyx"
          goto __pyx_L5;

#line 618 "miniparla/runtime.pyx"
        }

#line 618 "miniparla/runtime.pyx"
        __pyx_L4_error: {

#line 618 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 618 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 618 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 618 "miniparla/runtime.pyx"
          #endif

#line 618 "miniparla/runtime.pyx"
          goto __pyx_L1_error;

#line 618 "miniparla/runtime.pyx"
        }

#line 618 "miniparla/runtime.pyx"
        __pyx_L5:;

#line 618 "miniparla/runtime.pyx"
      }

#line 618 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":616
 *         #self.scheduler.incr_free_threads()
 * 
 *     def decr_free_threads(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 */

#line 616 "miniparla/runtime.pyx"


#line 616 "miniparla/runtime.pyx"
  /* function exit code */

#line 616 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 616 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 616 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 616 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.decr_free_threads", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 616 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 616 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 616 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 616 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 616 "miniparla/runtime.pyx"
  return __pyx_r;

#line 616 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":622
 *         #self.scheduler.decr_free_threads()
 * 
 *     def incr_resources(self, float resources):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef float r = resources
 */

#line 622 "miniparla/runtime.pyx"


#line 622 "miniparla/runtime.pyx"
/* Python wrapper */

#line 622 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_25incr_resources(PyObject *__pyx_v_self, PyObject *__pyx_arg_resources); /*proto*/

#line 622 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_25incr_resources(PyObject *__pyx_v_self, PyObject *__pyx_arg_resources) {
  float __pyx_v_resources
#line 622 "miniparla/runtime.pyx"
;

#line 622 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 622 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 622 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 622 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 622 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 622 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_resources (wrapper)", 0);

#line 622 "miniparla/runtime.pyx"
  assert(__pyx_arg_resources); {

#line 622 "miniparla/runtime.pyx"
    __pyx_v_resources = __pyx_PyFloat_AsFloat(__pyx_arg_resources); if (unlikely((__pyx_v_resources == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L3_error)

#line 622 "miniparla/runtime.pyx"
  }

#line 622 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 622 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 622 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.incr_resources", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 622 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 622 "miniparla/runtime.pyx"
  return NULL;

#line 622 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 622 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_24incr_resources(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self), ((float)__pyx_v_resources));

#line 622 "miniparla/runtime.pyx"


#line 622 "miniparla/runtime.pyx"
  /* function exit code */

#line 622 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 622 "miniparla/runtime.pyx"
  return __pyx_r;

#line 622 "miniparla/runtime.pyx"
}

#line 622 "miniparla/runtime.pyx"


#line 622 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_24incr_resources(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, float __pyx_v_resources) {
  InnerScheduler *__pyx_v_s
#line 622 "miniparla/runtime.pyx"
;
  float __pyx_v_r
#line 622 "miniparla/runtime.pyx"
;

#line 622 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 622 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 622 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 622 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 622 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 622 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 622 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_resources", 0);

  /* "miniparla/runtime.pyx":623
 * 
 *     def incr_resources(self, float resources):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         cdef float r = resources
 *         #with nogil:
 */

#line 623 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 623 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":624
 *     def incr_resources(self, float resources):
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef float r = resources             # <<<<<<<<<<<<<<
 *         #with nogil:
 *         #    s.incr_resources(r)
 */

#line 624 "miniparla/runtime.pyx"
  __pyx_v_r = __pyx_v_resources;

  /* "miniparla/runtime.pyx":627
 *         #with nogil:
 *         #    s.incr_resources(r)
 *         s.incr_resources(r)             # <<<<<<<<<<<<<<
 *         #self.scheduler.incr_resources(resources)
 * 
 */

#line 627 "miniparla/runtime.pyx"
  try {

#line 627 "miniparla/runtime.pyx"
    __pyx_v_s->incr_resources(__pyx_v_r);

#line 627 "miniparla/runtime.pyx"
  } catch(...) {

#line 627 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 627 "miniparla/runtime.pyx"
    __PYX_ERR(0, 627, __pyx_L1_error)

#line 627 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":622
 *         #self.scheduler.decr_free_threads()
 * 
 *     def incr_resources(self, float resources):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef float r = resources
 */

#line 622 "miniparla/runtime.pyx"


#line 622 "miniparla/runtime.pyx"
  /* function exit code */

#line 622 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 622 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 622 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 622 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.incr_resources", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 622 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 622 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 622 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 622 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 622 "miniparla/runtime.pyx"
  return __pyx_r;

#line 622 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":630
 *         #self.scheduler.incr_resources(resources)
 * 
 *     def decr_resources(self, float resources):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef float r = resources
 */

#line 630 "miniparla/runtime.pyx"


#line 630 "miniparla/runtime.pyx"
/* Python wrapper */

#line 630 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_27decr_resources(PyObject *__pyx_v_self, PyObject *__pyx_arg_resources); /*proto*/

#line 630 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_27decr_resources(PyObject *__pyx_v_self, PyObject *__pyx_arg_resources) {
  float __pyx_v_resources
#line 630 "miniparla/runtime.pyx"
;

#line 630 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 630 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 630 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 630 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 630 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 630 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_resources (wrapper)", 0);

#line 630 "miniparla/runtime.pyx"
  assert(__pyx_arg_resources); {

#line 630 "miniparla/runtime.pyx"
    __pyx_v_resources = __pyx_PyFloat_AsFloat(__pyx_arg_resources); if (unlikely((__pyx_v_resources == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L3_error)

#line 630 "miniparla/runtime.pyx"
  }

#line 630 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 630 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 630 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.decr_resources", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 630 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 630 "miniparla/runtime.pyx"
  return NULL;

#line 630 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 630 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_26decr_resources(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self), ((float)__pyx_v_resources));

#line 630 "miniparla/runtime.pyx"


#line 630 "miniparla/runtime.pyx"
  /* function exit code */

#line 630 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 630 "miniparla/runtime.pyx"
  return __pyx_r;

#line 630 "miniparla/runtime.pyx"
}

#line 630 "miniparla/runtime.pyx"


#line 630 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_26decr_resources(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, float __pyx_v_resources) {
  InnerScheduler *__pyx_v_s
#line 630 "miniparla/runtime.pyx"
;
  float __pyx_v_r
#line 630 "miniparla/runtime.pyx"
;

#line 630 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 630 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 630 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 630 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 630 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 630 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 630 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_resources", 0);

  /* "miniparla/runtime.pyx":631
 * 
 *     def decr_resources(self, float resources):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         cdef float r = resources
 *         #with nogil:
 */

#line 631 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 631 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":632
 *     def decr_resources(self, float resources):
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef float r = resources             # <<<<<<<<<<<<<<
 *         #with nogil:
 *         #    s.decr_resources(r)
 */

#line 632 "miniparla/runtime.pyx"
  __pyx_v_r = __pyx_v_resources;

  /* "miniparla/runtime.pyx":635
 *         #with nogil:
 *         #    s.decr_resources(r)
 *         s.decr_resources(r)             # <<<<<<<<<<<<<<
 *         #self.scheduler.decr_resources(resources)
 * 
 */

#line 635 "miniparla/runtime.pyx"
  try {

#line 635 "miniparla/runtime.pyx"
    __pyx_v_s->decr_resources(__pyx_v_r);

#line 635 "miniparla/runtime.pyx"
  } catch(...) {

#line 635 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 635 "miniparla/runtime.pyx"
    __PYX_ERR(0, 635, __pyx_L1_error)

#line 635 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":630
 *         #self.scheduler.incr_resources(resources)
 * 
 *     def decr_resources(self, float resources):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef float r = resources
 */

#line 630 "miniparla/runtime.pyx"


#line 630 "miniparla/runtime.pyx"
  /* function exit code */

#line 630 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 630 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 630 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 630 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.decr_resources", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 630 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 630 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 630 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 630 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 630 "miniparla/runtime.pyx"
  return __pyx_r;

#line 630 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":638
 *         #self.scheduler.decr_resources(resources)
 * 
 *     def get_active_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0
 */

#line 638 "miniparla/runtime.pyx"


#line 638 "miniparla/runtime.pyx"
/* Python wrapper */

#line 638 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_29get_active_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 638 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_29get_active_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 638 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 638 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 638 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_active_tasks (wrapper)", 0);
  __pyx_r = 
#line 638 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_28get_active_tasks(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 638 "miniparla/runtime.pyx"


#line 638 "miniparla/runtime.pyx"
  /* function exit code */

#line 638 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 638 "miniparla/runtime.pyx"
  return __pyx_r;

#line 638 "miniparla/runtime.pyx"
}

#line 638 "miniparla/runtime.pyx"


#line 638 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_28get_active_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  InnerScheduler *__pyx_v_s
#line 638 "miniparla/runtime.pyx"
;
  int __pyx_v_ret
#line 638 "miniparla/runtime.pyx"
;

#line 638 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 638 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 638 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 638 "miniparla/runtime.pyx"
  int __pyx_t_2;

#line 638 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 638 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 638 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 638 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 638 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_active_tasks", 0);

  /* "miniparla/runtime.pyx":639
 * 
 *     def get_active_tasks(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         cdef int ret = 0
 *         #with nogil:
 */

#line 639 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 639 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":640
 *     def get_active_tasks(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0             # <<<<<<<<<<<<<<
 *         #with nogil:
 *         #    ret = s.get_active_tasks()
 */

#line 640 "miniparla/runtime.pyx"
  __pyx_v_ret = 0;

  /* "miniparla/runtime.pyx":643
 *         #with nogil:
 *         #    ret = s.get_active_tasks()
 *         ret = s.get_active_tasks()             # <<<<<<<<<<<<<<
 *         return ret
 *         #return self.scheduler.get_active_tasks()
 */

#line 643 "miniparla/runtime.pyx"
  try {

#line 643 "miniparla/runtime.pyx"
    __pyx_t_2 = __pyx_v_s->get_active_tasks();

#line 643 "miniparla/runtime.pyx"
  } catch(...) {

#line 643 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 643 "miniparla/runtime.pyx"
    __PYX_ERR(0, 643, __pyx_L1_error)

#line 643 "miniparla/runtime.pyx"
  }

#line 643 "miniparla/runtime.pyx"
  __pyx_v_ret = __pyx_t_2;

  /* "miniparla/runtime.pyx":644
 *         #    ret = s.get_active_tasks()
 *         ret = s.get_active_tasks()
 *         return ret             # <<<<<<<<<<<<<<
 *         #return self.scheduler.get_active_tasks()
 * 
 */

#line 644 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 644 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 644, __pyx_L1_error)

#line 644 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 644 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_3;

#line 644 "miniparla/runtime.pyx"
  __pyx_t_3 = 0;

#line 644 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":638
 *         #self.scheduler.decr_resources(resources)
 * 
 *     def get_active_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0
 */

#line 638 "miniparla/runtime.pyx"


#line 638 "miniparla/runtime.pyx"
  /* function exit code */

#line 638 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 638 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 638 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.get_active_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 638 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 638 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 638 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 638 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 638 "miniparla/runtime.pyx"
  return __pyx_r;

#line 638 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":647
 *         #return self.scheduler.get_active_tasks()
 * 
 *     def get_running_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0
 */

#line 647 "miniparla/runtime.pyx"


#line 647 "miniparla/runtime.pyx"
/* Python wrapper */

#line 647 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_31get_running_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 647 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_31get_running_tasks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 647 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 647 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 647 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_running_tasks (wrapper)", 0);
  __pyx_r = 
#line 647 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_30get_running_tasks(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 647 "miniparla/runtime.pyx"


#line 647 "miniparla/runtime.pyx"
  /* function exit code */

#line 647 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 647 "miniparla/runtime.pyx"
  return __pyx_r;

#line 647 "miniparla/runtime.pyx"
}

#line 647 "miniparla/runtime.pyx"


#line 647 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_30get_running_tasks(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  InnerScheduler *__pyx_v_s
#line 647 "miniparla/runtime.pyx"
;
  int __pyx_v_ret
#line 647 "miniparla/runtime.pyx"
;

#line 647 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 647 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 647 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 647 "miniparla/runtime.pyx"
  int __pyx_t_2;

#line 647 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 647 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 647 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 647 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 647 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_running_tasks", 0);

  /* "miniparla/runtime.pyx":648
 * 
 *     def get_running_tasks(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         cdef int ret = 0
 *         with nogil:
 */

#line 648 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 648 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":649
 *     def get_running_tasks(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0             # <<<<<<<<<<<<<<
 *         with nogil:
 *             ret = s.get_running_tasks()
 */

#line 649 "miniparla/runtime.pyx"
  __pyx_v_ret = 0;

  /* "miniparla/runtime.pyx":650
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = s.get_running_tasks()
 *         ret = s.get_running_tasks()
 */

#line 650 "miniparla/runtime.pyx"
  {

#line 650 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 650 "miniparla/runtime.pyx"
      PyThreadState *_save;

#line 650 "miniparla/runtime.pyx"
      Py_UNBLOCK_THREADS

#line 650 "miniparla/runtime.pyx"
      __Pyx_FastGIL_Remember();

#line 650 "miniparla/runtime.pyx"
      #endif

#line 650 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":651
 *         cdef int ret = 0
 *         with nogil:
 *             ret = s.get_running_tasks()             # <<<<<<<<<<<<<<
 *         ret = s.get_running_tasks()
 *         return ret
 */

#line 651 "miniparla/runtime.pyx"
        try {

#line 651 "miniparla/runtime.pyx"
          __pyx_t_2 = __pyx_v_s->get_running_tasks();

#line 651 "miniparla/runtime.pyx"
        } catch(...) {

#line 651 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 651 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 651 "miniparla/runtime.pyx"
          #endif

#line 651 "miniparla/runtime.pyx"
          __Pyx_CppExn2PyErr();

#line 651 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 651 "miniparla/runtime.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 651 "miniparla/runtime.pyx"
          #endif

#line 651 "miniparla/runtime.pyx"
          __PYX_ERR(0, 651, __pyx_L4_error)

#line 651 "miniparla/runtime.pyx"
        }

#line 651 "miniparla/runtime.pyx"
        __pyx_v_ret = __pyx_t_2;

#line 651 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":650
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = s.get_running_tasks()
 *         ret = s.get_running_tasks()
 */

#line 650 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 650 "miniparla/runtime.pyx"
        /*normal exit:*/{

#line 650 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 650 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 650 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 650 "miniparla/runtime.pyx"
          #endif

#line 650 "miniparla/runtime.pyx"
          goto __pyx_L5;

#line 650 "miniparla/runtime.pyx"
        }

#line 650 "miniparla/runtime.pyx"
        __pyx_L4_error: {

#line 650 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 650 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 650 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 650 "miniparla/runtime.pyx"
          #endif

#line 650 "miniparla/runtime.pyx"
          goto __pyx_L1_error;

#line 650 "miniparla/runtime.pyx"
        }

#line 650 "miniparla/runtime.pyx"
        __pyx_L5:;

#line 650 "miniparla/runtime.pyx"
      }

#line 650 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":652
 *         with nogil:
 *             ret = s.get_running_tasks()
 *         ret = s.get_running_tasks()             # <<<<<<<<<<<<<<
 *         return ret
 *         #return self.scheduler.get_running_tasks()
 */

#line 652 "miniparla/runtime.pyx"
  try {

#line 652 "miniparla/runtime.pyx"
    __pyx_t_2 = __pyx_v_s->get_running_tasks();

#line 652 "miniparla/runtime.pyx"
  } catch(...) {

#line 652 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 652 "miniparla/runtime.pyx"
    __PYX_ERR(0, 652, __pyx_L1_error)

#line 652 "miniparla/runtime.pyx"
  }

#line 652 "miniparla/runtime.pyx"
  __pyx_v_ret = __pyx_t_2;

  /* "miniparla/runtime.pyx":653
 *             ret = s.get_running_tasks()
 *         ret = s.get_running_tasks()
 *         return ret             # <<<<<<<<<<<<<<
 *         #return self.scheduler.get_running_tasks()
 * 
 */

#line 653 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 653 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 653, __pyx_L1_error)

#line 653 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 653 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_3;

#line 653 "miniparla/runtime.pyx"
  __pyx_t_3 = 0;

#line 653 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":647
 *         #return self.scheduler.get_active_tasks()
 * 
 *     def get_running_tasks(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0
 */

#line 647 "miniparla/runtime.pyx"


#line 647 "miniparla/runtime.pyx"
  /* function exit code */

#line 647 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 647 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 647 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.get_running_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 647 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 647 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 647 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 647 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 647 "miniparla/runtime.pyx"
  return __pyx_r;

#line 647 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":656
 *         #return self.scheduler.get_running_tasks()
 * 
 *     def get_free_threads(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0
 */

#line 656 "miniparla/runtime.pyx"


#line 656 "miniparla/runtime.pyx"
/* Python wrapper */

#line 656 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_33get_free_threads(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 656 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_33get_free_threads(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 656 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 656 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 656 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_free_threads (wrapper)", 0);
  __pyx_r = 
#line 656 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_32get_free_threads(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 656 "miniparla/runtime.pyx"


#line 656 "miniparla/runtime.pyx"
  /* function exit code */

#line 656 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 656 "miniparla/runtime.pyx"
  return __pyx_r;

#line 656 "miniparla/runtime.pyx"
}

#line 656 "miniparla/runtime.pyx"


#line 656 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_32get_free_threads(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  InnerScheduler *__pyx_v_s
#line 656 "miniparla/runtime.pyx"
;
  int __pyx_v_ret
#line 656 "miniparla/runtime.pyx"
;

#line 656 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 656 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 656 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 656 "miniparla/runtime.pyx"
  int __pyx_t_2;

#line 656 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 656 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 656 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 656 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 656 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_free_threads", 0);

  /* "miniparla/runtime.pyx":657
 * 
 *     def get_free_threads(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         cdef int ret = 0
 *         with nogil:
 */

#line 657 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 657 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":658
 *     def get_free_threads(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0             # <<<<<<<<<<<<<<
 *         with nogil:
 *             ret = s.get_free_threads()
 */

#line 658 "miniparla/runtime.pyx"
  __pyx_v_ret = 0;

  /* "miniparla/runtime.pyx":659
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = s.get_free_threads()
 *         return ret
 */

#line 659 "miniparla/runtime.pyx"
  {

#line 659 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 659 "miniparla/runtime.pyx"
      PyThreadState *_save;

#line 659 "miniparla/runtime.pyx"
      Py_UNBLOCK_THREADS

#line 659 "miniparla/runtime.pyx"
      __Pyx_FastGIL_Remember();

#line 659 "miniparla/runtime.pyx"
      #endif

#line 659 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":660
 *         cdef int ret = 0
 *         with nogil:
 *             ret = s.get_free_threads()             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */

#line 660 "miniparla/runtime.pyx"
        try {

#line 660 "miniparla/runtime.pyx"
          __pyx_t_2 = __pyx_v_s->get_free_threads();

#line 660 "miniparla/runtime.pyx"
        } catch(...) {

#line 660 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 660 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 660 "miniparla/runtime.pyx"
          #endif

#line 660 "miniparla/runtime.pyx"
          __Pyx_CppExn2PyErr();

#line 660 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 660 "miniparla/runtime.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 660 "miniparla/runtime.pyx"
          #endif

#line 660 "miniparla/runtime.pyx"
          __PYX_ERR(0, 660, __pyx_L4_error)

#line 660 "miniparla/runtime.pyx"
        }

#line 660 "miniparla/runtime.pyx"
        __pyx_v_ret = __pyx_t_2;

#line 660 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":659
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = s.get_free_threads()
 *         return ret
 */

#line 659 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 659 "miniparla/runtime.pyx"
        /*normal exit:*/{

#line 659 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 659 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 659 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 659 "miniparla/runtime.pyx"
          #endif

#line 659 "miniparla/runtime.pyx"
          goto __pyx_L5;

#line 659 "miniparla/runtime.pyx"
        }

#line 659 "miniparla/runtime.pyx"
        __pyx_L4_error: {

#line 659 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 659 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 659 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 659 "miniparla/runtime.pyx"
          #endif

#line 659 "miniparla/runtime.pyx"
          goto __pyx_L1_error;

#line 659 "miniparla/runtime.pyx"
        }

#line 659 "miniparla/runtime.pyx"
        __pyx_L5:;

#line 659 "miniparla/runtime.pyx"
      }

#line 659 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":661
 *         with nogil:
 *             ret = s.get_free_threads()
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def run_scheduler(self):
 */

#line 661 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 661 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 661, __pyx_L1_error)

#line 661 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 661 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_3;

#line 661 "miniparla/runtime.pyx"
  __pyx_t_3 = 0;

#line 661 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":656
 *         #return self.scheduler.get_running_tasks()
 * 
 *     def get_free_threads(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef int ret = 0
 */

#line 656 "miniparla/runtime.pyx"


#line 656 "miniparla/runtime.pyx"
  /* function exit code */

#line 656 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 656 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 656 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.get_free_threads", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 656 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 656 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 656 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 656 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 656 "miniparla/runtime.pyx"
  return __pyx_r;

#line 656 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":663
 *         return ret
 * 
 *     def run_scheduler(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 */

#line 663 "miniparla/runtime.pyx"


#line 663 "miniparla/runtime.pyx"
/* Python wrapper */

#line 663 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_35run_scheduler(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 663 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_35run_scheduler(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 663 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 663 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 663 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run_scheduler (wrapper)", 0);
  __pyx_r = 
#line 663 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_34run_scheduler(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 663 "miniparla/runtime.pyx"


#line 663 "miniparla/runtime.pyx"
  /* function exit code */

#line 663 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 663 "miniparla/runtime.pyx"
  return __pyx_r;

#line 663 "miniparla/runtime.pyx"
}

#line 663 "miniparla/runtime.pyx"


#line 663 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_34run_scheduler(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {
  InnerScheduler *__pyx_v_s
#line 663 "miniparla/runtime.pyx"
;

#line 663 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 663 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 663 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 663 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 663 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 663 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 663 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run_scheduler", 0);

  /* "miniparla/runtime.pyx":664
 * 
 *     def run_scheduler(self):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         with nogil:
 *             s.run_scheduler()
 */

#line 664 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 664 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":665
 *     def run_scheduler(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s.run_scheduler()
 *         #self.scheduler.run_scheduler()
 */

#line 665 "miniparla/runtime.pyx"
  {

#line 665 "miniparla/runtime.pyx"
      #ifdef WITH_THREAD

#line 665 "miniparla/runtime.pyx"
      PyThreadState *_save;

#line 665 "miniparla/runtime.pyx"
      Py_UNBLOCK_THREADS

#line 665 "miniparla/runtime.pyx"
      __Pyx_FastGIL_Remember();

#line 665 "miniparla/runtime.pyx"
      #endif

#line 665 "miniparla/runtime.pyx"
      /*try:*/ {

        /* "miniparla/runtime.pyx":666
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 *             s.run_scheduler()             # <<<<<<<<<<<<<<
 *         #self.scheduler.run_scheduler()
 * 
 */

#line 666 "miniparla/runtime.pyx"
        try {

#line 666 "miniparla/runtime.pyx"
          __pyx_v_s->run_scheduler();

#line 666 "miniparla/runtime.pyx"
        } catch(...) {

#line 666 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 666 "miniparla/runtime.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 666 "miniparla/runtime.pyx"
          #endif

#line 666 "miniparla/runtime.pyx"
          __Pyx_CppExn2PyErr();

#line 666 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 666 "miniparla/runtime.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 666 "miniparla/runtime.pyx"
          #endif

#line 666 "miniparla/runtime.pyx"
          __PYX_ERR(0, 666, __pyx_L4_error)

#line 666 "miniparla/runtime.pyx"
        }

#line 666 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":665
 *     def run_scheduler(self):
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s.run_scheduler()
 *         #self.scheduler.run_scheduler()
 */

#line 665 "miniparla/runtime.pyx"
      /*finally:*/ {

#line 665 "miniparla/runtime.pyx"
        /*normal exit:*/{

#line 665 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 665 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 665 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 665 "miniparla/runtime.pyx"
          #endif

#line 665 "miniparla/runtime.pyx"
          goto __pyx_L5;

#line 665 "miniparla/runtime.pyx"
        }

#line 665 "miniparla/runtime.pyx"
        __pyx_L4_error: {

#line 665 "miniparla/runtime.pyx"
          #ifdef WITH_THREAD

#line 665 "miniparla/runtime.pyx"
          __Pyx_FastGIL_Forget();

#line 665 "miniparla/runtime.pyx"
          Py_BLOCK_THREADS

#line 665 "miniparla/runtime.pyx"
          #endif

#line 665 "miniparla/runtime.pyx"
          goto __pyx_L1_error;

#line 665 "miniparla/runtime.pyx"
        }

#line 665 "miniparla/runtime.pyx"
        __pyx_L5:;

#line 665 "miniparla/runtime.pyx"
      }

#line 665 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":663
 *         return ret
 * 
 *     def run_scheduler(self):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         with nogil:
 */

#line 663 "miniparla/runtime.pyx"


#line 663 "miniparla/runtime.pyx"
  /* function exit code */

#line 663 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 663 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 663 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 663 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.run_scheduler", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 663 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 663 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 663 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 663 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 663 "miniparla/runtime.pyx"
  return __pyx_r;

#line 663 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":669
 *         #self.scheduler.run_scheduler()
 * 
 *     def enqueue_task(self, PyInnerTask task):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef InnerTask* t = task.task
 */

#line 669 "miniparla/runtime.pyx"


#line 669 "miniparla/runtime.pyx"
/* Python wrapper */

#line 669 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_37enqueue_task(PyObject *__pyx_v_self, PyObject *__pyx_v_task); /*proto*/

#line 669 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_37enqueue_task(PyObject *__pyx_v_self, PyObject *__pyx_v_task) {

#line 669 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 669 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 669 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 669 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 669 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 669 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("enqueue_task (wrapper)", 0);

#line 669 "miniparla/runtime.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_task), __pyx_ptype_9miniparla_7runtime_PyInnerTask, 1, "task", 0))) __PYX_ERR(0, 669, __pyx_L1_error)
  __pyx_r = 
#line 669 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_36enqueue_task(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self), ((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)__pyx_v_task));

#line 669 "miniparla/runtime.pyx"


#line 669 "miniparla/runtime.pyx"
  /* function exit code */

#line 669 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 669 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 669 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 669 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 669 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 669 "miniparla/runtime.pyx"
  return __pyx_r;

#line 669 "miniparla/runtime.pyx"
}

#line 669 "miniparla/runtime.pyx"


#line 669 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_36enqueue_task(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerTask *__pyx_v_task) {
  InnerScheduler *__pyx_v_s
#line 669 "miniparla/runtime.pyx"
;
  InnerTask *__pyx_v_t
#line 669 "miniparla/runtime.pyx"
;

#line 669 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 669 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 669 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 669 "miniparla/runtime.pyx"
  InnerTask *__pyx_t_2;

#line 669 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 669 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 669 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 669 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("enqueue_task", 0);

  /* "miniparla/runtime.pyx":670
 * 
 *     def enqueue_task(self, PyInnerTask task):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         cdef InnerTask* t = task.task
 *         #with nogil:
 */

#line 670 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 670 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":671
 *     def enqueue_task(self, PyInnerTask task):
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef InnerTask* t = task.task             # <<<<<<<<<<<<<<
 *         #with nogil:
 *         #    s.enqueue_task(t)
 */

#line 671 "miniparla/runtime.pyx"
  __pyx_t_2 = __pyx_v_task->task;

#line 671 "miniparla/runtime.pyx"
  __pyx_v_t = __pyx_t_2;

  /* "miniparla/runtime.pyx":674
 *         #with nogil:
 *         #    s.enqueue_task(t)
 *         s.enqueue_task(t)             # <<<<<<<<<<<<<<
 *         #self.scheduler.enqueue_task(task.task)
 * 
 */

#line 674 "miniparla/runtime.pyx"
  try {

#line 674 "miniparla/runtime.pyx"
    __pyx_v_s->enqueue_task(__pyx_v_t);

#line 674 "miniparla/runtime.pyx"
  } catch(...) {

#line 674 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 674 "miniparla/runtime.pyx"
    __PYX_ERR(0, 674, __pyx_L1_error)

#line 674 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":669
 *         #self.scheduler.run_scheduler()
 * 
 *     def enqueue_task(self, PyInnerTask task):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef InnerTask* t = task.task
 */

#line 669 "miniparla/runtime.pyx"


#line 669 "miniparla/runtime.pyx"
  /* function exit code */

#line 669 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 669 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 669 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 669 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.enqueue_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 669 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 669 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 669 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 669 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 669 "miniparla/runtime.pyx"
  return __pyx_r;

#line 669 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":677
 *         #self.scheduler.enqueue_task(task.task)
 * 
 *     def enqueue_worker(self, PyInnerWorker worker):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef InnerWorker* w = worker.inner_worker
 */

#line 677 "miniparla/runtime.pyx"


#line 677 "miniparla/runtime.pyx"
/* Python wrapper */

#line 677 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_39enqueue_worker(PyObject *__pyx_v_self, PyObject *__pyx_v_worker); /*proto*/

#line 677 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_39enqueue_worker(PyObject *__pyx_v_self, PyObject *__pyx_v_worker) {

#line 677 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 677 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 677 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 677 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 677 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 677 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("enqueue_worker (wrapper)", 0);

#line 677 "miniparla/runtime.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_worker), __pyx_ptype_9miniparla_7runtime_PyInnerWorker, 1, "worker", 0))) __PYX_ERR(0, 677, __pyx_L1_error)
  __pyx_r = 
#line 677 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_38enqueue_worker(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self), ((struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *)__pyx_v_worker));

#line 677 "miniparla/runtime.pyx"


#line 677 "miniparla/runtime.pyx"
  /* function exit code */

#line 677 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 677 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 677 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 677 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 677 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 677 "miniparla/runtime.pyx"
  return __pyx_r;

#line 677 "miniparla/runtime.pyx"
}

#line 677 "miniparla/runtime.pyx"


#line 677 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_38enqueue_worker(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, struct __pyx_obj_9miniparla_7runtime_PyInnerWorker *__pyx_v_worker) {
  InnerScheduler *__pyx_v_s
#line 677 "miniparla/runtime.pyx"
;
  InnerWorker *__pyx_v_w
#line 677 "miniparla/runtime.pyx"
;

#line 677 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 677 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 677 "miniparla/runtime.pyx"
  InnerScheduler *__pyx_t_1;

#line 677 "miniparla/runtime.pyx"
  InnerWorker *__pyx_t_2;

#line 677 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 677 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 677 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 677 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("enqueue_worker", 0);

  /* "miniparla/runtime.pyx":678
 * 
 *     def enqueue_worker(self, PyInnerWorker worker):
 *         cdef InnerScheduler* s = self.scheduler             # <<<<<<<<<<<<<<
 *         cdef InnerWorker* w = worker.inner_worker
 *         #with nogil:
 */

#line 678 "miniparla/runtime.pyx"
  __pyx_t_1 = __pyx_v_self->scheduler;

#line 678 "miniparla/runtime.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "miniparla/runtime.pyx":679
 *     def enqueue_worker(self, PyInnerWorker worker):
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef InnerWorker* w = worker.inner_worker             # <<<<<<<<<<<<<<
 *         #with nogil:
 *         #    s.enqueue_worker(w)
 */

#line 679 "miniparla/runtime.pyx"
  __pyx_t_2 = __pyx_v_worker->inner_worker;

#line 679 "miniparla/runtime.pyx"
  __pyx_v_w = __pyx_t_2;

  /* "miniparla/runtime.pyx":682
 *         #with nogil:
 *         #    s.enqueue_worker(w)
 *         s.enqueue_worker(w)             # <<<<<<<<<<<<<<
 *         #self.scheduler.enqueue_task(task.task)
 * 
 */

#line 682 "miniparla/runtime.pyx"
  try {

#line 682 "miniparla/runtime.pyx"
    __pyx_v_s->enqueue_worker(__pyx_v_w);

#line 682 "miniparla/runtime.pyx"
  } catch(...) {

#line 682 "miniparla/runtime.pyx"
    __Pyx_CppExn2PyErr();

#line 682 "miniparla/runtime.pyx"
    __PYX_ERR(0, 682, __pyx_L1_error)

#line 682 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":677
 *         #self.scheduler.enqueue_task(task.task)
 * 
 *     def enqueue_worker(self, PyInnerWorker worker):             # <<<<<<<<<<<<<<
 *         cdef InnerScheduler* s = self.scheduler
 *         cdef InnerWorker* w = worker.inner_worker
 */

#line 677 "miniparla/runtime.pyx"


#line 677 "miniparla/runtime.pyx"
  /* function exit code */

#line 677 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 677 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 677 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 677 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.enqueue_worker", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 677 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 677 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 677 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 677 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 677 "miniparla/runtime.pyx"
  return __pyx_r;

#line 677 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":685
 *         #self.scheduler.enqueue_task(task.task)
 * 
 *     def get_status(self):             # <<<<<<<<<<<<<<
 *         return self.scheduler.should_run
 * 
 */

#line 685 "miniparla/runtime.pyx"


#line 685 "miniparla/runtime.pyx"
/* Python wrapper */

#line 685 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_41get_status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 685 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_41get_status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 685 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 685 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 685 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_status (wrapper)", 0);
  __pyx_r = 
#line 685 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_40get_status(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 685 "miniparla/runtime.pyx"


#line 685 "miniparla/runtime.pyx"
  /* function exit code */

#line 685 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 685 "miniparla/runtime.pyx"
  return __pyx_r;

#line 685 "miniparla/runtime.pyx"
}

#line 685 "miniparla/runtime.pyx"


#line 685 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_40get_status(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {

#line 685 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 685 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 685 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 685 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 685 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 685 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 685 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_status", 0);

  /* "miniparla/runtime.pyx":686
 * 
 *     def get_status(self):
 *         return self.scheduler.should_run             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 686 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 686 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->scheduler->should_run); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)

#line 686 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 686 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 686 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 686 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":685
 *         #self.scheduler.enqueue_task(task.task)
 * 
 *     def get_status(self):             # <<<<<<<<<<<<<<
 *         return self.scheduler.should_run
 * 
 */

#line 685 "miniparla/runtime.pyx"


#line 685 "miniparla/runtime.pyx"
  /* function exit code */

#line 685 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 685 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 685 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.get_status", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 685 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 685 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 685 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 685 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 685 "miniparla/runtime.pyx"
  return __pyx_r;

#line 685 "miniparla/runtime.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_43__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_43__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_42__reduce_cython__(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_45__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_45__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_44__setstate_cython__(((struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_9miniparla_7runtime_16PyInnerScheduler_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("miniparla.runtime.PyInnerScheduler.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "miniparla/runtime.pyx":692
 * class Scheduler(ControllableThread, SchedulerContext):
 * 
 *     def __init__(self, n_threads=8, period=0.001):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._monitor = threading.Condition(threading.Lock())
 */

#line 692 "miniparla/runtime.pyx"


#line 692 "miniparla/runtime.pyx"
/* Python wrapper */

#line 692 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_1__init__ = 
#line 692 "miniparla/runtime.pyx"
{"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_9Scheduler_1__init__, METH_VARARGS|METH_KEYWORDS, 0};

#line 692 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 692 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_n_threads = 0
#line 692 "miniparla/runtime.pyx"
;
  CYTHON_UNUSED PyObject *__pyx_v_period = 0
#line 692 "miniparla/runtime.pyx"
;

#line 692 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 692 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 692 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 692 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 692 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 692 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 692 "miniparla/runtime.pyx"
  {

#line 692 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_n_threads,&__pyx_n_s_period,0};

#line 692 "miniparla/runtime.pyx"
    PyObject* values[3] = {0,0,0};

#line 692 "miniparla/runtime.pyx"
    values[1] = ((PyObject *)((PyObject *)__pyx_int_8));

#line 692 "miniparla/runtime.pyx"
    values[2] = ((PyObject *)((PyObject*)__pyx_float_0_001));

#line 692 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 692 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 692 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 692 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  3: 
#line 692 "miniparla/runtime.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 692 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 692 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 692 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 692 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 692 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 692 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 692 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 692 "miniparla/runtime.pyx"
      }

#line 692 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 692 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 692 "miniparla/runtime.pyx"
        case  0:

#line 692 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 692 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 692 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 692 "miniparla/runtime.pyx"
        case  1:

#line 692 "miniparla/runtime.pyx"
        if (kw_args > 0) {

#line 692 "miniparla/runtime.pyx"
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_threads);

#line 692 "miniparla/runtime.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 692 "miniparla/runtime.pyx"
        }

#line 692 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 692 "miniparla/runtime.pyx"
        case  2:

#line 692 "miniparla/runtime.pyx"
        if (kw_args > 0) {

#line 692 "miniparla/runtime.pyx"
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_period);

#line 692 "miniparla/runtime.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 692 "miniparla/runtime.pyx"
        }

#line 692 "miniparla/runtime.pyx"
      }

#line 692 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 692 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 692, __pyx_L3_error)

#line 692 "miniparla/runtime.pyx"
      }

#line 692 "miniparla/runtime.pyx"
    } else {

#line 692 "miniparla/runtime.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 692 "miniparla/runtime.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 692 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 692 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 692 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 692 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 692 "miniparla/runtime.pyx"
        break;
        default: 
#line 692 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 692 "miniparla/runtime.pyx"
      }

#line 692 "miniparla/runtime.pyx"
    }

#line 692 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 692 "miniparla/runtime.pyx"
    __pyx_v_n_threads = values[1];

#line 692 "miniparla/runtime.pyx"
    __pyx_v_period = values[2];

#line 692 "miniparla/runtime.pyx"
  }

#line 692 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 692 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 692 "miniparla/runtime.pyx"
__PYX_ERR(0, 692, __pyx_L3_error)

#line 692 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 692 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 692 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 692 "miniparla/runtime.pyx"
  return NULL;

#line 692 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 692 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler___init__(__pyx_self, __pyx_v_self, __pyx_v_n_threads, __pyx_v_period);

#line 692 "miniparla/runtime.pyx"


#line 692 "miniparla/runtime.pyx"
  /* function exit code */

#line 692 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 692 "miniparla/runtime.pyx"
  return __pyx_r;

#line 692 "miniparla/runtime.pyx"
}

#line 692 "miniparla/runtime.pyx"


#line 692 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_n_threads, CYTHON_UNUSED PyObject *__pyx_v_period) {
  PyObject *__pyx_v_t = NULL
#line 692 "miniparla/runtime.pyx"
;
  PyObject *__pyx_8genexpr1__pyx_v_i = NULL
#line 692 "miniparla/runtime.pyx"
;

#line 692 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 692 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 692 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 692 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 692 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 692 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 692 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 692 "miniparla/runtime.pyx"
  Py_ssize_t __pyx_t_6;

#line 692 "miniparla/runtime.pyx"
  PyObject *(*__pyx_t_7)(PyObject *);

#line 692 "miniparla/runtime.pyx"
  int __pyx_t_8;

#line 692 "miniparla/runtime.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 692 "miniparla/runtime.pyx"
  int __pyx_t_10;

#line 692 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 692 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 692 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 692 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "miniparla/runtime.pyx":693
 * 
 *     def __init__(self, n_threads=8, period=0.001):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._monitor = threading.Condition(threading.Lock())
 *         self._exceptions = []
 */

#line 693 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_CyFunction_GetClassObj(__pyx_self);

#line 693 "miniparla/runtime.pyx"
  if (!__pyx_t_2) { PyErr_SetString(PyExc_SystemError, "super(): empty __class__ cell"); __PYX_ERR(0, 693, __pyx_L1_error) }

#line 693 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_2);

#line 693 "miniparla/runtime.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 693, __pyx_L1_error)

#line 693 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 693 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 693 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 693 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 693 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_self);

#line 693 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);

#line 693 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 693 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 693, __pyx_L1_error)

#line 693 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 693 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 693 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 693, __pyx_L1_error)

#line 693 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 693 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 693 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 693 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 693 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 693 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 693 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 693 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 693 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 693 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 693 "miniparla/runtime.pyx"
    }

#line 693 "miniparla/runtime.pyx"
  }

#line 693 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 693 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 693 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 693, __pyx_L1_error)

#line 693 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 693 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 693 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":694
 *     def __init__(self, n_threads=8, period=0.001):
 *         super().__init__()
 *         self._monitor = threading.Condition(threading.Lock())             # <<<<<<<<<<<<<<
 *         self._exceptions = []
 * 
 */

#line 694 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_threading); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 694, __pyx_L1_error)

#line 694 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 694 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Condition); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 694, __pyx_L1_error)

#line 694 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 694 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 694 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_threading); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 694, __pyx_L1_error)

#line 694 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 694 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Lock); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 694, __pyx_L1_error)

#line 694 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 694 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 694 "miniparla/runtime.pyx"
  __pyx_t_4 = NULL;

#line 694 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 694 "miniparla/runtime.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);

#line 694 "miniparla/runtime.pyx"
    if (likely(__pyx_t_4)) {

#line 694 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 694 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 694 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 694 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 694 "miniparla/runtime.pyx"
    }

#line 694 "miniparla/runtime.pyx"
  }

#line 694 "miniparla/runtime.pyx"
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);

#line 694 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 694 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 694, __pyx_L1_error)

#line 694 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 694 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 694 "miniparla/runtime.pyx"
  __pyx_t_5 = NULL;

#line 694 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 694 "miniparla/runtime.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);

#line 694 "miniparla/runtime.pyx"
    if (likely(__pyx_t_5)) {

#line 694 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 694 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 694 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 694 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 694 "miniparla/runtime.pyx"
    }

#line 694 "miniparla/runtime.pyx"
  }

#line 694 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);

#line 694 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 694 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 694 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)

#line 694 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 694 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 694 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_monitor, __pyx_t_1) < 0) __PYX_ERR(0, 694, __pyx_L1_error)

#line 694 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":695
 *         super().__init__()
 *         self._monitor = threading.Condition(threading.Lock())
 *         self._exceptions = []             # <<<<<<<<<<<<<<
 * 
 *         self.inner_scheduler = PyInnerScheduler(n_threads, 1.0)
 */

#line 695 "miniparla/runtime.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)

#line 695 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 695 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_exceptions, __pyx_t_1) < 0) __PYX_ERR(0, 695, __pyx_L1_error)

#line 695 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":697
 *         self._exceptions = []
 * 
 *         self.inner_scheduler = PyInnerScheduler(n_threads, 1.0)             # <<<<<<<<<<<<<<
 * 
 *         self._worker_threads = [WorkerThread(self, i) for i in range(n_threads)]
 */

#line 697 "miniparla/runtime.pyx"
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)

#line 697 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 697 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_n_threads);

#line 697 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_n_threads);

#line 697 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_n_threads);

#line 697 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_float_1_0);

#line 697 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_float_1_0);

#line 697 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_float_1_0);

#line 697 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9miniparla_7runtime_PyInnerScheduler), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 697, __pyx_L1_error)

#line 697 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 697 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 697 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler, __pyx_t_2) < 0) __PYX_ERR(0, 697, __pyx_L1_error)

#line 697 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":699
 *         self.inner_scheduler = PyInnerScheduler(n_threads, 1.0)
 * 
 *         self._worker_threads = [WorkerThread(self, i) for i in range(n_threads)]             # <<<<<<<<<<<<<<
 * 
 *         self._launching_phase_monitor = threading.Condition(threading.Lock())
 */

#line 699 "miniparla/runtime.pyx"
  { /* enter inner scope */

#line 699 "miniparla/runtime.pyx"
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 699 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_n_threads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 699 "miniparla/runtime.pyx"
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {

#line 699 "miniparla/runtime.pyx"
      __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;

#line 699 "miniparla/runtime.pyx"
      __pyx_t_7 = NULL;

#line 699 "miniparla/runtime.pyx"
    } else {
      __pyx_t_6 = -1; 
#line 699 "miniparla/runtime.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 699 "miniparla/runtime.pyx"
      __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
    }

#line 699 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 699 "miniparla/runtime.pyx"
    for (;;) {

#line 699 "miniparla/runtime.pyx"
      if (likely(!__pyx_t_7)) {

#line 699 "miniparla/runtime.pyx"
        if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 699 "miniparla/runtime.pyx"
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 699 "miniparla/runtime.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 699 "miniparla/runtime.pyx"
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
          #else

#line 699 "miniparla/runtime.pyx"
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 699 "miniparla/runtime.pyx"
          #endif

#line 699 "miniparla/runtime.pyx"
        } else {

#line 699 "miniparla/runtime.pyx"
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 699 "miniparla/runtime.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 699 "miniparla/runtime.pyx"
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
          #else

#line 699 "miniparla/runtime.pyx"
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 699 "miniparla/runtime.pyx"
          #endif

#line 699 "miniparla/runtime.pyx"
        }
      } else 
#line 699 "miniparla/runtime.pyx"
{

#line 699 "miniparla/runtime.pyx"
        __pyx_t_1 = __pyx_t_7(__pyx_t_3);

#line 699 "miniparla/runtime.pyx"
        if (unlikely(!__pyx_t_1)) {

#line 699 "miniparla/runtime.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 699 "miniparla/runtime.pyx"
          if (exc_type) {

#line 699 "miniparla/runtime.pyx"
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 699 "miniparla/runtime.pyx"
            else __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
          }

#line 699 "miniparla/runtime.pyx"
          break;

#line 699 "miniparla/runtime.pyx"
        }

#line 699 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 699 "miniparla/runtime.pyx"
      }

#line 699 "miniparla/runtime.pyx"
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_i, __pyx_t_1);

#line 699 "miniparla/runtime.pyx"
      __pyx_t_1 = 0;

#line 699 "miniparla/runtime.pyx"
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_WorkerThread); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 699 "miniparla/runtime.pyx"
      __pyx_t_4 = NULL;

#line 699 "miniparla/runtime.pyx"
      __pyx_t_8 = 0;

#line 699 "miniparla/runtime.pyx"
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 699 "miniparla/runtime.pyx"
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);

#line 699 "miniparla/runtime.pyx"
        if (likely(__pyx_t_4)) {

#line 699 "miniparla/runtime.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 699 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_t_4);

#line 699 "miniparla/runtime.pyx"
          __Pyx_INCREF(function);

#line 699 "miniparla/runtime.pyx"
          __Pyx_DECREF_SET(__pyx_t_5, function);

#line 699 "miniparla/runtime.pyx"
          __pyx_t_8 = 1;

#line 699 "miniparla/runtime.pyx"
        }

#line 699 "miniparla/runtime.pyx"
      }

#line 699 "miniparla/runtime.pyx"
      #if CYTHON_FAST_PYCALL

#line 699 "miniparla/runtime.pyx"
      if (PyFunction_Check(__pyx_t_5)) {

#line 699 "miniparla/runtime.pyx"
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self, __pyx_8genexpr1__pyx_v_i};

#line 699 "miniparla/runtime.pyx"
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 699 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 699 "miniparla/runtime.pyx"
      } else

#line 699 "miniparla/runtime.pyx"
      #endif

#line 699 "miniparla/runtime.pyx"
      #if CYTHON_FAST_PYCCALL

#line 699 "miniparla/runtime.pyx"
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {

#line 699 "miniparla/runtime.pyx"
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self, __pyx_8genexpr1__pyx_v_i};

#line 699 "miniparla/runtime.pyx"
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 699 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 699 "miniparla/runtime.pyx"
      } else

#line 699 "miniparla/runtime.pyx"
      #endif

#line 699 "miniparla/runtime.pyx"
      {

#line 699 "miniparla/runtime.pyx"
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 699 "miniparla/runtime.pyx"
        if (__pyx_t_4) {

#line 699 "miniparla/runtime.pyx"
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 699 "miniparla/runtime.pyx"
        }

#line 699 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_v_self);

#line 699 "miniparla/runtime.pyx"
        __Pyx_GIVEREF(__pyx_v_self);

#line 699 "miniparla/runtime.pyx"
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_self);

#line 699 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_8genexpr1__pyx_v_i);

#line 699 "miniparla/runtime.pyx"
        __Pyx_GIVEREF(__pyx_8genexpr1__pyx_v_i);

#line 699 "miniparla/runtime.pyx"
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_8genexpr1__pyx_v_i);

#line 699 "miniparla/runtime.pyx"
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 699 "miniparla/runtime.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 699 "miniparla/runtime.pyx"
      }

#line 699 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 699 "miniparla/runtime.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 699, __pyx_L5_error)

#line 699 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 699 "miniparla/runtime.pyx"
    }

#line 699 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 699 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;

#line 699 "miniparla/runtime.pyx"
    goto __pyx_L8_exit_scope;

#line 699 "miniparla/runtime.pyx"
    __pyx_L5_error:;

#line 699 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;

#line 699 "miniparla/runtime.pyx"
    goto __pyx_L1_error;

#line 699 "miniparla/runtime.pyx"
    __pyx_L8_exit_scope:;

#line 699 "miniparla/runtime.pyx"
  } /* exit inner scope */

#line 699 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_worker_threads, __pyx_t_2) < 0) __PYX_ERR(0, 699, __pyx_L1_error)

#line 699 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":701
 *         self._worker_threads = [WorkerThread(self, i) for i in range(n_threads)]
 * 
 *         self._launching_phase_monitor = threading.Condition(threading.Lock())             # <<<<<<<<<<<<<<
 * 
 *         self.inner_scheduler.set_callback(self)
 */

#line 701 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_threading); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 701, __pyx_L1_error)

#line 701 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 701 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Condition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)

#line 701 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 701 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 701 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_threading); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 701, __pyx_L1_error)

#line 701 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 701 "miniparla/runtime.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Lock); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 701, __pyx_L1_error)

#line 701 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 701 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 701 "miniparla/runtime.pyx"
  __pyx_t_5 = NULL;

#line 701 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {

#line 701 "miniparla/runtime.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);

#line 701 "miniparla/runtime.pyx"
    if (likely(__pyx_t_5)) {

#line 701 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);

#line 701 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 701 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 701 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_9, function);

#line 701 "miniparla/runtime.pyx"
    }

#line 701 "miniparla/runtime.pyx"
  }

#line 701 "miniparla/runtime.pyx"
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_9);

#line 701 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 701 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 701, __pyx_L1_error)

#line 701 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 701 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 701 "miniparla/runtime.pyx"
  __pyx_t_9 = NULL;

#line 701 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 701 "miniparla/runtime.pyx"
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);

#line 701 "miniparla/runtime.pyx"
    if (likely(__pyx_t_9)) {

#line 701 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 701 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_9);

#line 701 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 701 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_1, function);

#line 701 "miniparla/runtime.pyx"
    }

#line 701 "miniparla/runtime.pyx"
  }

#line 701 "miniparla/runtime.pyx"
  __pyx_t_2 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_9, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);

#line 701 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 701 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 701 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)

#line 701 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 701 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 701 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_launching_phase_monitor, __pyx_t_2) < 0) __PYX_ERR(0, 701, __pyx_L1_error)

#line 701 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":703
 *         self._launching_phase_monitor = threading.Condition(threading.Lock())
 * 
 *         self.inner_scheduler.set_callback(self)             # <<<<<<<<<<<<<<
 * 
 *         for t in self._worker_threads:
 */

#line 703 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 703, __pyx_L1_error)

#line 703 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 703 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_set_callback); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)

#line 703 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 703 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 703 "miniparla/runtime.pyx"
  __pyx_t_1 = NULL;

#line 703 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 703 "miniparla/runtime.pyx"
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);

#line 703 "miniparla/runtime.pyx"
    if (likely(__pyx_t_1)) {

#line 703 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 703 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_1);

#line 703 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 703 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 703 "miniparla/runtime.pyx"
    }

#line 703 "miniparla/runtime.pyx"
  }

#line 703 "miniparla/runtime.pyx"
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_v_self) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_self);

#line 703 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 703 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 703, __pyx_L1_error)

#line 703 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 703 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 703 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":705
 *         self.inner_scheduler.set_callback(self)
 * 
 *         for t in self._worker_threads:             # <<<<<<<<<<<<<<
 *             t.start()
 * 
 */

#line 705 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_worker_threads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 705, __pyx_L1_error)

#line 705 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 705 "miniparla/runtime.pyx"
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {

#line 705 "miniparla/runtime.pyx"
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;

#line 705 "miniparla/runtime.pyx"
    __pyx_t_7 = NULL;

#line 705 "miniparla/runtime.pyx"
  } else {
    __pyx_t_6 = -1; 
#line 705 "miniparla/runtime.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 705, __pyx_L1_error)

#line 705 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 705 "miniparla/runtime.pyx"
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 705, __pyx_L1_error)

#line 705 "miniparla/runtime.pyx"
  }

#line 705 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 705 "miniparla/runtime.pyx"
  for (;;) {

#line 705 "miniparla/runtime.pyx"
    if (likely(!__pyx_t_7)) {

#line 705 "miniparla/runtime.pyx"
      if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 705 "miniparla/runtime.pyx"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 705 "miniparla/runtime.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 705 "miniparla/runtime.pyx"
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 705, __pyx_L1_error)

#line 705 "miniparla/runtime.pyx"
        #else

#line 705 "miniparla/runtime.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 705, __pyx_L1_error)

#line 705 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 705 "miniparla/runtime.pyx"
        #endif

#line 705 "miniparla/runtime.pyx"
      } else {

#line 705 "miniparla/runtime.pyx"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 705 "miniparla/runtime.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 705 "miniparla/runtime.pyx"
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 705, __pyx_L1_error)

#line 705 "miniparla/runtime.pyx"
        #else

#line 705 "miniparla/runtime.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 705, __pyx_L1_error)

#line 705 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 705 "miniparla/runtime.pyx"
        #endif

#line 705 "miniparla/runtime.pyx"
      }
    } else 
#line 705 "miniparla/runtime.pyx"
{

#line 705 "miniparla/runtime.pyx"
      __pyx_t_2 = __pyx_t_7(__pyx_t_3);

#line 705 "miniparla/runtime.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 705 "miniparla/runtime.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 705 "miniparla/runtime.pyx"
        if (exc_type) {

#line 705 "miniparla/runtime.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 705 "miniparla/runtime.pyx"
          else __PYX_ERR(0, 705, __pyx_L1_error)

#line 705 "miniparla/runtime.pyx"
        }

#line 705 "miniparla/runtime.pyx"
        break;

#line 705 "miniparla/runtime.pyx"
      }

#line 705 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 705 "miniparla/runtime.pyx"
    }

#line 705 "miniparla/runtime.pyx"
    __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);

#line 705 "miniparla/runtime.pyx"
    __pyx_t_2 = 0;

    /* "miniparla/runtime.pyx":706
 * 
 *         for t in self._worker_threads:
 *             t.start()             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */

#line 706 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_t, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 706, __pyx_L1_error)

#line 706 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 706 "miniparla/runtime.pyx"
    __pyx_t_9 = NULL;

#line 706 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 706 "miniparla/runtime.pyx"
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);

#line 706 "miniparla/runtime.pyx"
      if (likely(__pyx_t_9)) {

#line 706 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 706 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_9);

#line 706 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 706 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_1, function);

#line 706 "miniparla/runtime.pyx"
      }

#line 706 "miniparla/runtime.pyx"
    }

#line 706 "miniparla/runtime.pyx"
    __pyx_t_2 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_1);

#line 706 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 706 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 706, __pyx_L1_error)

#line 706 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 706 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 706 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "miniparla/runtime.pyx":705
 *         self.inner_scheduler.set_callback(self)
 * 
 *         for t in self._worker_threads:             # <<<<<<<<<<<<<<
 *             t.start()
 * 
 */

#line 705 "miniparla/runtime.pyx"
  }

#line 705 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "miniparla/runtime.pyx":708
 *             t.start()
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if self.get_free_threads() > 0:
 *                 break
 */

#line 708 "miniparla/runtime.pyx"
  while (1) {

    /* "miniparla/runtime.pyx":709
 * 
 *         while True:
 *             if self.get_free_threads() > 0:             # <<<<<<<<<<<<<<
 *                 break
 *             time.sleep(0.0001)
 */

#line 709 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_free_threads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 709, __pyx_L1_error)

#line 709 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 709 "miniparla/runtime.pyx"
    __pyx_t_1 = NULL;

#line 709 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 709 "miniparla/runtime.pyx"
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);

#line 709 "miniparla/runtime.pyx"
      if (likely(__pyx_t_1)) {

#line 709 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 709 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_1);

#line 709 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 709 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_2, function);

#line 709 "miniparla/runtime.pyx"
      }

#line 709 "miniparla/runtime.pyx"
    }

#line 709 "miniparla/runtime.pyx"
    __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);

#line 709 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 709 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 709, __pyx_L1_error)

#line 709 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 709 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 709 "miniparla/runtime.pyx"
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 709, __pyx_L1_error)

#line 709 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 709 "miniparla/runtime.pyx"
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 709, __pyx_L1_error)

#line 709 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 709 "miniparla/runtime.pyx"
    if (__pyx_t_10) {

      /* "miniparla/runtime.pyx":710
 *         while True:
 *             if self.get_free_threads() > 0:
 *                 break             # <<<<<<<<<<<<<<
 *             time.sleep(0.0001)
 * 
 */

#line 710 "miniparla/runtime.pyx"
      goto __pyx_L12_break;

      /* "miniparla/runtime.pyx":709
 * 
 *         while True:
 *             if self.get_free_threads() > 0:             # <<<<<<<<<<<<<<
 *                 break
 *             time.sleep(0.0001)
 */

#line 709 "miniparla/runtime.pyx"
    }

    /* "miniparla/runtime.pyx":711
 *             if self.get_free_threads() > 0:
 *                 break
 *             time.sleep(0.0001)             # <<<<<<<<<<<<<<
 * 
 *         print("Scheduler ready", flush=True)
 */

#line 711 "miniparla/runtime.pyx"
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L1_error)

#line 711 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 711 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sleep); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 711, __pyx_L1_error)

#line 711 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 711 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 711 "miniparla/runtime.pyx"
    __pyx_t_3 = NULL;

#line 711 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 711 "miniparla/runtime.pyx"
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);

#line 711 "miniparla/runtime.pyx"
      if (likely(__pyx_t_3)) {

#line 711 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 711 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_3);

#line 711 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 711 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_1, function);

#line 711 "miniparla/runtime.pyx"
      }

#line 711 "miniparla/runtime.pyx"
    }

#line 711 "miniparla/runtime.pyx"
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_float_0_0001) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_float_0_0001);

#line 711 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 711 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 711, __pyx_L1_error)

#line 711 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 711 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 711 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 711 "miniparla/runtime.pyx"
  }

#line 711 "miniparla/runtime.pyx"
  __pyx_L12_break:;

  /* "miniparla/runtime.pyx":713
 *             time.sleep(0.0001)
 * 
 *         print("Scheduler ready", flush=True)             # <<<<<<<<<<<<<<
 *         self.start()
 * 
 */

#line 713 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 713, __pyx_L1_error)

#line 713 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 713 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_flush, Py_True) < 0) __PYX_ERR(0, 713, __pyx_L1_error)

#line 713 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__18, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 713, __pyx_L1_error)

#line 713 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 713 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 713 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":714
 * 
 *         print("Scheduler ready", flush=True)
 *         self.start()             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 714 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 714, __pyx_L1_error)

#line 714 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 714 "miniparla/runtime.pyx"
  __pyx_t_3 = NULL;

#line 714 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 714 "miniparla/runtime.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 714 "miniparla/runtime.pyx"
    if (likely(__pyx_t_3)) {

#line 714 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 714 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 714 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 714 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 714 "miniparla/runtime.pyx"
    }

#line 714 "miniparla/runtime.pyx"
  }

#line 714 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);

#line 714 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 714 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)

#line 714 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 714 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 714 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":692
 * class Scheduler(ControllableThread, SchedulerContext):
 * 
 *     def __init__(self, n_threads=8, period=0.001):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._monitor = threading.Condition(threading.Lock())
 */

#line 692 "miniparla/runtime.pyx"


#line 692 "miniparla/runtime.pyx"
  /* function exit code */

#line 692 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 692 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 692 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 692 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 692 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 692 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 692 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 692 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 692 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 692 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 692 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 692 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 692 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_t);

#line 692 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i);

#line 692 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 692 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 692 "miniparla/runtime.pyx"
  return __pyx_r;

#line 692 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":718
 * 
 *     @property
 *     def scheduler(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

#line 718 "miniparla/runtime.pyx"


#line 718 "miniparla/runtime.pyx"
/* Python wrapper */

#line 718 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_3scheduler(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_3scheduler = 
#line 718 "miniparla/runtime.pyx"
{"scheduler", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_3scheduler, METH_O, 0};

#line 718 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_3scheduler(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 718 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 718 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 718 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("scheduler (wrapper)", 0);
  __pyx_r = 
#line 718 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_2scheduler(__pyx_self, ((PyObject *)__pyx_v_self));

#line 718 "miniparla/runtime.pyx"


#line 718 "miniparla/runtime.pyx"
  /* function exit code */

#line 718 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 718 "miniparla/runtime.pyx"
  return __pyx_r;

#line 718 "miniparla/runtime.pyx"
}

#line 718 "miniparla/runtime.pyx"


#line 718 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_2scheduler(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 718 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 718 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 718 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("scheduler", 0);

  /* "miniparla/runtime.pyx":719
 *     @property
 *     def scheduler(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */

#line 719 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 719 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 719 "miniparla/runtime.pyx"
  __pyx_r = __pyx_v_self;

#line 719 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":718
 * 
 *     @property
 *     def scheduler(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

#line 718 "miniparla/runtime.pyx"


#line 718 "miniparla/runtime.pyx"
  /* function exit code */

#line 718 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 718 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 718 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 718 "miniparla/runtime.pyx"
  return __pyx_r;

#line 718 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":721
 *         return self
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         if self.get_active_tasks() != 1:
 *             raise Exception("Scheduler context can only be entered once")
 */

#line 721 "miniparla/runtime.pyx"


#line 721 "miniparla/runtime.pyx"
/* Python wrapper */

#line 721 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_5__enter__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_5__enter__ = 
#line 721 "miniparla/runtime.pyx"
{"__enter__", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_5__enter__, METH_O, 0};

#line 721 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_5__enter__(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 721 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 721 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 721 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = 
#line 721 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_4__enter__(__pyx_self, ((PyObject *)__pyx_v_self));

#line 721 "miniparla/runtime.pyx"


#line 721 "miniparla/runtime.pyx"
  /* function exit code */

#line 721 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 721 "miniparla/runtime.pyx"
  return __pyx_r;

#line 721 "miniparla/runtime.pyx"
}

#line 721 "miniparla/runtime.pyx"


#line 721 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_4__enter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 721 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 721 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 721 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 721 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 721 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 721 "miniparla/runtime.pyx"
  int __pyx_t_4;

#line 721 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 721 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 721 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 721 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "miniparla/runtime.pyx":722
 * 
 *     def __enter__(self):
 *         if self.get_active_tasks() != 1:             # <<<<<<<<<<<<<<
 *             raise Exception("Scheduler context can only be entered once")
 *         return super().__enter__()
 */

#line 722 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_active_tasks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 722, __pyx_L1_error)

#line 722 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 722 "miniparla/runtime.pyx"
  __pyx_t_3 = NULL;

#line 722 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 722 "miniparla/runtime.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 722 "miniparla/runtime.pyx"
    if (likely(__pyx_t_3)) {

#line 722 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 722 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 722 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 722 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 722 "miniparla/runtime.pyx"
    }

#line 722 "miniparla/runtime.pyx"
  }

#line 722 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);

#line 722 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 722 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 722, __pyx_L1_error)

#line 722 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 722 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 722 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 722, __pyx_L1_error)

#line 722 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 722 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 722 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 722, __pyx_L1_error)

#line 722 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 722 "miniparla/runtime.pyx"
  if (unlikely(__pyx_t_4)) {

    /* "miniparla/runtime.pyx":723
 *     def __enter__(self):
 *         if self.get_active_tasks() != 1:
 *             raise Exception("Scheduler context can only be entered once")             # <<<<<<<<<<<<<<
 *         return super().__enter__()
 * 
 */

#line 723 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 723, __pyx_L1_error)

#line 723 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 723 "miniparla/runtime.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 723 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 723 "miniparla/runtime.pyx"
    __PYX_ERR(0, 723, __pyx_L1_error)

    /* "miniparla/runtime.pyx":722
 * 
 *     def __enter__(self):
 *         if self.get_active_tasks() != 1:             # <<<<<<<<<<<<<<
 *             raise Exception("Scheduler context can only be entered once")
 *         return super().__enter__()
 */

#line 722 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":724
 *         if self.get_active_tasks() != 1:
 *             raise Exception("Scheduler context can only be entered once")
 *         return super().__enter__()             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 724 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 724 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_GetClassObj(__pyx_self);

#line 724 "miniparla/runtime.pyx"
  if (!__pyx_t_1) { PyErr_SetString(PyExc_SystemError, "super(): empty __class__ cell"); __PYX_ERR(0, 724, __pyx_L1_error) }

#line 724 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_1);

#line 724 "miniparla/runtime.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 724, __pyx_L1_error)

#line 724 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 724 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 724 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 724 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 724 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_self);

#line 724 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);

#line 724 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 724 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)

#line 724 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 724 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 724 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 724, __pyx_L1_error)

#line 724 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 724 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 724 "miniparla/runtime.pyx"
  __pyx_t_1 = NULL;

#line 724 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 724 "miniparla/runtime.pyx"
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);

#line 724 "miniparla/runtime.pyx"
    if (likely(__pyx_t_1)) {

#line 724 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 724 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_1);

#line 724 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 724 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 724 "miniparla/runtime.pyx"
    }

#line 724 "miniparla/runtime.pyx"
  }

#line 724 "miniparla/runtime.pyx"
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 724 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 724 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 724, __pyx_L1_error)

#line 724 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 724 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 724 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_2;

#line 724 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 724 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":721
 *         return self
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         if self.get_active_tasks() != 1:
 *             raise Exception("Scheduler context can only be entered once")
 */

#line 721 "miniparla/runtime.pyx"


#line 721 "miniparla/runtime.pyx"
  /* function exit code */

#line 721 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 721 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 721 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 721 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 721 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 721 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 721 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 721 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 721 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 721 "miniparla/runtime.pyx"
  return __pyx_r;

#line 721 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":728
 * 
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         super().__exit__(exc_type, exc_val, exc_tb)
 *         self.decr_active_task()
 */

#line 728 "miniparla/runtime.pyx"


#line 728 "miniparla/runtime.pyx"
/* Python wrapper */

#line 728 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_7__exit__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_7__exit__ = 
#line 728 "miniparla/runtime.pyx"
{"__exit__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_9Scheduler_7__exit__, METH_VARARGS|METH_KEYWORDS, 0};

#line 728 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_7__exit__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 728 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_exc_type = 0
#line 728 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_exc_val = 0
#line 728 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_exc_tb = 0
#line 728 "miniparla/runtime.pyx"
;

#line 728 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 728 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 728 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 728 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 728 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 728 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);

#line 728 "miniparla/runtime.pyx"
  {

#line 728 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};

#line 728 "miniparla/runtime.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 728 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 728 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 728 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 728 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  4: 
#line 728 "miniparla/runtime.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 728 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 728 "miniparla/runtime.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 728 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 728 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 728 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 728 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 728 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 728 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 728 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 728 "miniparla/runtime.pyx"
      }

#line 728 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 728 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 728 "miniparla/runtime.pyx"
        case  0:

#line 728 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 728 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 728 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 728 "miniparla/runtime.pyx"
        case  1:

#line 728 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_type)) != 0)) kw_args--;

#line 728 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 4, 4, 1); 
#line 728 "miniparla/runtime.pyx"
__PYX_ERR(0, 728, __pyx_L3_error)

#line 728 "miniparla/runtime.pyx"
        }

#line 728 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 728 "miniparla/runtime.pyx"
        case  2:

#line 728 "miniparla/runtime.pyx"
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;

#line 728 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 4, 4, 2); 
#line 728 "miniparla/runtime.pyx"
__PYX_ERR(0, 728, __pyx_L3_error)

#line 728 "miniparla/runtime.pyx"
        }

#line 728 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 728 "miniparla/runtime.pyx"
        case  3:

#line 728 "miniparla/runtime.pyx"
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;

#line 728 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 4, 4, 3); 
#line 728 "miniparla/runtime.pyx"
__PYX_ERR(0, 728, __pyx_L3_error)

#line 728 "miniparla/runtime.pyx"
        }

#line 728 "miniparla/runtime.pyx"
      }

#line 728 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 728 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) __PYX_ERR(0, 728, __pyx_L3_error)

#line 728 "miniparla/runtime.pyx"
      }

#line 728 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 728 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 728 "miniparla/runtime.pyx"
    } else {

#line 728 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 728 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 728 "miniparla/runtime.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 728 "miniparla/runtime.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 728 "miniparla/runtime.pyx"
    }

#line 728 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 728 "miniparla/runtime.pyx"
    __pyx_v_exc_type = values[1];

#line 728 "miniparla/runtime.pyx"
    __pyx_v_exc_val = values[2];

#line 728 "miniparla/runtime.pyx"
    __pyx_v_exc_tb = values[3];

#line 728 "miniparla/runtime.pyx"
  }

#line 728 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 728 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 728 "miniparla/runtime.pyx"
__PYX_ERR(0, 728, __pyx_L3_error)

#line 728 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 728 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 728 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 728 "miniparla/runtime.pyx"
  return NULL;

#line 728 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 728 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_6__exit__(__pyx_self, __pyx_v_self, __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

#line 728 "miniparla/runtime.pyx"


#line 728 "miniparla/runtime.pyx"
  /* function exit code */

#line 728 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 728 "miniparla/runtime.pyx"
  return __pyx_r;

#line 728 "miniparla/runtime.pyx"
}

#line 728 "miniparla/runtime.pyx"


#line 728 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_6__exit__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_exc_type, PyObject *__pyx_v_exc_val, PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_v_t = NULL
#line 728 "miniparla/runtime.pyx"
;

#line 728 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 728 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 728 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 728 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 728 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 728 "miniparla/runtime.pyx"
  int __pyx_t_4;

#line 728 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 728 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 728 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 728 "miniparla/runtime.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 728 "miniparla/runtime.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 728 "miniparla/runtime.pyx"
  int __pyx_t_10;

#line 728 "miniparla/runtime.pyx"
  Py_ssize_t __pyx_t_11;

#line 728 "miniparla/runtime.pyx"
  PyObject *(*__pyx_t_12)(PyObject *);

#line 728 "miniparla/runtime.pyx"
  PyObject *__pyx_t_13 = NULL;

#line 728 "miniparla/runtime.pyx"
  int __pyx_t_14;

#line 728 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 728 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 728 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 728 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "miniparla/runtime.pyx":729
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         super().__exit__(exc_type, exc_val, exc_tb)             # <<<<<<<<<<<<<<
 *         self.decr_active_task()
 * 
 */

#line 729 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_CyFunction_GetClassObj(__pyx_self);

#line 729 "miniparla/runtime.pyx"
  if (!__pyx_t_2) { PyErr_SetString(PyExc_SystemError, "super(): empty __class__ cell"); __PYX_ERR(0, 729, __pyx_L1_error) }

#line 729 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_2);

#line 729 "miniparla/runtime.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)

#line 729 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 729 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 729 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 729 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 729 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_self);

#line 729 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);

#line 729 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 729 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 729, __pyx_L1_error)

#line 729 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 729 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 729 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)

#line 729 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 729 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 729 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 729 "miniparla/runtime.pyx"
  __pyx_t_4 = 0;

#line 729 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 729 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 729 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 729 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 729 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 729 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 729 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 729 "miniparla/runtime.pyx"
      __pyx_t_4 = 1;

#line 729 "miniparla/runtime.pyx"
    }

#line 729 "miniparla/runtime.pyx"
  }

#line 729 "miniparla/runtime.pyx"
  #if CYTHON_FAST_PYCALL

#line 729 "miniparla/runtime.pyx"
  if (PyFunction_Check(__pyx_t_3)) {

#line 729 "miniparla/runtime.pyx"
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb};

#line 729 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)

#line 729 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 729 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 729 "miniparla/runtime.pyx"
  } else

#line 729 "miniparla/runtime.pyx"
  #endif

#line 729 "miniparla/runtime.pyx"
  #if CYTHON_FAST_PYCCALL

#line 729 "miniparla/runtime.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 729 "miniparla/runtime.pyx"
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb};

#line 729 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)

#line 729 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 729 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 729 "miniparla/runtime.pyx"
  } else

#line 729 "miniparla/runtime.pyx"
  #endif

#line 729 "miniparla/runtime.pyx"
  {

#line 729 "miniparla/runtime.pyx"
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 729, __pyx_L1_error)

#line 729 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 729 "miniparla/runtime.pyx"
    if (__pyx_t_2) {

#line 729 "miniparla/runtime.pyx"
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;

#line 729 "miniparla/runtime.pyx"
    }

#line 729 "miniparla/runtime.pyx"
    __Pyx_INCREF(__pyx_v_exc_type);

#line 729 "miniparla/runtime.pyx"
    __Pyx_GIVEREF(__pyx_v_exc_type);

#line 729 "miniparla/runtime.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_exc_type);

#line 729 "miniparla/runtime.pyx"
    __Pyx_INCREF(__pyx_v_exc_val);

#line 729 "miniparla/runtime.pyx"
    __Pyx_GIVEREF(__pyx_v_exc_val);

#line 729 "miniparla/runtime.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_exc_val);

#line 729 "miniparla/runtime.pyx"
    __Pyx_INCREF(__pyx_v_exc_tb);

#line 729 "miniparla/runtime.pyx"
    __Pyx_GIVEREF(__pyx_v_exc_tb);

#line 729 "miniparla/runtime.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_exc_tb);

#line 729 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)

#line 729 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 729 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 729 "miniparla/runtime.pyx"
  }

#line 729 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 729 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":730
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         super().__exit__(exc_type, exc_val, exc_tb)
 *         self.decr_active_task()             # <<<<<<<<<<<<<<
 * 
 *         with self._monitor:
 */

#line 730 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_decr_active_task); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L1_error)

#line 730 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 730 "miniparla/runtime.pyx"
  __pyx_t_5 = NULL;

#line 730 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 730 "miniparla/runtime.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 730 "miniparla/runtime.pyx"
    if (likely(__pyx_t_5)) {

#line 730 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 730 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 730 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 730 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 730 "miniparla/runtime.pyx"
    }

#line 730 "miniparla/runtime.pyx"
  }

#line 730 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 730 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 730 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 730, __pyx_L1_error)

#line 730 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 730 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 730 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":732
 *         self.decr_active_task()
 * 
 *         with self._monitor:             # <<<<<<<<<<<<<<
 *             while self.inner_scheduler.get_status():
 *                 self._monitor.wait()
 */

#line 732 "miniparla/runtime.pyx"
  /*with:*/ {

#line 732 "miniparla/runtime.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_monitor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 732, __pyx_L1_error)

#line 732 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 732 "miniparla/runtime.pyx"
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 732, __pyx_L1_error)

#line 732 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 732 "miniparla/runtime.pyx"
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 732, __pyx_L3_error)

#line 732 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 732 "miniparla/runtime.pyx"
    __pyx_t_2 = NULL;

#line 732 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 732 "miniparla/runtime.pyx"
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);

#line 732 "miniparla/runtime.pyx"
      if (likely(__pyx_t_2)) {

#line 732 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 732 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_2);

#line 732 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 732 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 732 "miniparla/runtime.pyx"
      }

#line 732 "miniparla/runtime.pyx"
    }

#line 732 "miniparla/runtime.pyx"
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_5);

#line 732 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 732 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 732, __pyx_L3_error)

#line 732 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 732 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 732 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 732 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 732 "miniparla/runtime.pyx"
    /*try:*/ {

#line 732 "miniparla/runtime.pyx"
      {

#line 732 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_declare

#line 732 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_assign

#line 732 "miniparla/runtime.pyx"
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);

#line 732 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_7);

#line 732 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_8);

#line 732 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_9);

#line 732 "miniparla/runtime.pyx"
        /*try:*/ {

          /* "miniparla/runtime.pyx":733
 * 
 *         with self._monitor:
 *             while self.inner_scheduler.get_status():             # <<<<<<<<<<<<<<
 *                 self._monitor.wait()
 * 
 */

#line 733 "miniparla/runtime.pyx"
          while (1) {

#line 733 "miniparla/runtime.pyx"
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L7_error)

#line 733 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_3);

#line 733 "miniparla/runtime.pyx"
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_status); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 733, __pyx_L7_error)

#line 733 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_5);

#line 733 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 733 "miniparla/runtime.pyx"
            __pyx_t_3 = NULL;

#line 733 "miniparla/runtime.pyx"
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 733 "miniparla/runtime.pyx"
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);

#line 733 "miniparla/runtime.pyx"
              if (likely(__pyx_t_3)) {

#line 733 "miniparla/runtime.pyx"
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 733 "miniparla/runtime.pyx"
                __Pyx_INCREF(__pyx_t_3);

#line 733 "miniparla/runtime.pyx"
                __Pyx_INCREF(function);

#line 733 "miniparla/runtime.pyx"
                __Pyx_DECREF_SET(__pyx_t_5, function);

#line 733 "miniparla/runtime.pyx"
              }

#line 733 "miniparla/runtime.pyx"
            }

#line 733 "miniparla/runtime.pyx"
            __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_5);

#line 733 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 733 "miniparla/runtime.pyx"
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L7_error)

#line 733 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 733 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 733 "miniparla/runtime.pyx"
            __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 733, __pyx_L7_error)

#line 733 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 733 "miniparla/runtime.pyx"
            if (!__pyx_t_10) break;

            /* "miniparla/runtime.pyx":734
 *         with self._monitor:
 *             while self.inner_scheduler.get_status():
 *                 self._monitor.wait()             # <<<<<<<<<<<<<<
 * 
 *             for t in self._worker_threads:
 */

#line 734 "miniparla/runtime.pyx"
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_monitor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 734, __pyx_L7_error)

#line 734 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_5);

#line 734 "miniparla/runtime.pyx"
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_wait); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 734, __pyx_L7_error)

#line 734 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_3);

#line 734 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 734 "miniparla/runtime.pyx"
            __pyx_t_5 = NULL;

#line 734 "miniparla/runtime.pyx"
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 734 "miniparla/runtime.pyx"
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 734 "miniparla/runtime.pyx"
              if (likely(__pyx_t_5)) {

#line 734 "miniparla/runtime.pyx"
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 734 "miniparla/runtime.pyx"
                __Pyx_INCREF(__pyx_t_5);

#line 734 "miniparla/runtime.pyx"
                __Pyx_INCREF(function);

#line 734 "miniparla/runtime.pyx"
                __Pyx_DECREF_SET(__pyx_t_3, function);

#line 734 "miniparla/runtime.pyx"
              }

#line 734 "miniparla/runtime.pyx"
            }

#line 734 "miniparla/runtime.pyx"
            __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 734 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 734 "miniparla/runtime.pyx"
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L7_error)

#line 734 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 734 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 734 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 734 "miniparla/runtime.pyx"
          }

          /* "miniparla/runtime.pyx":736
 *                 self._monitor.wait()
 * 
 *             for t in self._worker_threads:             # <<<<<<<<<<<<<<
 *                 t.join()
 * 
 */

#line 736 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_worker_threads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L7_error)

#line 736 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 736 "miniparla/runtime.pyx"
          if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {

#line 736 "miniparla/runtime.pyx"
            __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_11 = 0;

#line 736 "miniparla/runtime.pyx"
            __pyx_t_12 = NULL;

#line 736 "miniparla/runtime.pyx"
          } else {
            __pyx_t_11 = -1; 
#line 736 "miniparla/runtime.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 736, __pyx_L7_error)

#line 736 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_3);

#line 736 "miniparla/runtime.pyx"
            __pyx_t_12 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 736, __pyx_L7_error)

#line 736 "miniparla/runtime.pyx"
          }

#line 736 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 736 "miniparla/runtime.pyx"
          for (;;) {

#line 736 "miniparla/runtime.pyx"
            if (likely(!__pyx_t_12)) {

#line 736 "miniparla/runtime.pyx"
              if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 736 "miniparla/runtime.pyx"
                if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 736 "miniparla/runtime.pyx"
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 736 "miniparla/runtime.pyx"
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_1); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 736, __pyx_L7_error)

#line 736 "miniparla/runtime.pyx"
                #else

#line 736 "miniparla/runtime.pyx"
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L7_error)

#line 736 "miniparla/runtime.pyx"
                __Pyx_GOTREF(__pyx_t_1);

#line 736 "miniparla/runtime.pyx"
                #endif

#line 736 "miniparla/runtime.pyx"
              } else {

#line 736 "miniparla/runtime.pyx"
                if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 736 "miniparla/runtime.pyx"
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 736 "miniparla/runtime.pyx"
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_1); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 736, __pyx_L7_error)

#line 736 "miniparla/runtime.pyx"
                #else

#line 736 "miniparla/runtime.pyx"
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L7_error)

#line 736 "miniparla/runtime.pyx"
                __Pyx_GOTREF(__pyx_t_1);

#line 736 "miniparla/runtime.pyx"
                #endif

#line 736 "miniparla/runtime.pyx"
              }
            } else 
#line 736 "miniparla/runtime.pyx"
{

#line 736 "miniparla/runtime.pyx"
              __pyx_t_1 = __pyx_t_12(__pyx_t_3);

#line 736 "miniparla/runtime.pyx"
              if (unlikely(!__pyx_t_1)) {

#line 736 "miniparla/runtime.pyx"
                PyObject* exc_type = PyErr_Occurred();

#line 736 "miniparla/runtime.pyx"
                if (exc_type) {

#line 736 "miniparla/runtime.pyx"
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 736 "miniparla/runtime.pyx"
                  else __PYX_ERR(0, 736, __pyx_L7_error)

#line 736 "miniparla/runtime.pyx"
                }

#line 736 "miniparla/runtime.pyx"
                break;

#line 736 "miniparla/runtime.pyx"
              }

#line 736 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_1);

#line 736 "miniparla/runtime.pyx"
            }

#line 736 "miniparla/runtime.pyx"
            __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_1);

#line 736 "miniparla/runtime.pyx"
            __pyx_t_1 = 0;

            /* "miniparla/runtime.pyx":737
 * 
 *             for t in self._worker_threads:
 *                 t.join()             # <<<<<<<<<<<<<<
 * 
 *             if self._exceptions:
 */

#line 737 "miniparla/runtime.pyx"
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_t, __pyx_n_s_join); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 737, __pyx_L7_error)

#line 737 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_5);

#line 737 "miniparla/runtime.pyx"
            __pyx_t_2 = NULL;

#line 737 "miniparla/runtime.pyx"
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 737 "miniparla/runtime.pyx"
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);

#line 737 "miniparla/runtime.pyx"
              if (likely(__pyx_t_2)) {

#line 737 "miniparla/runtime.pyx"
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 737 "miniparla/runtime.pyx"
                __Pyx_INCREF(__pyx_t_2);

#line 737 "miniparla/runtime.pyx"
                __Pyx_INCREF(function);

#line 737 "miniparla/runtime.pyx"
                __Pyx_DECREF_SET(__pyx_t_5, function);

#line 737 "miniparla/runtime.pyx"
              }

#line 737 "miniparla/runtime.pyx"
            }

#line 737 "miniparla/runtime.pyx"
            __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_5);

#line 737 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 737 "miniparla/runtime.pyx"
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L7_error)

#line 737 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 737 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 737 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "miniparla/runtime.pyx":736
 *                 self._monitor.wait()
 * 
 *             for t in self._worker_threads:             # <<<<<<<<<<<<<<
 *                 t.join()
 * 
 */

#line 736 "miniparla/runtime.pyx"
          }

#line 736 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "miniparla/runtime.pyx":739
 *                 t.join()
 * 
 *             if self._exceptions:             # <<<<<<<<<<<<<<
 *                 raise self._exceptions[0]
 * 
 */

#line 739 "miniparla/runtime.pyx"
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_exceptions); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 739, __pyx_L7_error)

#line 739 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 739 "miniparla/runtime.pyx"
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 739, __pyx_L7_error)

#line 739 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 739 "miniparla/runtime.pyx"
          if (unlikely(__pyx_t_10)) {

            /* "miniparla/runtime.pyx":740
 * 
 *             if self._exceptions:
 *                 raise self._exceptions[0]             # <<<<<<<<<<<<<<
 * 
 *     def incr_resources(self, vcus):
 */

#line 740 "miniparla/runtime.pyx"
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_exceptions); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 740, __pyx_L7_error)

#line 740 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_3);

#line 740 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 740, __pyx_L7_error)

#line 740 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 740 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 740 "miniparla/runtime.pyx"
            __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 740 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 740 "miniparla/runtime.pyx"
            __PYX_ERR(0, 740, __pyx_L7_error)

            /* "miniparla/runtime.pyx":739
 *                 t.join()
 * 
 *             if self._exceptions:             # <<<<<<<<<<<<<<
 *                 raise self._exceptions[0]
 * 
 */

#line 739 "miniparla/runtime.pyx"
          }

          /* "miniparla/runtime.pyx":732
 *         self.decr_active_task()
 * 
 *         with self._monitor:             # <<<<<<<<<<<<<<
 *             while self.inner_scheduler.get_status():
 *                 self._monitor.wait()
 */

#line 732 "miniparla/runtime.pyx"
        }

#line 732 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 732 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 732 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 732 "miniparla/runtime.pyx"
        goto __pyx_L12_try_end;

#line 732 "miniparla/runtime.pyx"
        __pyx_L7_error:;

#line 732 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 732 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 732 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 732 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 732 "miniparla/runtime.pyx"
        /*except:*/ {

#line 732 "miniparla/runtime.pyx"
          __Pyx_AddTraceback("miniparla.runtime.Scheduler.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 732 "miniparla/runtime.pyx"
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_3, &__pyx_t_5) < 0) __PYX_ERR(0, 732, __pyx_L9_except_error)

#line 732 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 732 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 732 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 732 "miniparla/runtime.pyx"
          __pyx_t_2 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L9_except_error)

#line 732 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 732 "miniparla/runtime.pyx"
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL);

#line 732 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 732 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 732 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 732, __pyx_L9_except_error)

#line 732 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_13);

#line 732 "miniparla/runtime.pyx"
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_13);

#line 732 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 732 "miniparla/runtime.pyx"
          if (__pyx_t_10 < 0) __PYX_ERR(0, 732, __pyx_L9_except_error)

#line 732 "miniparla/runtime.pyx"
          __pyx_t_14 = ((!(__pyx_t_10 != 0)) != 0);

#line 732 "miniparla/runtime.pyx"
          if (__pyx_t_14) {

#line 732 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_1);

#line 732 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_3);

#line 732 "miniparla/runtime.pyx"
            __Pyx_XGIVEREF(__pyx_t_5);

#line 732 "miniparla/runtime.pyx"
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_3, __pyx_t_5);
            __pyx_t_1 = 0; __pyx_t_3 = 0; __pyx_t_5 = 0; 
#line 732 "miniparla/runtime.pyx"


#line 732 "miniparla/runtime.pyx"
            __PYX_ERR(0, 732, __pyx_L9_except_error)

#line 732 "miniparla/runtime.pyx"
          }

#line 732 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 732 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 732 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 732 "miniparla/runtime.pyx"
          goto __pyx_L8_exception_handled;

#line 732 "miniparla/runtime.pyx"
        }

#line 732 "miniparla/runtime.pyx"
        __pyx_L9_except_error:;

#line 732 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 732 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 732 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_9);

#line 732 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);

#line 732 "miniparla/runtime.pyx"
        goto __pyx_L1_error;

#line 732 "miniparla/runtime.pyx"
        __pyx_L8_exception_handled:;

#line 732 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 732 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 732 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_9);

#line 732 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);

#line 732 "miniparla/runtime.pyx"
        __pyx_L12_try_end:;

#line 732 "miniparla/runtime.pyx"
      }

#line 732 "miniparla/runtime.pyx"
    }

#line 732 "miniparla/runtime.pyx"
    /*finally:*/ {

#line 732 "miniparla/runtime.pyx"
      /*normal exit:*/{

#line 732 "miniparla/runtime.pyx"
        if (__pyx_t_6) {

#line 732 "miniparla/runtime.pyx"
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__6, NULL);

#line 732 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 732 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 732, __pyx_L1_error)

#line 732 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 732 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 732 "miniparla/runtime.pyx"
        }

#line 732 "miniparla/runtime.pyx"
        goto __pyx_L6;

#line 732 "miniparla/runtime.pyx"
      }

#line 732 "miniparla/runtime.pyx"
      __pyx_L6:;

#line 732 "miniparla/runtime.pyx"
    }

#line 732 "miniparla/runtime.pyx"
    goto __pyx_L21;

#line 732 "miniparla/runtime.pyx"
    __pyx_L3_error:;

#line 732 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 732 "miniparla/runtime.pyx"
    goto __pyx_L1_error;

#line 732 "miniparla/runtime.pyx"
    __pyx_L21:;

#line 732 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":728
 * 
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         super().__exit__(exc_type, exc_val, exc_tb)
 *         self.decr_active_task()
 */

#line 728 "miniparla/runtime.pyx"


#line 728 "miniparla/runtime.pyx"
  /* function exit code */

#line 728 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 728 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 728 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 728 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 728 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 728 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 728 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 728 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 728 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 728 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 728 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_t);

#line 728 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 728 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 728 "miniparla/runtime.pyx"
  return __pyx_r;

#line 728 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":742
 *                 raise self._exceptions[0]
 * 
 *     def incr_resources(self, vcus):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_resources(vcus)
 * 
 */

#line 742 "miniparla/runtime.pyx"


#line 742 "miniparla/runtime.pyx"
/* Python wrapper */

#line 742 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_9incr_resources(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_9incr_resources = 
#line 742 "miniparla/runtime.pyx"
{"incr_resources", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_9Scheduler_9incr_resources, METH_VARARGS|METH_KEYWORDS, 0};

#line 742 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_9incr_resources(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 742 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_vcus = 0
#line 742 "miniparla/runtime.pyx"
;

#line 742 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 742 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 742 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 742 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 742 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 742 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_resources (wrapper)", 0);

#line 742 "miniparla/runtime.pyx"
  {

#line 742 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_vcus,0};

#line 742 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 742 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 742 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 742 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 742 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 742 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 742 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 742 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 742 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 742 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 742 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 742 "miniparla/runtime.pyx"
      }

#line 742 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 742 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 742 "miniparla/runtime.pyx"
        case  0:

#line 742 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 742 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 742 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 742 "miniparla/runtime.pyx"
        case  1:

#line 742 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vcus)) != 0)) kw_args--;

#line 742 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("incr_resources", 1, 2, 2, 1); 
#line 742 "miniparla/runtime.pyx"
__PYX_ERR(0, 742, __pyx_L3_error)

#line 742 "miniparla/runtime.pyx"
        }

#line 742 "miniparla/runtime.pyx"
      }

#line 742 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 742 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "incr_resources") < 0)) __PYX_ERR(0, 742, __pyx_L3_error)

#line 742 "miniparla/runtime.pyx"
      }

#line 742 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 742 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 742 "miniparla/runtime.pyx"
    } else {

#line 742 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 742 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 742 "miniparla/runtime.pyx"
    }

#line 742 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 742 "miniparla/runtime.pyx"
    __pyx_v_vcus = values[1];

#line 742 "miniparla/runtime.pyx"
  }

#line 742 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 742 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("incr_resources", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 742 "miniparla/runtime.pyx"
__PYX_ERR(0, 742, __pyx_L3_error)

#line 742 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 742 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.incr_resources", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 742 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 742 "miniparla/runtime.pyx"
  return NULL;

#line 742 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 742 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_8incr_resources(__pyx_self, __pyx_v_self, __pyx_v_vcus);

#line 742 "miniparla/runtime.pyx"


#line 742 "miniparla/runtime.pyx"
  /* function exit code */

#line 742 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 742 "miniparla/runtime.pyx"
  return __pyx_r;

#line 742 "miniparla/runtime.pyx"
}

#line 742 "miniparla/runtime.pyx"


#line 742 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_8incr_resources(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_vcus) {

#line 742 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 742 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 742 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 742 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 742 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 742 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 742 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 742 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 742 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_resources", 0);

  /* "miniparla/runtime.pyx":743
 * 
 *     def incr_resources(self, vcus):
 *         self.inner_scheduler.incr_resources(vcus)             # <<<<<<<<<<<<<<
 * 
 *     def decr_resources(self, vcus):
 */

#line 743 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 743, __pyx_L1_error)

#line 743 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 743 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_incr_resources); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 743, __pyx_L1_error)

#line 743 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 743 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 743 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 743 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 743 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 743 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 743 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 743 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 743 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 743 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 743 "miniparla/runtime.pyx"
    }

#line 743 "miniparla/runtime.pyx"
  }

#line 743 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_vcus) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_vcus);

#line 743 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 743 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 743, __pyx_L1_error)

#line 743 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 743 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 743 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":742
 *                 raise self._exceptions[0]
 * 
 *     def incr_resources(self, vcus):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_resources(vcus)
 * 
 */

#line 742 "miniparla/runtime.pyx"


#line 742 "miniparla/runtime.pyx"
  /* function exit code */

#line 742 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 742 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 742 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 742 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 742 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 742 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 742 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.incr_resources", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 742 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 742 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 742 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 742 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 742 "miniparla/runtime.pyx"
  return __pyx_r;

#line 742 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":745
 *         self.inner_scheduler.incr_resources(vcus)
 * 
 *     def decr_resources(self, vcus):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_resources(vcus)
 * 
 */

#line 745 "miniparla/runtime.pyx"


#line 745 "miniparla/runtime.pyx"
/* Python wrapper */

#line 745 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_11decr_resources(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_11decr_resources = 
#line 745 "miniparla/runtime.pyx"
{"decr_resources", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_9Scheduler_11decr_resources, METH_VARARGS|METH_KEYWORDS, 0};

#line 745 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_11decr_resources(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 745 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_vcus = 0
#line 745 "miniparla/runtime.pyx"
;

#line 745 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 745 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 745 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 745 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 745 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 745 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_resources (wrapper)", 0);

#line 745 "miniparla/runtime.pyx"
  {

#line 745 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_vcus,0};

#line 745 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 745 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 745 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 745 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 745 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 745 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 745 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 745 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 745 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 745 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 745 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 745 "miniparla/runtime.pyx"
      }

#line 745 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 745 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 745 "miniparla/runtime.pyx"
        case  0:

#line 745 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 745 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 745 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 745 "miniparla/runtime.pyx"
        case  1:

#line 745 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vcus)) != 0)) kw_args--;

#line 745 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("decr_resources", 1, 2, 2, 1); 
#line 745 "miniparla/runtime.pyx"
__PYX_ERR(0, 745, __pyx_L3_error)

#line 745 "miniparla/runtime.pyx"
        }

#line 745 "miniparla/runtime.pyx"
      }

#line 745 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 745 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decr_resources") < 0)) __PYX_ERR(0, 745, __pyx_L3_error)

#line 745 "miniparla/runtime.pyx"
      }

#line 745 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 745 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 745 "miniparla/runtime.pyx"
    } else {

#line 745 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 745 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 745 "miniparla/runtime.pyx"
    }

#line 745 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 745 "miniparla/runtime.pyx"
    __pyx_v_vcus = values[1];

#line 745 "miniparla/runtime.pyx"
  }

#line 745 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 745 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decr_resources", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 745 "miniparla/runtime.pyx"
__PYX_ERR(0, 745, __pyx_L3_error)

#line 745 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 745 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.decr_resources", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 745 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 745 "miniparla/runtime.pyx"
  return NULL;

#line 745 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 745 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_10decr_resources(__pyx_self, __pyx_v_self, __pyx_v_vcus);

#line 745 "miniparla/runtime.pyx"


#line 745 "miniparla/runtime.pyx"
  /* function exit code */

#line 745 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 745 "miniparla/runtime.pyx"
  return __pyx_r;

#line 745 "miniparla/runtime.pyx"
}

#line 745 "miniparla/runtime.pyx"


#line 745 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_10decr_resources(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_vcus) {

#line 745 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 745 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 745 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 745 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 745 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 745 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 745 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 745 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 745 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_resources", 0);

  /* "miniparla/runtime.pyx":746
 * 
 *     def decr_resources(self, vcus):
 *         self.inner_scheduler.decr_resources(vcus)             # <<<<<<<<<<<<<<
 * 
 *     def current_resources(self):
 */

#line 746 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 746, __pyx_L1_error)

#line 746 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 746 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decr_resources); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L1_error)

#line 746 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 746 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 746 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 746 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 746 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 746 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 746 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 746 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 746 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 746 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 746 "miniparla/runtime.pyx"
    }

#line 746 "miniparla/runtime.pyx"
  }

#line 746 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_vcus) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_vcus);

#line 746 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 746 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 746, __pyx_L1_error)

#line 746 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 746 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 746 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":745
 *         self.inner_scheduler.incr_resources(vcus)
 * 
 *     def decr_resources(self, vcus):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_resources(vcus)
 * 
 */

#line 745 "miniparla/runtime.pyx"


#line 745 "miniparla/runtime.pyx"
  /* function exit code */

#line 745 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 745 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 745 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 745 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 745 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 745 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 745 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.decr_resources", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 745 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 745 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 745 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 745 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 745 "miniparla/runtime.pyx"
  return __pyx_r;

#line 745 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":748
 *         self.inner_scheduler.decr_resources(vcus)
 * 
 *     def current_resources(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_resources()
 * 
 */

#line 748 "miniparla/runtime.pyx"


#line 748 "miniparla/runtime.pyx"
/* Python wrapper */

#line 748 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_13current_resources(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_13current_resources = 
#line 748 "miniparla/runtime.pyx"
{"current_resources", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_13current_resources, METH_O, 0};

#line 748 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_13current_resources(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 748 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 748 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 748 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("current_resources (wrapper)", 0);
  __pyx_r = 
#line 748 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_12current_resources(__pyx_self, ((PyObject *)__pyx_v_self));

#line 748 "miniparla/runtime.pyx"


#line 748 "miniparla/runtime.pyx"
  /* function exit code */

#line 748 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 748 "miniparla/runtime.pyx"
  return __pyx_r;

#line 748 "miniparla/runtime.pyx"
}

#line 748 "miniparla/runtime.pyx"


#line 748 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_12current_resources(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 748 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 748 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 748 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 748 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 748 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 748 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 748 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 748 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 748 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("current_resources", 0);

  /* "miniparla/runtime.pyx":749
 * 
 *     def current_resources(self):
 *         return self.inner_scheduler.get_resources()             # <<<<<<<<<<<<<<
 * 
 *     def incr_active_tasks(self):
 */

#line 749 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 749 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 749, __pyx_L1_error)

#line 749 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 749 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_resources); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 749, __pyx_L1_error)

#line 749 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 749 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 749 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 749 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 749 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 749 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 749 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 749 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 749 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 749 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 749 "miniparla/runtime.pyx"
    }

#line 749 "miniparla/runtime.pyx"
  }

#line 749 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 749 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 749 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 749, __pyx_L1_error)

#line 749 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 749 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 749 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 749 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 749 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":748
 *         self.inner_scheduler.decr_resources(vcus)
 * 
 *     def current_resources(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_resources()
 * 
 */

#line 748 "miniparla/runtime.pyx"


#line 748 "miniparla/runtime.pyx"
  /* function exit code */

#line 748 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 748 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 748 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 748 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 748 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.current_resources", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 748 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 748 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 748 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 748 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 748 "miniparla/runtime.pyx"
  return __pyx_r;

#line 748 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":751
 *         return self.inner_scheduler.get_resources()
 * 
 *     def incr_active_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_active_tasks()
 * 
 */

#line 751 "miniparla/runtime.pyx"


#line 751 "miniparla/runtime.pyx"
/* Python wrapper */

#line 751 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_15incr_active_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_15incr_active_tasks = 
#line 751 "miniparla/runtime.pyx"
{"incr_active_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_15incr_active_tasks, METH_O, 0};

#line 751 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_15incr_active_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 751 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 751 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 751 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_active_tasks (wrapper)", 0);
  __pyx_r = 
#line 751 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_14incr_active_tasks(__pyx_self, ((PyObject *)__pyx_v_self));

#line 751 "miniparla/runtime.pyx"


#line 751 "miniparla/runtime.pyx"
  /* function exit code */

#line 751 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 751 "miniparla/runtime.pyx"
  return __pyx_r;

#line 751 "miniparla/runtime.pyx"
}

#line 751 "miniparla/runtime.pyx"


#line 751 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_14incr_active_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 751 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 751 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 751 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 751 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 751 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 751 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 751 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 751 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 751 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_active_tasks", 0);

  /* "miniparla/runtime.pyx":752
 * 
 *     def incr_active_tasks(self):
 *         self.inner_scheduler.incr_active_tasks()             # <<<<<<<<<<<<<<
 * 
 *     def decr_active_task(self):
 */

#line 752 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 752, __pyx_L1_error)

#line 752 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 752 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_incr_active_tasks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L1_error)

#line 752 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 752 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 752 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 752 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 752 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 752 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 752 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 752 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 752 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 752 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 752 "miniparla/runtime.pyx"
    }

#line 752 "miniparla/runtime.pyx"
  }

#line 752 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 752 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 752 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L1_error)

#line 752 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 752 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 752 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":751
 *         return self.inner_scheduler.get_resources()
 * 
 *     def incr_active_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_active_tasks()
 * 
 */

#line 751 "miniparla/runtime.pyx"


#line 751 "miniparla/runtime.pyx"
  /* function exit code */

#line 751 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 751 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 751 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 751 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 751 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 751 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 751 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.incr_active_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 751 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 751 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 751 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 751 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 751 "miniparla/runtime.pyx"
  return __pyx_r;

#line 751 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":754
 *         self.inner_scheduler.incr_active_tasks()
 * 
 *     def decr_active_task(self):             # <<<<<<<<<<<<<<
 *         done = self.inner_scheduler.decr_active_tasks()
 *         if done:
 */

#line 754 "miniparla/runtime.pyx"


#line 754 "miniparla/runtime.pyx"
/* Python wrapper */

#line 754 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_17decr_active_task(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_17decr_active_task = 
#line 754 "miniparla/runtime.pyx"
{"decr_active_task", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_17decr_active_task, METH_O, 0};

#line 754 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_17decr_active_task(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 754 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 754 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 754 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_active_task (wrapper)", 0);
  __pyx_r = 
#line 754 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_16decr_active_task(__pyx_self, ((PyObject *)__pyx_v_self));

#line 754 "miniparla/runtime.pyx"


#line 754 "miniparla/runtime.pyx"
  /* function exit code */

#line 754 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 754 "miniparla/runtime.pyx"
  return __pyx_r;

#line 754 "miniparla/runtime.pyx"
}

#line 754 "miniparla/runtime.pyx"


#line 754 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_16decr_active_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_done = NULL
#line 754 "miniparla/runtime.pyx"
;

#line 754 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 754 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 754 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 754 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 754 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 754 "miniparla/runtime.pyx"
  int __pyx_t_4;

#line 754 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 754 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 754 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 754 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_active_task", 0);

  /* "miniparla/runtime.pyx":755
 * 
 *     def decr_active_task(self):
 *         done = self.inner_scheduler.decr_active_tasks()             # <<<<<<<<<<<<<<
 *         if done:
 *             self.stop()
 */

#line 755 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 755, __pyx_L1_error)

#line 755 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 755 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decr_active_tasks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 755, __pyx_L1_error)

#line 755 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 755 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 755 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 755 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 755 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 755 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 755 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 755 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 755 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 755 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 755 "miniparla/runtime.pyx"
    }

#line 755 "miniparla/runtime.pyx"
  }

#line 755 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 755 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 755 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)

#line 755 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 755 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 755 "miniparla/runtime.pyx"
  __pyx_v_done = __pyx_t_1;

#line 755 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":756
 *     def decr_active_task(self):
 *         done = self.inner_scheduler.decr_active_tasks()
 *         if done:             # <<<<<<<<<<<<<<
 *             self.stop()
 * 
 */

#line 756 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_done); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 756, __pyx_L1_error)

#line 756 "miniparla/runtime.pyx"
  if (__pyx_t_4) {

    /* "miniparla/runtime.pyx":757
 *         done = self.inner_scheduler.decr_active_tasks()
 *         if done:
 *             self.stop()             # <<<<<<<<<<<<<<
 * 
 *     def cpp_callback(self, task, worker):
 */

#line 757 "miniparla/runtime.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 757, __pyx_L1_error)

#line 757 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 757 "miniparla/runtime.pyx"
    __pyx_t_2 = NULL;

#line 757 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 757 "miniparla/runtime.pyx"
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 757 "miniparla/runtime.pyx"
      if (likely(__pyx_t_2)) {

#line 757 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 757 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_2);

#line 757 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 757 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 757 "miniparla/runtime.pyx"
      }

#line 757 "miniparla/runtime.pyx"
    }

#line 757 "miniparla/runtime.pyx"
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 757 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 757 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L1_error)

#line 757 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 757 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 757 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "miniparla/runtime.pyx":756
 *     def decr_active_task(self):
 *         done = self.inner_scheduler.decr_active_tasks()
 *         if done:             # <<<<<<<<<<<<<<
 *             self.stop()
 * 
 */

#line 756 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":754
 *         self.inner_scheduler.incr_active_tasks()
 * 
 *     def decr_active_task(self):             # <<<<<<<<<<<<<<
 *         done = self.inner_scheduler.decr_active_tasks()
 *         if done:
 */

#line 754 "miniparla/runtime.pyx"


#line 754 "miniparla/runtime.pyx"
  /* function exit code */

#line 754 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 754 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 754 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 754 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 754 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 754 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 754 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.decr_active_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 754 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 754 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 754 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_done);

#line 754 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 754 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 754 "miniparla/runtime.pyx"
  return __pyx_r;

#line 754 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":759
 *             self.stop()
 * 
 *     def cpp_callback(self, task, worker):             # <<<<<<<<<<<<<<
 *         success = False
 *         worker.assign_task(task)
 */

#line 759 "miniparla/runtime.pyx"


#line 759 "miniparla/runtime.pyx"
/* Python wrapper */

#line 759 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_19cpp_callback(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_19cpp_callback = 
#line 759 "miniparla/runtime.pyx"
{"cpp_callback", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_9Scheduler_19cpp_callback, METH_VARARGS|METH_KEYWORDS, 0};

#line 759 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_19cpp_callback(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0
#line 759 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_task = 0
#line 759 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_worker = 0
#line 759 "miniparla/runtime.pyx"
;

#line 759 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 759 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 759 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 759 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 759 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 759 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("cpp_callback (wrapper)", 0);

#line 759 "miniparla/runtime.pyx"
  {

#line 759 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_task_2,&__pyx_n_s_worker,0};

#line 759 "miniparla/runtime.pyx"
    PyObject* values[3] = {0,0,0};

#line 759 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 759 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 759 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 759 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  3: 
#line 759 "miniparla/runtime.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 759 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 759 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 759 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 759 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 759 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 759 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 759 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 759 "miniparla/runtime.pyx"
      }

#line 759 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 759 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 759 "miniparla/runtime.pyx"
        case  0:

#line 759 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 759 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 759 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 759 "miniparla/runtime.pyx"
        case  1:

#line 759 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_task_2)) != 0)) kw_args--;

#line 759 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("cpp_callback", 1, 3, 3, 1); 
#line 759 "miniparla/runtime.pyx"
__PYX_ERR(0, 759, __pyx_L3_error)

#line 759 "miniparla/runtime.pyx"
        }

#line 759 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 759 "miniparla/runtime.pyx"
        case  2:

#line 759 "miniparla/runtime.pyx"
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_worker)) != 0)) kw_args--;

#line 759 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("cpp_callback", 1, 3, 3, 2); 
#line 759 "miniparla/runtime.pyx"
__PYX_ERR(0, 759, __pyx_L3_error)

#line 759 "miniparla/runtime.pyx"
        }

#line 759 "miniparla/runtime.pyx"
      }

#line 759 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 759 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cpp_callback") < 0)) __PYX_ERR(0, 759, __pyx_L3_error)

#line 759 "miniparla/runtime.pyx"
      }

#line 759 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 759 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 759 "miniparla/runtime.pyx"
    } else {

#line 759 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 759 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 759 "miniparla/runtime.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 759 "miniparla/runtime.pyx"
    }

#line 759 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 759 "miniparla/runtime.pyx"
    __pyx_v_task = values[1];

#line 759 "miniparla/runtime.pyx"
    __pyx_v_worker = values[2];

#line 759 "miniparla/runtime.pyx"
  }

#line 759 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 759 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cpp_callback", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 759 "miniparla/runtime.pyx"
__PYX_ERR(0, 759, __pyx_L3_error)

#line 759 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 759 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.cpp_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 759 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 759 "miniparla/runtime.pyx"
  return NULL;

#line 759 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 759 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_18cpp_callback(__pyx_self, __pyx_v_self, __pyx_v_task, __pyx_v_worker);

#line 759 "miniparla/runtime.pyx"


#line 759 "miniparla/runtime.pyx"
  /* function exit code */

#line 759 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 759 "miniparla/runtime.pyx"
  return __pyx_r;

#line 759 "miniparla/runtime.pyx"
}

#line 759 "miniparla/runtime.pyx"


#line 759 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_18cpp_callback(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_task, PyObject *__pyx_v_worker) {
  int __pyx_v_success
#line 759 "miniparla/runtime.pyx"
;

#line 759 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 759 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 759 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 759 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 759 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 759 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 759 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 759 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 759 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("cpp_callback", 0);

  /* "miniparla/runtime.pyx":760
 * 
 *     def cpp_callback(self, task, worker):
 *         success = False             # <<<<<<<<<<<<<<
 *         worker.assign_task(task)
 *         success = True
 */

#line 760 "miniparla/runtime.pyx"
  __pyx_v_success = 0;

  /* "miniparla/runtime.pyx":761
 *     def cpp_callback(self, task, worker):
 *         success = False
 *         worker.assign_task(task)             # <<<<<<<<<<<<<<
 *         success = True
 *         return success
 */

#line 761 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_worker, __pyx_n_s_assign_task); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 761, __pyx_L1_error)

#line 761 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 761 "miniparla/runtime.pyx"
  __pyx_t_3 = NULL;

#line 761 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 761 "miniparla/runtime.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 761 "miniparla/runtime.pyx"
    if (likely(__pyx_t_3)) {

#line 761 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 761 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 761 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 761 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 761 "miniparla/runtime.pyx"
    }

#line 761 "miniparla/runtime.pyx"
  }

#line 761 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_task) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_task);

#line 761 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 761 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)

#line 761 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 761 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 761 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":762
 *         success = False
 *         worker.assign_task(task)
 *         success = True             # <<<<<<<<<<<<<<
 *         return success
 * 
 */

#line 762 "miniparla/runtime.pyx"
  __pyx_v_success = 1;

  /* "miniparla/runtime.pyx":763
 *         worker.assign_task(task)
 *         success = True
 *         return success             # <<<<<<<<<<<<<<
 * 
 *     def incr_free_threads(self):
 */

#line 763 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 763 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_success); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)

#line 763 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 763 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 763 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 763 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":759
 *             self.stop()
 * 
 *     def cpp_callback(self, task, worker):             # <<<<<<<<<<<<<<
 *         success = False
 *         worker.assign_task(task)
 */

#line 759 "miniparla/runtime.pyx"


#line 759 "miniparla/runtime.pyx"
  /* function exit code */

#line 759 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 759 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 759 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 759 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 759 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.cpp_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 759 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 759 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 759 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 759 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 759 "miniparla/runtime.pyx"
  return __pyx_r;

#line 759 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":765
 *         return success
 * 
 *     def incr_free_threads(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_free_threads()
 * 
 */

#line 765 "miniparla/runtime.pyx"


#line 765 "miniparla/runtime.pyx"
/* Python wrapper */

#line 765 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_21incr_free_threads(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_21incr_free_threads = 
#line 765 "miniparla/runtime.pyx"
{"incr_free_threads", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_21incr_free_threads, METH_O, 0};

#line 765 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_21incr_free_threads(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 765 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 765 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 765 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_free_threads (wrapper)", 0);
  __pyx_r = 
#line 765 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_20incr_free_threads(__pyx_self, ((PyObject *)__pyx_v_self));

#line 765 "miniparla/runtime.pyx"


#line 765 "miniparla/runtime.pyx"
  /* function exit code */

#line 765 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 765 "miniparla/runtime.pyx"
  return __pyx_r;

#line 765 "miniparla/runtime.pyx"
}

#line 765 "miniparla/runtime.pyx"


#line 765 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_20incr_free_threads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 765 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 765 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 765 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 765 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 765 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 765 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 765 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 765 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 765 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_free_threads", 0);

  /* "miniparla/runtime.pyx":766
 * 
 *     def incr_free_threads(self):
 *         self.inner_scheduler.incr_free_threads()             # <<<<<<<<<<<<<<
 * 
 *     def decr_free_threads(self):
 */

#line 766 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 766, __pyx_L1_error)

#line 766 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 766 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_incr_free_threads); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 766, __pyx_L1_error)

#line 766 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 766 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 766 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 766 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 766 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 766 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 766 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 766 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 766 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 766 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 766 "miniparla/runtime.pyx"
    }

#line 766 "miniparla/runtime.pyx"
  }

#line 766 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 766 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 766 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 766, __pyx_L1_error)

#line 766 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 766 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 766 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":765
 *         return success
 * 
 *     def incr_free_threads(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_free_threads()
 * 
 */

#line 765 "miniparla/runtime.pyx"


#line 765 "miniparla/runtime.pyx"
  /* function exit code */

#line 765 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 765 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 765 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 765 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 765 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 765 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 765 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.incr_free_threads", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 765 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 765 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 765 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 765 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 765 "miniparla/runtime.pyx"
  return __pyx_r;

#line 765 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":768
 *         self.inner_scheduler.incr_free_threads()
 * 
 *     def decr_free_threads(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_free_threads()
 * 
 */

#line 768 "miniparla/runtime.pyx"


#line 768 "miniparla/runtime.pyx"
/* Python wrapper */

#line 768 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_23decr_free_threads(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_23decr_free_threads = 
#line 768 "miniparla/runtime.pyx"
{"decr_free_threads", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_23decr_free_threads, METH_O, 0};

#line 768 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_23decr_free_threads(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 768 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 768 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 768 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_free_threads (wrapper)", 0);
  __pyx_r = 
#line 768 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_22decr_free_threads(__pyx_self, ((PyObject *)__pyx_v_self));

#line 768 "miniparla/runtime.pyx"


#line 768 "miniparla/runtime.pyx"
  /* function exit code */

#line 768 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 768 "miniparla/runtime.pyx"
  return __pyx_r;

#line 768 "miniparla/runtime.pyx"
}

#line 768 "miniparla/runtime.pyx"


#line 768 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_22decr_free_threads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 768 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 768 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 768 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 768 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 768 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 768 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 768 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 768 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 768 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_free_threads", 0);

  /* "miniparla/runtime.pyx":769
 * 
 *     def decr_free_threads(self):
 *         self.inner_scheduler.decr_free_threads()             # <<<<<<<<<<<<<<
 * 
 *     def get_free_threads(self):
 */

#line 769 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 769, __pyx_L1_error)

#line 769 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 769 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decr_free_threads); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 769, __pyx_L1_error)

#line 769 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 769 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 769 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 769 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 769 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 769 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 769 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 769 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 769 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 769 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 769 "miniparla/runtime.pyx"
    }

#line 769 "miniparla/runtime.pyx"
  }

#line 769 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 769 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 769 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)

#line 769 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 769 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 769 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":768
 *         self.inner_scheduler.incr_free_threads()
 * 
 *     def decr_free_threads(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_free_threads()
 * 
 */

#line 768 "miniparla/runtime.pyx"


#line 768 "miniparla/runtime.pyx"
  /* function exit code */

#line 768 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 768 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 768 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 768 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 768 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 768 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 768 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.decr_free_threads", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 768 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 768 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 768 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 768 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 768 "miniparla/runtime.pyx"
  return __pyx_r;

#line 768 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":771
 *         self.inner_scheduler.decr_free_threads()
 * 
 *     def get_free_threads(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_free_threads()
 * 
 */

#line 771 "miniparla/runtime.pyx"


#line 771 "miniparla/runtime.pyx"
/* Python wrapper */

#line 771 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_25get_free_threads(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_25get_free_threads = 
#line 771 "miniparla/runtime.pyx"
{"get_free_threads", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_25get_free_threads, METH_O, 0};

#line 771 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_25get_free_threads(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 771 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 771 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 771 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_free_threads (wrapper)", 0);
  __pyx_r = 
#line 771 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_24get_free_threads(__pyx_self, ((PyObject *)__pyx_v_self));

#line 771 "miniparla/runtime.pyx"


#line 771 "miniparla/runtime.pyx"
  /* function exit code */

#line 771 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 771 "miniparla/runtime.pyx"
  return __pyx_r;

#line 771 "miniparla/runtime.pyx"
}

#line 771 "miniparla/runtime.pyx"


#line 771 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_24get_free_threads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 771 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 771 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 771 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 771 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 771 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 771 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 771 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 771 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 771 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_free_threads", 0);

  /* "miniparla/runtime.pyx":772
 * 
 *     def get_free_threads(self):
 *         return self.inner_scheduler.get_free_threads()             # <<<<<<<<<<<<<<
 * 
 *     def get_active_tasks(self):
 */

#line 772 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 772 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)

#line 772 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 772 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_free_threads); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)

#line 772 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 772 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 772 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 772 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 772 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 772 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 772 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 772 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 772 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 772 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 772 "miniparla/runtime.pyx"
    }

#line 772 "miniparla/runtime.pyx"
  }

#line 772 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 772 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 772 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)

#line 772 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 772 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 772 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 772 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 772 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":771
 *         self.inner_scheduler.decr_free_threads()
 * 
 *     def get_free_threads(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_free_threads()
 * 
 */

#line 771 "miniparla/runtime.pyx"


#line 771 "miniparla/runtime.pyx"
  /* function exit code */

#line 771 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 771 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 771 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 771 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 771 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.get_free_threads", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 771 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 771 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 771 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 771 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 771 "miniparla/runtime.pyx"
  return __pyx_r;

#line 771 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":774
 *         return self.inner_scheduler.get_free_threads()
 * 
 *     def get_active_tasks(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_active_tasks()
 * 
 */

#line 774 "miniparla/runtime.pyx"


#line 774 "miniparla/runtime.pyx"
/* Python wrapper */

#line 774 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_27get_active_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_27get_active_tasks = 
#line 774 "miniparla/runtime.pyx"
{"get_active_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_27get_active_tasks, METH_O, 0};

#line 774 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_27get_active_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 774 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 774 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 774 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_active_tasks (wrapper)", 0);
  __pyx_r = 
#line 774 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_26get_active_tasks(__pyx_self, ((PyObject *)__pyx_v_self));

#line 774 "miniparla/runtime.pyx"


#line 774 "miniparla/runtime.pyx"
  /* function exit code */

#line 774 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 774 "miniparla/runtime.pyx"
  return __pyx_r;

#line 774 "miniparla/runtime.pyx"
}

#line 774 "miniparla/runtime.pyx"


#line 774 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_26get_active_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 774 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 774 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 774 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 774 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 774 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 774 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 774 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 774 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 774 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_active_tasks", 0);

  /* "miniparla/runtime.pyx":775
 * 
 *     def get_active_tasks(self):
 *         return self.inner_scheduler.get_active_tasks()             # <<<<<<<<<<<<<<
 * 
 *     def incr_running_tasks(self):
 */

#line 775 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 775 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 775, __pyx_L1_error)

#line 775 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 775 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_active_tasks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 775, __pyx_L1_error)

#line 775 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 775 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 775 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 775 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 775 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 775 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 775 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 775 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 775 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 775 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 775 "miniparla/runtime.pyx"
    }

#line 775 "miniparla/runtime.pyx"
  }

#line 775 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 775 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 775 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)

#line 775 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 775 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 775 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 775 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 775 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":774
 *         return self.inner_scheduler.get_free_threads()
 * 
 *     def get_active_tasks(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_active_tasks()
 * 
 */

#line 774 "miniparla/runtime.pyx"


#line 774 "miniparla/runtime.pyx"
  /* function exit code */

#line 774 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 774 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 774 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 774 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 774 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.get_active_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 774 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 774 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 774 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 774 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 774 "miniparla/runtime.pyx"
  return __pyx_r;

#line 774 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":777
 *         return self.inner_scheduler.get_active_tasks()
 * 
 *     def incr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_running_tasks()
 * 
 */

#line 777 "miniparla/runtime.pyx"


#line 777 "miniparla/runtime.pyx"
/* Python wrapper */

#line 777 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_29incr_running_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_29incr_running_tasks = 
#line 777 "miniparla/runtime.pyx"
{"incr_running_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_29incr_running_tasks, METH_O, 0};

#line 777 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_29incr_running_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 777 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 777 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 777 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_running_tasks (wrapper)", 0);
  __pyx_r = 
#line 777 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_28incr_running_tasks(__pyx_self, ((PyObject *)__pyx_v_self));

#line 777 "miniparla/runtime.pyx"


#line 777 "miniparla/runtime.pyx"
  /* function exit code */

#line 777 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 777 "miniparla/runtime.pyx"
  return __pyx_r;

#line 777 "miniparla/runtime.pyx"
}

#line 777 "miniparla/runtime.pyx"


#line 777 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_28incr_running_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 777 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 777 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 777 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 777 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 777 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 777 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 777 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 777 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 777 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("incr_running_tasks", 0);

  /* "miniparla/runtime.pyx":778
 * 
 *     def incr_running_tasks(self):
 *         self.inner_scheduler.incr_running_tasks()             # <<<<<<<<<<<<<<
 * 
 *     def decr_running_tasks(self):
 */

#line 778 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 778, __pyx_L1_error)

#line 778 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 778 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_incr_running_tasks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)

#line 778 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 778 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 778 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 778 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 778 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 778 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 778 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 778 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 778 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 778 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 778 "miniparla/runtime.pyx"
    }

#line 778 "miniparla/runtime.pyx"
  }

#line 778 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 778 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 778 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)

#line 778 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 778 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 778 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":777
 *         return self.inner_scheduler.get_active_tasks()
 * 
 *     def incr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_running_tasks()
 * 
 */

#line 777 "miniparla/runtime.pyx"


#line 777 "miniparla/runtime.pyx"
  /* function exit code */

#line 777 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 777 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 777 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 777 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 777 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 777 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 777 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.incr_running_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 777 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 777 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 777 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 777 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 777 "miniparla/runtime.pyx"
  return __pyx_r;

#line 777 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":780
 *         self.inner_scheduler.incr_running_tasks()
 * 
 *     def decr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_running_tasks()
 * 
 */

#line 780 "miniparla/runtime.pyx"


#line 780 "miniparla/runtime.pyx"
/* Python wrapper */

#line 780 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_31decr_running_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_31decr_running_tasks = 
#line 780 "miniparla/runtime.pyx"
{"decr_running_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_31decr_running_tasks, METH_O, 0};

#line 780 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_31decr_running_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 780 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 780 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 780 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_running_tasks (wrapper)", 0);
  __pyx_r = 
#line 780 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_30decr_running_tasks(__pyx_self, ((PyObject *)__pyx_v_self));

#line 780 "miniparla/runtime.pyx"


#line 780 "miniparla/runtime.pyx"
  /* function exit code */

#line 780 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 780 "miniparla/runtime.pyx"
  return __pyx_r;

#line 780 "miniparla/runtime.pyx"
}

#line 780 "miniparla/runtime.pyx"


#line 780 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_30decr_running_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 780 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 780 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 780 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 780 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 780 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 780 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 780 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 780 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 780 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("decr_running_tasks", 0);

  /* "miniparla/runtime.pyx":781
 * 
 *     def decr_running_tasks(self):
 *         self.inner_scheduler.decr_running_tasks()             # <<<<<<<<<<<<<<
 * 
 *     def get_running_tasks(self):
 */

#line 781 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)

#line 781 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 781 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decr_running_tasks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 781, __pyx_L1_error)

#line 781 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 781 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 781 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 781 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 781 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 781 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 781 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 781 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 781 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 781 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 781 "miniparla/runtime.pyx"
    }

#line 781 "miniparla/runtime.pyx"
  }

#line 781 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 781 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 781 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)

#line 781 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 781 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 781 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":780
 *         self.inner_scheduler.incr_running_tasks()
 * 
 *     def decr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_running_tasks()
 * 
 */

#line 780 "miniparla/runtime.pyx"


#line 780 "miniparla/runtime.pyx"
  /* function exit code */

#line 780 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 780 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 780 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 780 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 780 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 780 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 780 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.decr_running_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 780 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 780 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 780 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 780 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 780 "miniparla/runtime.pyx"
  return __pyx_r;

#line 780 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":783
 *         self.inner_scheduler.decr_running_tasks()
 * 
 *     def get_running_tasks(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_running_tasks()
 * 
 */

#line 783 "miniparla/runtime.pyx"


#line 783 "miniparla/runtime.pyx"
/* Python wrapper */

#line 783 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_33get_running_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_33get_running_tasks = 
#line 783 "miniparla/runtime.pyx"
{"get_running_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_33get_running_tasks, METH_O, 0};

#line 783 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_33get_running_tasks(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 783 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 783 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 783 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_running_tasks (wrapper)", 0);
  __pyx_r = 
#line 783 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_32get_running_tasks(__pyx_self, ((PyObject *)__pyx_v_self));

#line 783 "miniparla/runtime.pyx"


#line 783 "miniparla/runtime.pyx"
  /* function exit code */

#line 783 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 783 "miniparla/runtime.pyx"
  return __pyx_r;

#line 783 "miniparla/runtime.pyx"
}

#line 783 "miniparla/runtime.pyx"


#line 783 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_32get_running_tasks(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 783 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 783 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 783 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 783 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 783 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 783 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 783 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 783 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 783 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("get_running_tasks", 0);

  /* "miniparla/runtime.pyx":784
 * 
 *     def get_running_tasks(self):
 *         return self.inner_scheduler.get_running_tasks()             # <<<<<<<<<<<<<<
 * 
 *     def enqueue_worker(self, worker):
 */

#line 784 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 784 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)

#line 784 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 784 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_running_tasks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 784, __pyx_L1_error)

#line 784 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 784 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 784 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 784 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 784 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 784 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 784 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 784 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 784 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 784 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 784 "miniparla/runtime.pyx"
    }

#line 784 "miniparla/runtime.pyx"
  }

#line 784 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 784 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 784 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)

#line 784 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 784 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 784 "miniparla/runtime.pyx"
  __pyx_r = __pyx_t_1;

#line 784 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 784 "miniparla/runtime.pyx"
  goto __pyx_L0;

  /* "miniparla/runtime.pyx":783
 *         self.inner_scheduler.decr_running_tasks()
 * 
 *     def get_running_tasks(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_running_tasks()
 * 
 */

#line 783 "miniparla/runtime.pyx"


#line 783 "miniparla/runtime.pyx"
  /* function exit code */

#line 783 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 783 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 783 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 783 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 783 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.get_running_tasks", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 783 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 783 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 783 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 783 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 783 "miniparla/runtime.pyx"
  return __pyx_r;

#line 783 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":786
 *         return self.inner_scheduler.get_running_tasks()
 * 
 *     def enqueue_worker(self, worker):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_worker(worker.worker)
 * 
 */

#line 786 "miniparla/runtime.pyx"


#line 786 "miniparla/runtime.pyx"
/* Python wrapper */

#line 786 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_35enqueue_worker(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_35enqueue_worker = 
#line 786 "miniparla/runtime.pyx"
{"enqueue_worker", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_9Scheduler_35enqueue_worker, METH_VARARGS|METH_KEYWORDS, 0};

#line 786 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_35enqueue_worker(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 786 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_worker = 0
#line 786 "miniparla/runtime.pyx"
;

#line 786 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 786 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 786 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 786 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 786 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 786 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("enqueue_worker (wrapper)", 0);

#line 786 "miniparla/runtime.pyx"
  {

#line 786 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_worker,0};

#line 786 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 786 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 786 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 786 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 786 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 786 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 786 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 786 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 786 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 786 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 786 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 786 "miniparla/runtime.pyx"
      }

#line 786 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 786 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 786 "miniparla/runtime.pyx"
        case  0:

#line 786 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 786 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 786 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 786 "miniparla/runtime.pyx"
        case  1:

#line 786 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_worker)) != 0)) kw_args--;

#line 786 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("enqueue_worker", 1, 2, 2, 1); 
#line 786 "miniparla/runtime.pyx"
__PYX_ERR(0, 786, __pyx_L3_error)

#line 786 "miniparla/runtime.pyx"
        }

#line 786 "miniparla/runtime.pyx"
      }

#line 786 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 786 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "enqueue_worker") < 0)) __PYX_ERR(0, 786, __pyx_L3_error)

#line 786 "miniparla/runtime.pyx"
      }

#line 786 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 786 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 786 "miniparla/runtime.pyx"
    } else {

#line 786 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 786 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 786 "miniparla/runtime.pyx"
    }

#line 786 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 786 "miniparla/runtime.pyx"
    __pyx_v_worker = values[1];

#line 786 "miniparla/runtime.pyx"
  }

#line 786 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 786 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("enqueue_worker", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 786 "miniparla/runtime.pyx"
__PYX_ERR(0, 786, __pyx_L3_error)

#line 786 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 786 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.enqueue_worker", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 786 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 786 "miniparla/runtime.pyx"
  return NULL;

#line 786 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 786 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_34enqueue_worker(__pyx_self, __pyx_v_self, __pyx_v_worker);

#line 786 "miniparla/runtime.pyx"


#line 786 "miniparla/runtime.pyx"
  /* function exit code */

#line 786 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 786 "miniparla/runtime.pyx"
  return __pyx_r;

#line 786 "miniparla/runtime.pyx"
}

#line 786 "miniparla/runtime.pyx"


#line 786 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_34enqueue_worker(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_worker) {

#line 786 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 786 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 786 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 786 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 786 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 786 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 786 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 786 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 786 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 786 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("enqueue_worker", 0);

  /* "miniparla/runtime.pyx":787
 * 
 *     def enqueue_worker(self, worker):
 *         self.inner_scheduler.enqueue_worker(worker.worker)             # <<<<<<<<<<<<<<
 * 
 *     def enqueue_task(self, task):
 */

#line 787 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)

#line 787 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 787 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_enqueue_worker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)

#line 787 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 787 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 787 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_worker, __pyx_n_s_worker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)

#line 787 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 787 "miniparla/runtime.pyx"
  __pyx_t_4 = NULL;

#line 787 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 787 "miniparla/runtime.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 787 "miniparla/runtime.pyx"
    if (likely(__pyx_t_4)) {

#line 787 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 787 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 787 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 787 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 787 "miniparla/runtime.pyx"
    }

#line 787 "miniparla/runtime.pyx"
  }

#line 787 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);

#line 787 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 787 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 787 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)

#line 787 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 787 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 787 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":786
 *         return self.inner_scheduler.get_running_tasks()
 * 
 *     def enqueue_worker(self, worker):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_worker(worker.worker)
 * 
 */

#line 786 "miniparla/runtime.pyx"


#line 786 "miniparla/runtime.pyx"
  /* function exit code */

#line 786 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 786 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 786 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 786 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 786 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 786 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 786 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 786 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.enqueue_worker", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 786 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 786 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 786 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 786 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 786 "miniparla/runtime.pyx"
  return __pyx_r;

#line 786 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":789
 *         self.inner_scheduler.enqueue_worker(worker.worker)
 * 
 *     def enqueue_task(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_task(task.inner_task)
 * 
 */

#line 789 "miniparla/runtime.pyx"


#line 789 "miniparla/runtime.pyx"
/* Python wrapper */

#line 789 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_37enqueue_task(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_37enqueue_task = 
#line 789 "miniparla/runtime.pyx"
{"enqueue_task", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_9Scheduler_37enqueue_task, METH_VARARGS|METH_KEYWORDS, 0};

#line 789 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_37enqueue_task(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 789 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_task = 0
#line 789 "miniparla/runtime.pyx"
;

#line 789 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 789 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 789 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 789 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 789 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 789 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("enqueue_task (wrapper)", 0);

#line 789 "miniparla/runtime.pyx"
  {

#line 789 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_task_2,0};

#line 789 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 789 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 789 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 789 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 789 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 789 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 789 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 789 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 789 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 789 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 789 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 789 "miniparla/runtime.pyx"
      }

#line 789 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 789 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 789 "miniparla/runtime.pyx"
        case  0:

#line 789 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 789 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 789 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 789 "miniparla/runtime.pyx"
        case  1:

#line 789 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_task_2)) != 0)) kw_args--;

#line 789 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("enqueue_task", 1, 2, 2, 1); 
#line 789 "miniparla/runtime.pyx"
__PYX_ERR(0, 789, __pyx_L3_error)

#line 789 "miniparla/runtime.pyx"
        }

#line 789 "miniparla/runtime.pyx"
      }

#line 789 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 789 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "enqueue_task") < 0)) __PYX_ERR(0, 789, __pyx_L3_error)

#line 789 "miniparla/runtime.pyx"
      }

#line 789 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 789 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 789 "miniparla/runtime.pyx"
    } else {

#line 789 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 789 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 789 "miniparla/runtime.pyx"
    }

#line 789 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 789 "miniparla/runtime.pyx"
    __pyx_v_task = values[1];

#line 789 "miniparla/runtime.pyx"
  }

#line 789 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 789 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("enqueue_task", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 789 "miniparla/runtime.pyx"
__PYX_ERR(0, 789, __pyx_L3_error)

#line 789 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 789 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.enqueue_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 789 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 789 "miniparla/runtime.pyx"
  return NULL;

#line 789 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 789 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_36enqueue_task(__pyx_self, __pyx_v_self, __pyx_v_task);

#line 789 "miniparla/runtime.pyx"


#line 789 "miniparla/runtime.pyx"
  /* function exit code */

#line 789 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 789 "miniparla/runtime.pyx"
  return __pyx_r;

#line 789 "miniparla/runtime.pyx"
}

#line 789 "miniparla/runtime.pyx"


#line 789 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_36enqueue_task(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task) {

#line 789 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 789 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 789 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 789 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 789 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 789 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 789 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 789 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 789 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 789 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("enqueue_task", 0);

  /* "miniparla/runtime.pyx":790
 * 
 *     def enqueue_task(self, task):
 *         self.inner_scheduler.enqueue_task(task.inner_task)             # <<<<<<<<<<<<<<
 * 
 *     def enqueue_task_unsafe(self, task):
 */

#line 790 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 790, __pyx_L1_error)

#line 790 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 790 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_enqueue_task); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)

#line 790 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 790 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 790 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_task, __pyx_n_s_inner_task); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 790, __pyx_L1_error)

#line 790 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 790 "miniparla/runtime.pyx"
  __pyx_t_4 = NULL;

#line 790 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 790 "miniparla/runtime.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 790 "miniparla/runtime.pyx"
    if (likely(__pyx_t_4)) {

#line 790 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 790 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 790 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 790 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 790 "miniparla/runtime.pyx"
    }

#line 790 "miniparla/runtime.pyx"
  }

#line 790 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);

#line 790 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 790 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 790 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)

#line 790 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 790 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 790 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":789
 *         self.inner_scheduler.enqueue_worker(worker.worker)
 * 
 *     def enqueue_task(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_task(task.inner_task)
 * 
 */

#line 789 "miniparla/runtime.pyx"


#line 789 "miniparla/runtime.pyx"
  /* function exit code */

#line 789 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 789 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 789 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 789 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 789 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 789 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 789 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 789 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.enqueue_task", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 789 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 789 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 789 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 789 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 789 "miniparla/runtime.pyx"
  return __pyx_r;

#line 789 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":792
 *         self.inner_scheduler.enqueue_task(task.inner_task)
 * 
 *     def enqueue_task_unsafe(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_task_unsafe(task.inner_task)
 * 
 */

#line 792 "miniparla/runtime.pyx"


#line 792 "miniparla/runtime.pyx"
/* Python wrapper */

#line 792 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_39enqueue_task_unsafe(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_39enqueue_task_unsafe = 
#line 792 "miniparla/runtime.pyx"
{"enqueue_task_unsafe", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_9Scheduler_39enqueue_task_unsafe, METH_VARARGS|METH_KEYWORDS, 0};

#line 792 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_39enqueue_task_unsafe(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 792 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_task = 0
#line 792 "miniparla/runtime.pyx"
;

#line 792 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 792 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 792 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 792 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 792 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 792 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("enqueue_task_unsafe (wrapper)", 0);

#line 792 "miniparla/runtime.pyx"
  {

#line 792 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_task_2,0};

#line 792 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 792 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 792 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 792 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 792 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 792 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 792 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 792 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 792 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 792 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 792 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 792 "miniparla/runtime.pyx"
      }

#line 792 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 792 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 792 "miniparla/runtime.pyx"
        case  0:

#line 792 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 792 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 792 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 792 "miniparla/runtime.pyx"
        case  1:

#line 792 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_task_2)) != 0)) kw_args--;

#line 792 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("enqueue_task_unsafe", 1, 2, 2, 1); 
#line 792 "miniparla/runtime.pyx"
__PYX_ERR(0, 792, __pyx_L3_error)

#line 792 "miniparla/runtime.pyx"
        }

#line 792 "miniparla/runtime.pyx"
      }

#line 792 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 792 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "enqueue_task_unsafe") < 0)) __PYX_ERR(0, 792, __pyx_L3_error)

#line 792 "miniparla/runtime.pyx"
      }

#line 792 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 792 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 792 "miniparla/runtime.pyx"
    } else {

#line 792 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 792 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 792 "miniparla/runtime.pyx"
    }

#line 792 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 792 "miniparla/runtime.pyx"
    __pyx_v_task = values[1];

#line 792 "miniparla/runtime.pyx"
  }

#line 792 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 792 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("enqueue_task_unsafe", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 792 "miniparla/runtime.pyx"
__PYX_ERR(0, 792, __pyx_L3_error)

#line 792 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 792 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.enqueue_task_unsafe", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 792 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 792 "miniparla/runtime.pyx"
  return NULL;

#line 792 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 792 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_38enqueue_task_unsafe(__pyx_self, __pyx_v_self, __pyx_v_task);

#line 792 "miniparla/runtime.pyx"


#line 792 "miniparla/runtime.pyx"
  /* function exit code */

#line 792 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 792 "miniparla/runtime.pyx"
  return __pyx_r;

#line 792 "miniparla/runtime.pyx"
}

#line 792 "miniparla/runtime.pyx"


#line 792 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_38enqueue_task_unsafe(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_task) {

#line 792 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 792 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 792 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 792 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 792 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 792 "miniparla/runtime.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 792 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 792 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 792 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 792 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("enqueue_task_unsafe", 0);

  /* "miniparla/runtime.pyx":793
 * 
 *     def enqueue_task_unsafe(self, task):
 *         self.inner_scheduler.enqueue_task_unsafe(task.inner_task)             # <<<<<<<<<<<<<<
 * 
 *     def run(self):
 */

#line 793 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 793, __pyx_L1_error)

#line 793 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 793 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_enqueue_task_unsafe); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 793, __pyx_L1_error)

#line 793 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 793 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 793 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_task, __pyx_n_s_inner_task); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 793, __pyx_L1_error)

#line 793 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 793 "miniparla/runtime.pyx"
  __pyx_t_4 = NULL;

#line 793 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 793 "miniparla/runtime.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 793 "miniparla/runtime.pyx"
    if (likely(__pyx_t_4)) {

#line 793 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 793 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 793 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 793 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 793 "miniparla/runtime.pyx"
    }

#line 793 "miniparla/runtime.pyx"
  }

#line 793 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);

#line 793 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 793 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 793 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)

#line 793 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 793 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 793 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":792
 *         self.inner_scheduler.enqueue_task(task.inner_task)
 * 
 *     def enqueue_task_unsafe(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_task_unsafe(task.inner_task)
 * 
 */

#line 792 "miniparla/runtime.pyx"


#line 792 "miniparla/runtime.pyx"
  /* function exit code */

#line 792 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 792 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 792 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 792 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 792 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 792 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 792 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 792 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.enqueue_task_unsafe", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 792 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 792 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 792 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 792 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 792 "miniparla/runtime.pyx"
  return __pyx_r;

#line 792 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":795
 *         self.inner_scheduler.enqueue_task_unsafe(task.inner_task)
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.run()
 * 
 */

#line 795 "miniparla/runtime.pyx"


#line 795 "miniparla/runtime.pyx"
/* Python wrapper */

#line 795 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_41run(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_41run = 
#line 795 "miniparla/runtime.pyx"
{"run", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_41run, METH_O, 0};

#line 795 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_41run(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 795 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 795 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 795 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = 
#line 795 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_40run(__pyx_self, ((PyObject *)__pyx_v_self));

#line 795 "miniparla/runtime.pyx"


#line 795 "miniparla/runtime.pyx"
  /* function exit code */

#line 795 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 795 "miniparla/runtime.pyx"
  return __pyx_r;

#line 795 "miniparla/runtime.pyx"
}

#line 795 "miniparla/runtime.pyx"


#line 795 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_40run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 795 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 795 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 795 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 795 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 795 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 795 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 795 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 795 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 795 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run", 0);

  /* "miniparla/runtime.pyx":796
 * 
 *     def run(self):
 *         self.inner_scheduler.run()             # <<<<<<<<<<<<<<
 * 
 *     def stop(self):
 */

#line 796 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 796, __pyx_L1_error)

#line 796 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 796 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_run); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 796, __pyx_L1_error)

#line 796 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 796 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 796 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 796 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 796 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 796 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 796 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 796 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 796 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 796 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 796 "miniparla/runtime.pyx"
    }

#line 796 "miniparla/runtime.pyx"
  }

#line 796 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 796 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 796 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)

#line 796 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 796 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 796 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":795
 *         self.inner_scheduler.enqueue_task_unsafe(task.inner_task)
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.run()
 * 
 */

#line 795 "miniparla/runtime.pyx"


#line 795 "miniparla/runtime.pyx"
  /* function exit code */

#line 795 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 795 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 795 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 795 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 795 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 795 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 795 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.run", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 795 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 795 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 795 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 795 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 795 "miniparla/runtime.pyx"
  return __pyx_r;

#line 795 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":798
 *         self.inner_scheduler.run()
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         super().stop()
 * 
 */

#line 798 "miniparla/runtime.pyx"


#line 798 "miniparla/runtime.pyx"
/* Python wrapper */

#line 798 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_43stop(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_43stop = 
#line 798 "miniparla/runtime.pyx"
{"stop", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_43stop, METH_O, 0};

#line 798 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_43stop(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 798 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 798 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 798 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = 
#line 798 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_42stop(__pyx_self, ((PyObject *)__pyx_v_self));

#line 798 "miniparla/runtime.pyx"


#line 798 "miniparla/runtime.pyx"
  /* function exit code */

#line 798 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 798 "miniparla/runtime.pyx"
  return __pyx_r;

#line 798 "miniparla/runtime.pyx"
}

#line 798 "miniparla/runtime.pyx"


#line 798 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_42stop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_w = NULL
#line 798 "miniparla/runtime.pyx"
;

#line 798 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 798 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 798 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 798 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 798 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 798 "miniparla/runtime.pyx"
  Py_ssize_t __pyx_t_4;

#line 798 "miniparla/runtime.pyx"
  PyObject *(*__pyx_t_5)(PyObject *);

#line 798 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 798 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 798 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 798 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 798 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("stop", 0);

  /* "miniparla/runtime.pyx":799
 * 
 *     def stop(self):
 *         super().stop()             # <<<<<<<<<<<<<<
 * 
 *         for w in self._worker_threads:
 */

#line 799 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_CyFunction_GetClassObj(__pyx_self);

#line 799 "miniparla/runtime.pyx"
  if (!__pyx_t_2) { PyErr_SetString(PyExc_SystemError, "super(): empty __class__ cell"); __PYX_ERR(0, 799, __pyx_L1_error) }

#line 799 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_2);

#line 799 "miniparla/runtime.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)

#line 799 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 799 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 799 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 799 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_self);

#line 799 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_v_self);

#line 799 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);

#line 799 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 799 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)

#line 799 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 799 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 799 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)

#line 799 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 799 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 799 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 799 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 799 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 799 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 799 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 799 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 799 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 799 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 799 "miniparla/runtime.pyx"
    }

#line 799 "miniparla/runtime.pyx"
  }

#line 799 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 799 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 799 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)

#line 799 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 799 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 799 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":801
 *         super().stop()
 * 
 *         for w in self._worker_threads:             # <<<<<<<<<<<<<<
 *             w.stop()
 *         #print("ALL STOPPED", flush=True)
 */

#line 801 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_worker_threads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)

#line 801 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 801 "miniparla/runtime.pyx"
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {

#line 801 "miniparla/runtime.pyx"
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;

#line 801 "miniparla/runtime.pyx"
    __pyx_t_5 = NULL;

#line 801 "miniparla/runtime.pyx"
  } else {
    __pyx_t_4 = -1; 
#line 801 "miniparla/runtime.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 801, __pyx_L1_error)

#line 801 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 801 "miniparla/runtime.pyx"
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 801, __pyx_L1_error)

#line 801 "miniparla/runtime.pyx"
  }

#line 801 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 801 "miniparla/runtime.pyx"
  for (;;) {

#line 801 "miniparla/runtime.pyx"
    if (likely(!__pyx_t_5)) {

#line 801 "miniparla/runtime.pyx"
      if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 801 "miniparla/runtime.pyx"
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 801 "miniparla/runtime.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 801 "miniparla/runtime.pyx"
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 801, __pyx_L1_error)

#line 801 "miniparla/runtime.pyx"
        #else

#line 801 "miniparla/runtime.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)

#line 801 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 801 "miniparla/runtime.pyx"
        #endif

#line 801 "miniparla/runtime.pyx"
      } else {

#line 801 "miniparla/runtime.pyx"
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 801 "miniparla/runtime.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 801 "miniparla/runtime.pyx"
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 801, __pyx_L1_error)

#line 801 "miniparla/runtime.pyx"
        #else

#line 801 "miniparla/runtime.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)

#line 801 "miniparla/runtime.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 801 "miniparla/runtime.pyx"
        #endif

#line 801 "miniparla/runtime.pyx"
      }
    } else 
#line 801 "miniparla/runtime.pyx"
{

#line 801 "miniparla/runtime.pyx"
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);

#line 801 "miniparla/runtime.pyx"
      if (unlikely(!__pyx_t_1)) {

#line 801 "miniparla/runtime.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 801 "miniparla/runtime.pyx"
        if (exc_type) {

#line 801 "miniparla/runtime.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 801 "miniparla/runtime.pyx"
          else __PYX_ERR(0, 801, __pyx_L1_error)

#line 801 "miniparla/runtime.pyx"
        }

#line 801 "miniparla/runtime.pyx"
        break;

#line 801 "miniparla/runtime.pyx"
      }

#line 801 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 801 "miniparla/runtime.pyx"
    }

#line 801 "miniparla/runtime.pyx"
    __Pyx_XDECREF_SET(__pyx_v_w, __pyx_t_1);

#line 801 "miniparla/runtime.pyx"
    __pyx_t_1 = 0;

    /* "miniparla/runtime.pyx":802
 * 
 *         for w in self._worker_threads:
 *             w.stop()             # <<<<<<<<<<<<<<
 *         #print("ALL STOPPED", flush=True)
 * 
 */

#line 802 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_w, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L1_error)

#line 802 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 802 "miniparla/runtime.pyx"
    __pyx_t_6 = NULL;

#line 802 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 802 "miniparla/runtime.pyx"
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);

#line 802 "miniparla/runtime.pyx"
      if (likely(__pyx_t_6)) {

#line 802 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 802 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_6);

#line 802 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 802 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_2, function);

#line 802 "miniparla/runtime.pyx"
      }

#line 802 "miniparla/runtime.pyx"
    }

#line 802 "miniparla/runtime.pyx"
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_2);

#line 802 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 802 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)

#line 802 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 802 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 802 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "miniparla/runtime.pyx":801
 *         super().stop()
 * 
 *         for w in self._worker_threads:             # <<<<<<<<<<<<<<
 *             w.stop()
 *         #print("ALL STOPPED", flush=True)
 */

#line 801 "miniparla/runtime.pyx"
  }

#line 801 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "miniparla/runtime.pyx":798
 *         self.inner_scheduler.run()
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         super().stop()
 * 
 */

#line 798 "miniparla/runtime.pyx"


#line 798 "miniparla/runtime.pyx"
  /* function exit code */

#line 798 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 798 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 798 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 798 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 798 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 798 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 798 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 798 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 798 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 798 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 798 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_w);

#line 798 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 798 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 798 "miniparla/runtime.pyx"
  return __pyx_r;

#line 798 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":805
 *         #print("ALL STOPPED", flush=True)
 * 
 *     def run_scheduler(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.run_scheduler()
 * 
 */

#line 805 "miniparla/runtime.pyx"


#line 805 "miniparla/runtime.pyx"
/* Python wrapper */

#line 805 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_45run_scheduler(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Scheduler_45run_scheduler = 
#line 805 "miniparla/runtime.pyx"
{"run_scheduler", (PyCFunction)__pyx_pw_9miniparla_7runtime_9Scheduler_45run_scheduler, METH_O, 0};

#line 805 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Scheduler_45run_scheduler(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 805 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 805 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 805 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run_scheduler (wrapper)", 0);
  __pyx_r = 
#line 805 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Scheduler_44run_scheduler(__pyx_self, ((PyObject *)__pyx_v_self));

#line 805 "miniparla/runtime.pyx"


#line 805 "miniparla/runtime.pyx"
  /* function exit code */

#line 805 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 805 "miniparla/runtime.pyx"
  return __pyx_r;

#line 805 "miniparla/runtime.pyx"
}

#line 805 "miniparla/runtime.pyx"


#line 805 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Scheduler_44run_scheduler(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 805 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 805 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 805 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 805 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 805 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 805 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 805 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 805 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 805 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("run_scheduler", 0);

  /* "miniparla/runtime.pyx":806
 * 
 *     def run_scheduler(self):
 *         self.inner_scheduler.run_scheduler()             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 806 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_inner_scheduler); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 806, __pyx_L1_error)

#line 806 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 806 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_run_scheduler); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 806, __pyx_L1_error)

#line 806 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 806 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 806 "miniparla/runtime.pyx"
  __pyx_t_2 = NULL;

#line 806 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 806 "miniparla/runtime.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 806 "miniparla/runtime.pyx"
    if (likely(__pyx_t_2)) {

#line 806 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 806 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 806 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 806 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 806 "miniparla/runtime.pyx"
    }

#line 806 "miniparla/runtime.pyx"
  }

#line 806 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 806 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 806 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)

#line 806 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 806 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 806 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":805
 *         #print("ALL STOPPED", flush=True)
 * 
 *     def run_scheduler(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.run_scheduler()
 * 
 */

#line 805 "miniparla/runtime.pyx"


#line 805 "miniparla/runtime.pyx"
  /* function exit code */

#line 805 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 805 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 805 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 805 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 805 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 805 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 805 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Scheduler.run_scheduler", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 805 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 805 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 805 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 805 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 805 "miniparla/runtime.pyx"
  return __pyx_r;

#line 805 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":814
 * class Resources:
 * 
 *     def __init__(self, vcus):             # <<<<<<<<<<<<<<
 *         self.vcus = vcus
 * 
 */

#line 814 "miniparla/runtime.pyx"


#line 814 "miniparla/runtime.pyx"
/* Python wrapper */

#line 814 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Resources_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9miniparla_7runtime_9Resources_1__init__ = 
#line 814 "miniparla/runtime.pyx"
{"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_9Resources_1__init__, METH_VARARGS|METH_KEYWORDS, 0};

#line 814 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_9Resources_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 814 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_vcus = 0
#line 814 "miniparla/runtime.pyx"
;

#line 814 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 814 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 814 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 814 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 814 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 814 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 814 "miniparla/runtime.pyx"
  {

#line 814 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_vcus,0};

#line 814 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 814 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 814 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 814 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 814 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 814 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 814 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 814 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 814 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 814 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 814 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 814 "miniparla/runtime.pyx"
      }

#line 814 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 814 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 814 "miniparla/runtime.pyx"
        case  0:

#line 814 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 814 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 814 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 814 "miniparla/runtime.pyx"
        case  1:

#line 814 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vcus)) != 0)) kw_args--;

#line 814 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); 
#line 814 "miniparla/runtime.pyx"
__PYX_ERR(0, 814, __pyx_L3_error)

#line 814 "miniparla/runtime.pyx"
        }

#line 814 "miniparla/runtime.pyx"
      }

#line 814 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 814 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 814, __pyx_L3_error)

#line 814 "miniparla/runtime.pyx"
      }

#line 814 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 814 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 814 "miniparla/runtime.pyx"
    } else {

#line 814 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 814 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 814 "miniparla/runtime.pyx"
    }

#line 814 "miniparla/runtime.pyx"
    __pyx_v_self = values[0];

#line 814 "miniparla/runtime.pyx"
    __pyx_v_vcus = values[1];

#line 814 "miniparla/runtime.pyx"
  }

#line 814 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 814 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 814 "miniparla/runtime.pyx"
__PYX_ERR(0, 814, __pyx_L3_error)

#line 814 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 814 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Resources.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 814 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 814 "miniparla/runtime.pyx"
  return NULL;

#line 814 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 814 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_9Resources___init__(__pyx_self, __pyx_v_self, __pyx_v_vcus);

#line 814 "miniparla/runtime.pyx"


#line 814 "miniparla/runtime.pyx"
  /* function exit code */

#line 814 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 814 "miniparla/runtime.pyx"
  return __pyx_r;

#line 814 "miniparla/runtime.pyx"
}

#line 814 "miniparla/runtime.pyx"


#line 814 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_9Resources___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_vcus) {

#line 814 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 814 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 814 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 814 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 814 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 814 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "miniparla/runtime.pyx":815
 * 
 *     def __init__(self, vcus):
 *         self.vcus = vcus             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 815 "miniparla/runtime.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_vcus, __pyx_v_vcus) < 0) __PYX_ERR(0, 815, __pyx_L1_error)

  /* "miniparla/runtime.pyx":814
 * class Resources:
 * 
 *     def __init__(self, vcus):             # <<<<<<<<<<<<<<
 *         self.vcus = vcus
 * 
 */

#line 814 "miniparla/runtime.pyx"


#line 814 "miniparla/runtime.pyx"
  /* function exit code */

#line 814 "miniparla/runtime.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 814 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 814 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 814 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime.Resources.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 814 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 814 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 814 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 814 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 814 "miniparla/runtime.pyx"
  return __pyx_r;

#line 814 "miniparla/runtime.pyx"
}

/* "miniparla/runtime.pyx":819
 * 
 * 
 * def _task_callback(task, body):             # <<<<<<<<<<<<<<
 *     """
 *     A function which forwards to a python function in the appropriate device context.
 */

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
/* Python wrapper */

#line 819 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_5_task_callback(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 819 "miniparla/runtime.pyx"
static char __pyx_doc_9miniparla_7runtime_4_task_callback[] = "\n    A function which forwards to a python function in the appropriate device context.\n    ";
static PyMethodDef __pyx_mdef_9miniparla_7runtime_5_task_callback = 
#line 819 "miniparla/runtime.pyx"
{"_task_callback", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9miniparla_7runtime_5_task_callback, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9miniparla_7runtime_4_task_callback};

#line 819 "miniparla/runtime.pyx"
static PyObject *__pyx_pw_9miniparla_7runtime_5_task_callback(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_task = 0
#line 819 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_body = 0
#line 819 "miniparla/runtime.pyx"
;

#line 819 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 819 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 819 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_r = 0;

#line 819 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 819 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_task_callback (wrapper)", 0);

#line 819 "miniparla/runtime.pyx"
  {

#line 819 "miniparla/runtime.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_task_2,&__pyx_n_s_body,0};

#line 819 "miniparla/runtime.pyx"
    PyObject* values[2] = {0,0};

#line 819 "miniparla/runtime.pyx"
    if (unlikely(__pyx_kwds)) {

#line 819 "miniparla/runtime.pyx"
      Py_ssize_t kw_args;

#line 819 "miniparla/runtime.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 819 "miniparla/runtime.pyx"
      switch (pos_args) {
        case  2: 
#line 819 "miniparla/runtime.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 819 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 819 "miniparla/runtime.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 819 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 819 "miniparla/runtime.pyx"
        case  0: break;
        default: 
#line 819 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 819 "miniparla/runtime.pyx"
      }

#line 819 "miniparla/runtime.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 819 "miniparla/runtime.pyx"
      switch (pos_args) {

#line 819 "miniparla/runtime.pyx"
        case  0:

#line 819 "miniparla/runtime.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_task_2)) != 0)) kw_args--;
        else 
#line 819 "miniparla/runtime.pyx"
goto __pyx_L5_argtuple_error;

#line 819 "miniparla/runtime.pyx"
        CYTHON_FALLTHROUGH;

#line 819 "miniparla/runtime.pyx"
        case  1:

#line 819 "miniparla/runtime.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_body)) != 0)) kw_args--;

#line 819 "miniparla/runtime.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_task_callback", 1, 2, 2, 1); 
#line 819 "miniparla/runtime.pyx"
__PYX_ERR(0, 819, __pyx_L3_error)

#line 819 "miniparla/runtime.pyx"
        }

#line 819 "miniparla/runtime.pyx"
      }

#line 819 "miniparla/runtime.pyx"
      if (unlikely(kw_args > 0)) {

#line 819 "miniparla/runtime.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_task_callback") < 0)) __PYX_ERR(0, 819, __pyx_L3_error)

#line 819 "miniparla/runtime.pyx"
      }

#line 819 "miniparla/runtime.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 819 "miniparla/runtime.pyx"
      goto __pyx_L5_argtuple_error;

#line 819 "miniparla/runtime.pyx"
    } else {

#line 819 "miniparla/runtime.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 819 "miniparla/runtime.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 819 "miniparla/runtime.pyx"
    }

#line 819 "miniparla/runtime.pyx"
    __pyx_v_task = values[0];

#line 819 "miniparla/runtime.pyx"
    __pyx_v_body = values[1];

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 819 "miniparla/runtime.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_task_callback", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 819 "miniparla/runtime.pyx"
__PYX_ERR(0, 819, __pyx_L3_error)

#line 819 "miniparla/runtime.pyx"
  __pyx_L3_error:;

#line 819 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime._task_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 819 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 819 "miniparla/runtime.pyx"
  return NULL;

#line 819 "miniparla/runtime.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 819 "miniparla/runtime.pyx"
__pyx_pf_9miniparla_7runtime_4_task_callback(__pyx_self, __pyx_v_task, __pyx_v_body);

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
  /* function exit code */

#line 819 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 819 "miniparla/runtime.pyx"
  return __pyx_r;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyObject *__pyx_pf_9miniparla_7runtime_4_task_callback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_task, PyObject *__pyx_v_body) {
  PyObject *__pyx_v_in_value_task = NULL
#line 819 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_in_value = NULL
#line 819 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_new_task_info = NULL
#line 819 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_dependencies = NULL
#line 819 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_value_task = NULL
#line 819 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_e = NULL
#line 819 "miniparla/runtime.pyx"
;
  PyObject *__pyx_v_result = NULL
#line 819 "miniparla/runtime.pyx"
;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_r = NULL;

#line 819 "miniparla/runtime.pyx"
  __Pyx_RefNannyDeclarations

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 819 "miniparla/runtime.pyx"
  int __pyx_t_4;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 819 "miniparla/runtime.pyx"
  int __pyx_t_8;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 819 "miniparla/runtime.pyx"
  int __pyx_t_11;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 819 "miniparla/runtime.pyx"
  PyObject *(*__pyx_t_13)(PyObject *);

#line 819 "miniparla/runtime.pyx"
  int __pyx_t_14;

#line 819 "miniparla/runtime.pyx"
  char const *__pyx_t_15;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_16 = NULL;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_17 = NULL;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_18 = NULL;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_19 = NULL;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_20 = NULL;

#line 819 "miniparla/runtime.pyx"
  PyObject *__pyx_t_21 = NULL;

#line 819 "miniparla/runtime.pyx"
  char const *__pyx_t_22;

#line 819 "miniparla/runtime.pyx"
  int __pyx_lineno = 0;

#line 819 "miniparla/runtime.pyx"
  const char *__pyx_filename = NULL;

#line 819 "miniparla/runtime.pyx"
  int __pyx_clineno = 0;

#line 819 "miniparla/runtime.pyx"
  __Pyx_RefNannySetupContext("_task_callback", 0);

#line 819 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_v_body);

  /* "miniparla/runtime.pyx":823
 *     A function which forwards to a python function in the appropriate device context.
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         body = body
 * 
 */

#line 823 "miniparla/runtime.pyx"
  /*try:*/ {

    /* "miniparla/runtime.pyx":824
 *     """
 *     try:
 *         body = body             # <<<<<<<<<<<<<<
 * 
 *         if inspect.iscoroutinefunction(body):
 */

#line 824 "miniparla/runtime.pyx"
    __Pyx_INCREF(__pyx_v_body);

#line 824 "miniparla/runtime.pyx"
    __Pyx_DECREF_SET(__pyx_v_body, __pyx_v_body);

    /* "miniparla/runtime.pyx":826
 *         body = body
 * 
 *         if inspect.iscoroutinefunction(body):             # <<<<<<<<<<<<<<
 *             body = body()
 * 
 */

#line 826 "miniparla/runtime.pyx"
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_inspect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L4_error)

#line 826 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 826 "miniparla/runtime.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_iscoroutinefunction); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 826, __pyx_L4_error)

#line 826 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 826 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 826 "miniparla/runtime.pyx"
    __pyx_t_2 = NULL;

#line 826 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 826 "miniparla/runtime.pyx"
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 826 "miniparla/runtime.pyx"
      if (likely(__pyx_t_2)) {

#line 826 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 826 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_2);

#line 826 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 826 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 826 "miniparla/runtime.pyx"
      }

#line 826 "miniparla/runtime.pyx"
    }

#line 826 "miniparla/runtime.pyx"
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_body) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_body);

#line 826 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 826 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 826, __pyx_L4_error)

#line 826 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 826 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 826 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 826, __pyx_L4_error)

#line 826 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 826 "miniparla/runtime.pyx"
    if (__pyx_t_4) {

      /* "miniparla/runtime.pyx":827
 * 
 *         if inspect.iscoroutinefunction(body):
 *             body = body()             # <<<<<<<<<<<<<<
 * 
 *         if inspect.iscoroutine(body):
 */

#line 827 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_v_body);
      __pyx_t_3 = __pyx_v_body; 
#line 827 "miniparla/runtime.pyx"
__pyx_t_2 = NULL;

#line 827 "miniparla/runtime.pyx"
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 827 "miniparla/runtime.pyx"
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 827 "miniparla/runtime.pyx"
        if (likely(__pyx_t_2)) {

#line 827 "miniparla/runtime.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 827 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_t_2);

#line 827 "miniparla/runtime.pyx"
          __Pyx_INCREF(function);

#line 827 "miniparla/runtime.pyx"
          __Pyx_DECREF_SET(__pyx_t_3, function);

#line 827 "miniparla/runtime.pyx"
        }

#line 827 "miniparla/runtime.pyx"
      }

#line 827 "miniparla/runtime.pyx"
      __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);

#line 827 "miniparla/runtime.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 827 "miniparla/runtime.pyx"
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L4_error)

#line 827 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 827 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 827 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_v_body, __pyx_t_1);

#line 827 "miniparla/runtime.pyx"
      __pyx_t_1 = 0;

      /* "miniparla/runtime.pyx":826
 *         body = body
 * 
 *         if inspect.iscoroutinefunction(body):             # <<<<<<<<<<<<<<
 *             body = body()
 * 
 */

#line 826 "miniparla/runtime.pyx"
    }

    /* "miniparla/runtime.pyx":829
 *             body = body()
 * 
 *         if inspect.iscoroutine(body):             # <<<<<<<<<<<<<<
 *             try:
 *                 in_value_task = getattr(task, "value_task", None)
 */

#line 829 "miniparla/runtime.pyx"
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_inspect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 829, __pyx_L4_error)

#line 829 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 829 "miniparla/runtime.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iscoroutine); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 829, __pyx_L4_error)

#line 829 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 829 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 829 "miniparla/runtime.pyx"
    __pyx_t_3 = NULL;

#line 829 "miniparla/runtime.pyx"
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 829 "miniparla/runtime.pyx"
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 829 "miniparla/runtime.pyx"
      if (likely(__pyx_t_3)) {

#line 829 "miniparla/runtime.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 829 "miniparla/runtime.pyx"
        __Pyx_INCREF(__pyx_t_3);

#line 829 "miniparla/runtime.pyx"
        __Pyx_INCREF(function);

#line 829 "miniparla/runtime.pyx"
        __Pyx_DECREF_SET(__pyx_t_2, function);

#line 829 "miniparla/runtime.pyx"
      }

#line 829 "miniparla/runtime.pyx"
    }

#line 829 "miniparla/runtime.pyx"
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_body) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_body);

#line 829 "miniparla/runtime.pyx"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 829 "miniparla/runtime.pyx"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L4_error)

#line 829 "miniparla/runtime.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 829 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 829 "miniparla/runtime.pyx"
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 829, __pyx_L4_error)

#line 829 "miniparla/runtime.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 829 "miniparla/runtime.pyx"
    if (__pyx_t_4) {

      /* "miniparla/runtime.pyx":830
 * 
 *         if inspect.iscoroutine(body):
 *             try:             # <<<<<<<<<<<<<<
 *                 in_value_task = getattr(task, "value_task", None)
 *                 in_value = in_value_task and in_value_task.result
 */

#line 830 "miniparla/runtime.pyx"
      {

#line 830 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_declare

#line 830 "miniparla/runtime.pyx"
        __Pyx_PyThreadState_assign

#line 830 "miniparla/runtime.pyx"
        __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_5);

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_6);

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGOTREF(__pyx_t_7);

#line 830 "miniparla/runtime.pyx"
        /*try:*/ {

          /* "miniparla/runtime.pyx":831
 *         if inspect.iscoroutine(body):
 *             try:
 *                 in_value_task = getattr(task, "value_task", None)             # <<<<<<<<<<<<<<
 *                 in_value = in_value_task and in_value_task.result
 * 
 */

#line 831 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_GetAttr3(__pyx_v_task, __pyx_n_u_value_task, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L8_error)

#line 831 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 831 "miniparla/runtime.pyx"
          __pyx_v_in_value_task = __pyx_t_1;

#line 831 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":832
 *             try:
 *                 in_value_task = getattr(task, "value_task", None)
 *                 in_value = in_value_task and in_value_task.result             # <<<<<<<<<<<<<<
 * 
 *                 new_task_info = body.send(in_value)
 */

#line 832 "miniparla/runtime.pyx"
          __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_in_value_task); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 832, __pyx_L8_error)

#line 832 "miniparla/runtime.pyx"
          if (__pyx_t_4) {

#line 832 "miniparla/runtime.pyx"
          } else {

#line 832 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_v_in_value_task);

#line 832 "miniparla/runtime.pyx"
            __pyx_t_1 = __pyx_v_in_value_task;

#line 832 "miniparla/runtime.pyx"
            goto __pyx_L14_bool_binop_done;

#line 832 "miniparla/runtime.pyx"
          }

#line 832 "miniparla/runtime.pyx"
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_value_task, __pyx_n_s_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 832, __pyx_L8_error)

#line 832 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 832 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_t_2);

#line 832 "miniparla/runtime.pyx"
          __pyx_t_1 = __pyx_t_2;

#line 832 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 832 "miniparla/runtime.pyx"
          __pyx_L14_bool_binop_done:;

#line 832 "miniparla/runtime.pyx"
          __pyx_v_in_value = __pyx_t_1;

#line 832 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":834
 *                 in_value = in_value_task and in_value_task.result
 * 
 *                 new_task_info = body.send(in_value)             # <<<<<<<<<<<<<<
 *                 task.value_task = None
 *                 if not isinstance(new_task_info, TaskAwaitTasks):
 */

#line 834 "miniparla/runtime.pyx"
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_body, __pyx_n_s_send); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 834, __pyx_L8_error)

#line 834 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 834 "miniparla/runtime.pyx"
          __pyx_t_3 = NULL;

#line 834 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 834 "miniparla/runtime.pyx"
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 834 "miniparla/runtime.pyx"
            if (likely(__pyx_t_3)) {

#line 834 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 834 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_3);

#line 834 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 834 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_2, function);

#line 834 "miniparla/runtime.pyx"
            }

#line 834 "miniparla/runtime.pyx"
          }

#line 834 "miniparla/runtime.pyx"
          __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_in_value) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_in_value);

#line 834 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 834 "miniparla/runtime.pyx"
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L8_error)

#line 834 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 834 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 834 "miniparla/runtime.pyx"
          __pyx_v_new_task_info = __pyx_t_1;

#line 834 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":835
 * 
 *                 new_task_info = body.send(in_value)
 *                 task.value_task = None             # <<<<<<<<<<<<<<
 *                 if not isinstance(new_task_info, TaskAwaitTasks):
 *                     raise TypeError(
 */

#line 835 "miniparla/runtime.pyx"
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_task, __pyx_n_s_value_task, Py_None) < 0) __PYX_ERR(0, 835, __pyx_L8_error)

          /* "miniparla/runtime.pyx":836
 *                 new_task_info = body.send(in_value)
 *                 task.value_task = None
 *                 if not isinstance(new_task_info, TaskAwaitTasks):             # <<<<<<<<<<<<<<
 *                     raise TypeError(
 *                         "Parla coroutine tasks must yield a TaskAwaitTasks")
 */

#line 836 "miniparla/runtime.pyx"
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TaskAwaitTasks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L8_error)

#line 836 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 836 "miniparla/runtime.pyx"
          __pyx_t_4 = PyObject_IsInstance(__pyx_v_new_task_info, __pyx_t_1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 836, __pyx_L8_error)

#line 836 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 836 "miniparla/runtime.pyx"
          __pyx_t_8 = ((!(__pyx_t_4 != 0)) != 0);

#line 836 "miniparla/runtime.pyx"
          if (unlikely(__pyx_t_8)) {

            /* "miniparla/runtime.pyx":837
 *                 task.value_task = None
 *                 if not isinstance(new_task_info, TaskAwaitTasks):
 *                     raise TypeError(             # <<<<<<<<<<<<<<
 *                         "Parla coroutine tasks must yield a TaskAwaitTasks")
 *                 dependencies = new_task_info.dependencies
 */

#line 837 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 837, __pyx_L8_error)

#line 837 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 837 "miniparla/runtime.pyx"
            __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 837 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 837 "miniparla/runtime.pyx"
            __PYX_ERR(0, 837, __pyx_L8_error)

            /* "miniparla/runtime.pyx":836
 *                 new_task_info = body.send(in_value)
 *                 task.value_task = None
 *                 if not isinstance(new_task_info, TaskAwaitTasks):             # <<<<<<<<<<<<<<
 *                     raise TypeError(
 *                         "Parla coroutine tasks must yield a TaskAwaitTasks")
 */

#line 836 "miniparla/runtime.pyx"
          }

          /* "miniparla/runtime.pyx":839
 *                     raise TypeError(
 *                         "Parla coroutine tasks must yield a TaskAwaitTasks")
 *                 dependencies = new_task_info.dependencies             # <<<<<<<<<<<<<<
 *                 value_task = new_task_info.value_task
 *                 if value_task:
 */

#line 839 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_task_info, __pyx_n_s_dependencies_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L8_error)

#line 839 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 839 "miniparla/runtime.pyx"
          __pyx_v_dependencies = __pyx_t_1;

#line 839 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":840
 *                         "Parla coroutine tasks must yield a TaskAwaitTasks")
 *                 dependencies = new_task_info.dependencies
 *                 value_task = new_task_info.value_task             # <<<<<<<<<<<<<<
 *                 if value_task:
 *                     assert isinstance(value_task, Task)
 */

#line 840 "miniparla/runtime.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_task_info, __pyx_n_s_value_task); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L8_error)

#line 840 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 840 "miniparla/runtime.pyx"
          __pyx_v_value_task = __pyx_t_1;

#line 840 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

          /* "miniparla/runtime.pyx":841
 *                 dependencies = new_task_info.dependencies
 *                 value_task = new_task_info.value_task
 *                 if value_task:             # <<<<<<<<<<<<<<
 *                     assert isinstance(value_task, Task)
 *                     task.value_task = value_task
 */

#line 841 "miniparla/runtime.pyx"
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_value_task); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 841, __pyx_L8_error)

#line 841 "miniparla/runtime.pyx"
          if (__pyx_t_8) {

            /* "miniparla/runtime.pyx":842
 *                 value_task = new_task_info.value_task
 *                 if value_task:
 *                     assert isinstance(value_task, Task)             # <<<<<<<<<<<<<<
 *                     task.value_task = value_task
 *                 return TaskRunning(_task_callback, (body,), dependencies)
 */

#line 842 "miniparla/runtime.pyx"
            #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 842 "miniparla/runtime.pyx"
            if (unlikely(!Py_OptimizeFlag)) {

#line 842 "miniparla/runtime.pyx"
              __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Task); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L8_error)

#line 842 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_1);

#line 842 "miniparla/runtime.pyx"
              __pyx_t_8 = PyObject_IsInstance(__pyx_v_value_task, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 842, __pyx_L8_error)

#line 842 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 842 "miniparla/runtime.pyx"
              if (unlikely(!(__pyx_t_8 != 0))) {

#line 842 "miniparla/runtime.pyx"
                PyErr_SetNone(PyExc_AssertionError);

#line 842 "miniparla/runtime.pyx"
                __PYX_ERR(0, 842, __pyx_L8_error)

#line 842 "miniparla/runtime.pyx"
              }

#line 842 "miniparla/runtime.pyx"
            }

#line 842 "miniparla/runtime.pyx"
            #endif

            /* "miniparla/runtime.pyx":843
 *                 if value_task:
 *                     assert isinstance(value_task, Task)
 *                     task.value_task = value_task             # <<<<<<<<<<<<<<
 *                 return TaskRunning(_task_callback, (body,), dependencies)
 *             except StopIteration as e:
 */

#line 843 "miniparla/runtime.pyx"
            if (__Pyx_PyObject_SetAttrStr(__pyx_v_task, __pyx_n_s_value_task, __pyx_v_value_task) < 0) __PYX_ERR(0, 843, __pyx_L8_error)

            /* "miniparla/runtime.pyx":841
 *                 dependencies = new_task_info.dependencies
 *                 value_task = new_task_info.value_task
 *                 if value_task:             # <<<<<<<<<<<<<<
 *                     assert isinstance(value_task, Task)
 *                     task.value_task = value_task
 */

#line 841 "miniparla/runtime.pyx"
          }

          /* "miniparla/runtime.pyx":844
 *                     assert isinstance(value_task, Task)
 *                     task.value_task = value_task
 *                 return TaskRunning(_task_callback, (body,), dependencies)             # <<<<<<<<<<<<<<
 *             except StopIteration as e:
 *                 result = None
 */

#line 844 "miniparla/runtime.pyx"
          __Pyx_XDECREF(__pyx_r);

#line 844 "miniparla/runtime.pyx"
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TaskRunning); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 844, __pyx_L8_error)

#line 844 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 844 "miniparla/runtime.pyx"
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_task_callback); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L8_error)

#line 844 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 844 "miniparla/runtime.pyx"
          __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 844, __pyx_L8_error)

#line 844 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 844 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_v_body);

#line 844 "miniparla/runtime.pyx"
          __Pyx_GIVEREF(__pyx_v_body);

#line 844 "miniparla/runtime.pyx"
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_body);

#line 844 "miniparla/runtime.pyx"
          __pyx_t_10 = NULL;

#line 844 "miniparla/runtime.pyx"
          __pyx_t_11 = 0;

#line 844 "miniparla/runtime.pyx"
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 844 "miniparla/runtime.pyx"
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);

#line 844 "miniparla/runtime.pyx"
            if (likely(__pyx_t_10)) {

#line 844 "miniparla/runtime.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 844 "miniparla/runtime.pyx"
              __Pyx_INCREF(__pyx_t_10);

#line 844 "miniparla/runtime.pyx"
              __Pyx_INCREF(function);

#line 844 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_t_2, function);

#line 844 "miniparla/runtime.pyx"
              __pyx_t_11 = 1;

#line 844 "miniparla/runtime.pyx"
            }

#line 844 "miniparla/runtime.pyx"
          }

#line 844 "miniparla/runtime.pyx"
          #if CYTHON_FAST_PYCALL

#line 844 "miniparla/runtime.pyx"
          if (PyFunction_Check(__pyx_t_2)) {

#line 844 "miniparla/runtime.pyx"
            PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_3, __pyx_t_9, __pyx_v_dependencies};

#line 844 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L8_error)

#line 844 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 844 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 844 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 844 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 844 "miniparla/runtime.pyx"
          } else

#line 844 "miniparla/runtime.pyx"
          #endif

#line 844 "miniparla/runtime.pyx"
          #if CYTHON_FAST_PYCCALL

#line 844 "miniparla/runtime.pyx"
          if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {

#line 844 "miniparla/runtime.pyx"
            PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_3, __pyx_t_9, __pyx_v_dependencies};

#line 844 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L8_error)

#line 844 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 844 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 844 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 844 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 844 "miniparla/runtime.pyx"
          } else

#line 844 "miniparla/runtime.pyx"
          #endif

#line 844 "miniparla/runtime.pyx"
          {

#line 844 "miniparla/runtime.pyx"
            __pyx_t_12 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 844, __pyx_L8_error)

#line 844 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_12);

#line 844 "miniparla/runtime.pyx"
            if (__pyx_t_10) {

#line 844 "miniparla/runtime.pyx"
              __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;

#line 844 "miniparla/runtime.pyx"
            }

#line 844 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_3);

#line 844 "miniparla/runtime.pyx"
            PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_3);

#line 844 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_t_9);

#line 844 "miniparla/runtime.pyx"
            PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_9);

#line 844 "miniparla/runtime.pyx"
            __Pyx_INCREF(__pyx_v_dependencies);

#line 844 "miniparla/runtime.pyx"
            __Pyx_GIVEREF(__pyx_v_dependencies);

#line 844 "miniparla/runtime.pyx"
            PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_11, __pyx_v_dependencies);

#line 844 "miniparla/runtime.pyx"
            __pyx_t_3 = 0;

#line 844 "miniparla/runtime.pyx"
            __pyx_t_9 = 0;

#line 844 "miniparla/runtime.pyx"
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L8_error)

#line 844 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 844 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 844 "miniparla/runtime.pyx"
          }

#line 844 "miniparla/runtime.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 844 "miniparla/runtime.pyx"
          __pyx_r = __pyx_t_1;

#line 844 "miniparla/runtime.pyx"
          __pyx_t_1 = 0;

#line 844 "miniparla/runtime.pyx"
          goto __pyx_L12_try_return;

          /* "miniparla/runtime.pyx":830
 * 
 *         if inspect.iscoroutine(body):
 *             try:             # <<<<<<<<<<<<<<
 *                 in_value_task = getattr(task, "value_task", None)
 *                 in_value = in_value_task and in_value_task.result
 */

#line 830 "miniparla/runtime.pyx"
        }

#line 830 "miniparla/runtime.pyx"
        __pyx_L8_error:;

#line 830 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 830 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 830 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 830 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 830 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 830 "miniparla/runtime.pyx"
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "miniparla/runtime.pyx":845
 *                     task.value_task = value_task
 *                 return TaskRunning(_task_callback, (body,), dependencies)
 *             except StopIteration as e:             # <<<<<<<<<<<<<<
 *                 result = None
 *                 if e.args:
 */

#line 845 "miniparla/runtime.pyx"
        __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);

#line 845 "miniparla/runtime.pyx"
        if (__pyx_t_11) {

#line 845 "miniparla/runtime.pyx"
          __Pyx_AddTraceback("miniparla.runtime._task_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 845 "miniparla/runtime.pyx"
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_12) < 0) __PYX_ERR(0, 845, __pyx_L10_except_error)

#line 845 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 845 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 845 "miniparla/runtime.pyx"
          __Pyx_GOTREF(__pyx_t_12);

#line 845 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_t_2);

#line 845 "miniparla/runtime.pyx"
          __pyx_v_e = __pyx_t_2;

#line 845 "miniparla/runtime.pyx"
          /*try:*/ {

            /* "miniparla/runtime.pyx":846
 *                 return TaskRunning(_task_callback, (body,), dependencies)
 *             except StopIteration as e:
 *                 result = None             # <<<<<<<<<<<<<<
 *                 if e.args:
 *                     (result,) = e.args
 */

#line 846 "miniparla/runtime.pyx"
            __Pyx_INCREF(Py_None);

#line 846 "miniparla/runtime.pyx"
            __pyx_v_result = Py_None;

            /* "miniparla/runtime.pyx":847
 *             except StopIteration as e:
 *                 result = None
 *                 if e.args:             # <<<<<<<<<<<<<<
 *                     (result,) = e.args
 *                 return TaskCompleted(result)
 */

#line 847 "miniparla/runtime.pyx"
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 847, __pyx_L23_error)

#line 847 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 847 "miniparla/runtime.pyx"
            __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 847, __pyx_L23_error)

#line 847 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 847 "miniparla/runtime.pyx"
            if (__pyx_t_8) {

              /* "miniparla/runtime.pyx":848
 *                 result = None
 *                 if e.args:
 *                     (result,) = e.args             # <<<<<<<<<<<<<<
 *                 return TaskCompleted(result)
 *         else:
 */

#line 848 "miniparla/runtime.pyx"
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 848, __pyx_L23_error)

#line 848 "miniparla/runtime.pyx"
              __Pyx_GOTREF(__pyx_t_9);

#line 848 "miniparla/runtime.pyx"
              if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {

#line 848 "miniparla/runtime.pyx"
                PyObject* sequence = __pyx_t_9;

#line 848 "miniparla/runtime.pyx"
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);

#line 848 "miniparla/runtime.pyx"
                if (unlikely(size != 1)) {

#line 848 "miniparla/runtime.pyx"
                  if (size > 1) __Pyx_RaiseTooManyValuesError(1);

#line 848 "miniparla/runtime.pyx"
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 848 "miniparla/runtime.pyx"
                  __PYX_ERR(0, 848, __pyx_L23_error)

#line 848 "miniparla/runtime.pyx"
                }

#line 848 "miniparla/runtime.pyx"
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 848 "miniparla/runtime.pyx"
                if (likely(PyTuple_CheckExact(sequence))) {

#line 848 "miniparla/runtime.pyx"
                  __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 

#line 848 "miniparla/runtime.pyx"
                } else {

#line 848 "miniparla/runtime.pyx"
                  __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 

#line 848 "miniparla/runtime.pyx"
                }

#line 848 "miniparla/runtime.pyx"
                __Pyx_INCREF(__pyx_t_3);

#line 848 "miniparla/runtime.pyx"
                #else

#line 848 "miniparla/runtime.pyx"
                __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 848, __pyx_L23_error)

#line 848 "miniparla/runtime.pyx"
                __Pyx_GOTREF(__pyx_t_3);

#line 848 "miniparla/runtime.pyx"
                #endif

#line 848 "miniparla/runtime.pyx"
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 848 "miniparla/runtime.pyx"
              } else {

#line 848 "miniparla/runtime.pyx"
                Py_ssize_t index = -1;

#line 848 "miniparla/runtime.pyx"
                __pyx_t_10 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 848, __pyx_L23_error)

#line 848 "miniparla/runtime.pyx"
                __Pyx_GOTREF(__pyx_t_10);

#line 848 "miniparla/runtime.pyx"
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 848 "miniparla/runtime.pyx"
                __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext;
                index = 0; __pyx_t_3 = __pyx_t_13(__pyx_t_10); if (unlikely(!__pyx_t_3)) 
#line 848 "miniparla/runtime.pyx"
goto __pyx_L26_unpacking_failed;

#line 848 "miniparla/runtime.pyx"
                __Pyx_GOTREF(__pyx_t_3);

#line 848 "miniparla/runtime.pyx"
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_10), 1) < 0) __PYX_ERR(0, 848, __pyx_L23_error)

#line 848 "miniparla/runtime.pyx"
                __pyx_t_13 = NULL;

#line 848 "miniparla/runtime.pyx"
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 848 "miniparla/runtime.pyx"
                goto __pyx_L27_unpacking_done;

#line 848 "miniparla/runtime.pyx"
                __pyx_L26_unpacking_failed:;

#line 848 "miniparla/runtime.pyx"
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 848 "miniparla/runtime.pyx"
                __pyx_t_13 = NULL;

#line 848 "miniparla/runtime.pyx"
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 848 "miniparla/runtime.pyx"
                __PYX_ERR(0, 848, __pyx_L23_error)

#line 848 "miniparla/runtime.pyx"
                __pyx_L27_unpacking_done:;

#line 848 "miniparla/runtime.pyx"
              }

#line 848 "miniparla/runtime.pyx"
              __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_3);

#line 848 "miniparla/runtime.pyx"
              __pyx_t_3 = 0;

              /* "miniparla/runtime.pyx":847
 *             except StopIteration as e:
 *                 result = None
 *                 if e.args:             # <<<<<<<<<<<<<<
 *                     (result,) = e.args
 *                 return TaskCompleted(result)
 */

#line 847 "miniparla/runtime.pyx"
            }

            /* "miniparla/runtime.pyx":849
 *                 if e.args:
 *                     (result,) = e.args
 *                 return TaskCompleted(result)             # <<<<<<<<<<<<<<
 *         else:
 *             result = body()
 */

#line 849 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_r);

#line 849 "miniparla/runtime.pyx"
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TaskCompleted); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 849, __pyx_L23_error)

#line 849 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_3);

#line 849 "miniparla/runtime.pyx"
            __pyx_t_10 = NULL;

#line 849 "miniparla/runtime.pyx"
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 849 "miniparla/runtime.pyx"
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);

#line 849 "miniparla/runtime.pyx"
              if (likely(__pyx_t_10)) {

#line 849 "miniparla/runtime.pyx"
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 849 "miniparla/runtime.pyx"
                __Pyx_INCREF(__pyx_t_10);

#line 849 "miniparla/runtime.pyx"
                __Pyx_INCREF(function);

#line 849 "miniparla/runtime.pyx"
                __Pyx_DECREF_SET(__pyx_t_3, function);

#line 849 "miniparla/runtime.pyx"
              }

#line 849 "miniparla/runtime.pyx"
            }

#line 849 "miniparla/runtime.pyx"
            __pyx_t_9 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_10, __pyx_v_result) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_result);

#line 849 "miniparla/runtime.pyx"
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 849 "miniparla/runtime.pyx"
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 849, __pyx_L23_error)

#line 849 "miniparla/runtime.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 849 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 849 "miniparla/runtime.pyx"
            __pyx_r = __pyx_t_9;

#line 849 "miniparla/runtime.pyx"
            __pyx_t_9 = 0;

#line 849 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 849 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 849 "miniparla/runtime.pyx"
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 849 "miniparla/runtime.pyx"
            goto __pyx_L22_return;

#line 849 "miniparla/runtime.pyx"
          }

          /* "miniparla/runtime.pyx":845
 *                     task.value_task = value_task
 *                 return TaskRunning(_task_callback, (body,), dependencies)
 *             except StopIteration as e:             # <<<<<<<<<<<<<<
 *                 result = None
 *                 if e.args:
 */

#line 845 "miniparla/runtime.pyx"
          /*finally:*/ {

#line 845 "miniparla/runtime.pyx"
            __pyx_L23_error:;

#line 845 "miniparla/runtime.pyx"
            /*exception exit:*/{

#line 845 "miniparla/runtime.pyx"
              __Pyx_PyThreadState_declare

#line 845 "miniparla/runtime.pyx"
              __Pyx_PyThreadState_assign

#line 845 "miniparla/runtime.pyx"
              __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;

#line 845 "miniparla/runtime.pyx"
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 845 "miniparla/runtime.pyx"
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 845 "miniparla/runtime.pyx"
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 845 "miniparla/runtime.pyx"
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);

#line 845 "miniparla/runtime.pyx"
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);

#line 845 "miniparla/runtime.pyx"
              __Pyx_XGOTREF(__pyx_t_16);

#line 845 "miniparla/runtime.pyx"
              __Pyx_XGOTREF(__pyx_t_17);

#line 845 "miniparla/runtime.pyx"
              __Pyx_XGOTREF(__pyx_t_18);

#line 845 "miniparla/runtime.pyx"
              __Pyx_XGOTREF(__pyx_t_19);

#line 845 "miniparla/runtime.pyx"
              __Pyx_XGOTREF(__pyx_t_20);

#line 845 "miniparla/runtime.pyx"
              __Pyx_XGOTREF(__pyx_t_21);

#line 845 "miniparla/runtime.pyx"
              __pyx_t_11 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;

#line 845 "miniparla/runtime.pyx"
              {

#line 845 "miniparla/runtime.pyx"
                __Pyx_DECREF(__pyx_v_e);

#line 845 "miniparla/runtime.pyx"
                __pyx_v_e = NULL;

#line 845 "miniparla/runtime.pyx"
              }

#line 845 "miniparla/runtime.pyx"
              if (PY_MAJOR_VERSION >= 3) {

#line 845 "miniparla/runtime.pyx"
                __Pyx_XGIVEREF(__pyx_t_19);

#line 845 "miniparla/runtime.pyx"
                __Pyx_XGIVEREF(__pyx_t_20);

#line 845 "miniparla/runtime.pyx"
                __Pyx_XGIVEREF(__pyx_t_21);

#line 845 "miniparla/runtime.pyx"
                __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);

#line 845 "miniparla/runtime.pyx"
              }

#line 845 "miniparla/runtime.pyx"
              __Pyx_XGIVEREF(__pyx_t_16);

#line 845 "miniparla/runtime.pyx"
              __Pyx_XGIVEREF(__pyx_t_17);

#line 845 "miniparla/runtime.pyx"
              __Pyx_XGIVEREF(__pyx_t_18);

#line 845 "miniparla/runtime.pyx"
              __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);

#line 845 "miniparla/runtime.pyx"
              __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;

#line 845 "miniparla/runtime.pyx"
              __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;

#line 845 "miniparla/runtime.pyx"
              goto __pyx_L10_except_error;

#line 845 "miniparla/runtime.pyx"
            }

#line 845 "miniparla/runtime.pyx"
            __pyx_L22_return: {

#line 845 "miniparla/runtime.pyx"
              __pyx_t_21 = __pyx_r;

#line 845 "miniparla/runtime.pyx"
              __pyx_r = 0;

#line 845 "miniparla/runtime.pyx"
              __Pyx_DECREF(__pyx_v_e);

#line 845 "miniparla/runtime.pyx"
              __pyx_v_e = NULL;

#line 845 "miniparla/runtime.pyx"
              __pyx_r = __pyx_t_21;

#line 845 "miniparla/runtime.pyx"
              __pyx_t_21 = 0;

#line 845 "miniparla/runtime.pyx"
              goto __pyx_L11_except_return;

#line 845 "miniparla/runtime.pyx"
            }

#line 845 "miniparla/runtime.pyx"
          }

#line 845 "miniparla/runtime.pyx"
        }

#line 845 "miniparla/runtime.pyx"
        goto __pyx_L10_except_error;

#line 845 "miniparla/runtime.pyx"
        __pyx_L10_except_error:;

        /* "miniparla/runtime.pyx":830
 * 
 *         if inspect.iscoroutine(body):
 *             try:             # <<<<<<<<<<<<<<
 *                 in_value_task = getattr(task, "value_task", None)
 *                 in_value = in_value_task and in_value_task.result
 */

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_5);

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 830 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);

#line 830 "miniparla/runtime.pyx"
        goto __pyx_L4_error;

#line 830 "miniparla/runtime.pyx"
        __pyx_L12_try_return:;

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_5);

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 830 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);

#line 830 "miniparla/runtime.pyx"
        goto __pyx_L3_return;

#line 830 "miniparla/runtime.pyx"
        __pyx_L11_except_return:;

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_5);

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_6);

#line 830 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_7);

#line 830 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);

#line 830 "miniparla/runtime.pyx"
        goto __pyx_L3_return;

#line 830 "miniparla/runtime.pyx"
      }

      /* "miniparla/runtime.pyx":829
 *             body = body()
 * 
 *         if inspect.iscoroutine(body):             # <<<<<<<<<<<<<<
 *             try:
 *                 in_value_task = getattr(task, "value_task", None)
 */

#line 829 "miniparla/runtime.pyx"
    }

    /* "miniparla/runtime.pyx":851
 *                 return TaskCompleted(result)
 *         else:
 *             result = body()             # <<<<<<<<<<<<<<
 *             return TaskCompleted(result)
 *     finally:
 */

#line 851 "miniparla/runtime.pyx"
    /*else*/ {

#line 851 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_v_body);
      __pyx_t_2 = __pyx_v_body; 
#line 851 "miniparla/runtime.pyx"
__pyx_t_1 = NULL;

#line 851 "miniparla/runtime.pyx"
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 851 "miniparla/runtime.pyx"
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);

#line 851 "miniparla/runtime.pyx"
        if (likely(__pyx_t_1)) {

#line 851 "miniparla/runtime.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 851 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_t_1);

#line 851 "miniparla/runtime.pyx"
          __Pyx_INCREF(function);

#line 851 "miniparla/runtime.pyx"
          __Pyx_DECREF_SET(__pyx_t_2, function);

#line 851 "miniparla/runtime.pyx"
        }

#line 851 "miniparla/runtime.pyx"
      }

#line 851 "miniparla/runtime.pyx"
      __pyx_t_12 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);

#line 851 "miniparla/runtime.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 851 "miniparla/runtime.pyx"
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 851, __pyx_L4_error)

#line 851 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 851 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 851 "miniparla/runtime.pyx"
      __pyx_v_result = __pyx_t_12;

#line 851 "miniparla/runtime.pyx"
      __pyx_t_12 = 0;

      /* "miniparla/runtime.pyx":852
 *         else:
 *             result = body()
 *             return TaskCompleted(result)             # <<<<<<<<<<<<<<
 *     finally:
 *         pass
 */

#line 852 "miniparla/runtime.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 852 "miniparla/runtime.pyx"
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TaskCompleted); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 852, __pyx_L4_error)

#line 852 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 852 "miniparla/runtime.pyx"
      __pyx_t_1 = NULL;

#line 852 "miniparla/runtime.pyx"
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 852 "miniparla/runtime.pyx"
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);

#line 852 "miniparla/runtime.pyx"
        if (likely(__pyx_t_1)) {

#line 852 "miniparla/runtime.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 852 "miniparla/runtime.pyx"
          __Pyx_INCREF(__pyx_t_1);

#line 852 "miniparla/runtime.pyx"
          __Pyx_INCREF(function);

#line 852 "miniparla/runtime.pyx"
          __Pyx_DECREF_SET(__pyx_t_2, function);

#line 852 "miniparla/runtime.pyx"
        }

#line 852 "miniparla/runtime.pyx"
      }

#line 852 "miniparla/runtime.pyx"
      __pyx_t_12 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_result) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_result);

#line 852 "miniparla/runtime.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 852 "miniparla/runtime.pyx"
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 852, __pyx_L4_error)

#line 852 "miniparla/runtime.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 852 "miniparla/runtime.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 852 "miniparla/runtime.pyx"
      __pyx_r = __pyx_t_12;

#line 852 "miniparla/runtime.pyx"
      __pyx_t_12 = 0;

#line 852 "miniparla/runtime.pyx"
      goto __pyx_L3_return;

#line 852 "miniparla/runtime.pyx"
    }

#line 852 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":854
 *             return TaskCompleted(result)
 *     finally:
 *         pass             # <<<<<<<<<<<<<<
 *     assert False
 * 
 */

#line 854 "miniparla/runtime.pyx"
  /*finally:*/ {

#line 854 "miniparla/runtime.pyx"
    __pyx_L4_error:;

#line 854 "miniparla/runtime.pyx"
    /*exception exit:*/{

#line 854 "miniparla/runtime.pyx"
      __Pyx_PyThreadState_declare

#line 854 "miniparla/runtime.pyx"
      __Pyx_PyThreadState_assign

#line 854 "miniparla/runtime.pyx"
      __pyx_t_7 = 0; __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;

#line 854 "miniparla/runtime.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 854 "miniparla/runtime.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 854 "miniparla/runtime.pyx"
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 854 "miniparla/runtime.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 854 "miniparla/runtime.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 854 "miniparla/runtime.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 854 "miniparla/runtime.pyx"
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_20, &__pyx_t_19);

#line 854 "miniparla/runtime.pyx"
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);

#line 854 "miniparla/runtime.pyx"
      __Pyx_XGOTREF(__pyx_t_7);

#line 854 "miniparla/runtime.pyx"
      __Pyx_XGOTREF(__pyx_t_6);

#line 854 "miniparla/runtime.pyx"
      __Pyx_XGOTREF(__pyx_t_5);

#line 854 "miniparla/runtime.pyx"
      __Pyx_XGOTREF(__pyx_t_21);

#line 854 "miniparla/runtime.pyx"
      __Pyx_XGOTREF(__pyx_t_20);

#line 854 "miniparla/runtime.pyx"
      __Pyx_XGOTREF(__pyx_t_19);

#line 854 "miniparla/runtime.pyx"
      __pyx_t_14 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_22 = __pyx_filename;

#line 854 "miniparla/runtime.pyx"
      {

#line 854 "miniparla/runtime.pyx"
      }

#line 854 "miniparla/runtime.pyx"
      if (PY_MAJOR_VERSION >= 3) {

#line 854 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_21);

#line 854 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_20);

#line 854 "miniparla/runtime.pyx"
        __Pyx_XGIVEREF(__pyx_t_19);

#line 854 "miniparla/runtime.pyx"
        __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);

#line 854 "miniparla/runtime.pyx"
      }

#line 854 "miniparla/runtime.pyx"
      __Pyx_XGIVEREF(__pyx_t_7);

#line 854 "miniparla/runtime.pyx"
      __Pyx_XGIVEREF(__pyx_t_6);

#line 854 "miniparla/runtime.pyx"
      __Pyx_XGIVEREF(__pyx_t_5);

#line 854 "miniparla/runtime.pyx"
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_6, __pyx_t_5);

#line 854 "miniparla/runtime.pyx"
      __pyx_t_7 = 0; __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;

#line 854 "miniparla/runtime.pyx"
      __pyx_lineno = __pyx_t_14; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_22;

#line 854 "miniparla/runtime.pyx"
      goto __pyx_L1_error;

#line 854 "miniparla/runtime.pyx"
    }

#line 854 "miniparla/runtime.pyx"
    __pyx_L3_return: {

#line 854 "miniparla/runtime.pyx"
      __pyx_t_19 = __pyx_r;

#line 854 "miniparla/runtime.pyx"
      __pyx_r = 0;

#line 854 "miniparla/runtime.pyx"
      __pyx_r = __pyx_t_19;

#line 854 "miniparla/runtime.pyx"
      __pyx_t_19 = 0;

#line 854 "miniparla/runtime.pyx"
      goto __pyx_L0;

#line 854 "miniparla/runtime.pyx"
    }

#line 854 "miniparla/runtime.pyx"
  }

  /* "miniparla/runtime.pyx":819
 * 
 * 
 * def _task_callback(task, body):             # <<<<<<<<<<<<<<
 *     """
 *     A function which forwards to a python function in the appropriate device context.
 */

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
  /* function exit code */

#line 819 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_12);

#line 819 "miniparla/runtime.pyx"
  __Pyx_AddTraceback("miniparla.runtime._task_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 819 "miniparla/runtime.pyx"
  __pyx_r = NULL;

#line 819 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_in_value_task);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_in_value);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_new_task_info);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_dependencies);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_value_task);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_e);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_result);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_v_body);

#line 819 "miniparla/runtime.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 819 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 819 "miniparla/runtime.pyx"
  return __pyx_r;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"
static struct __pyx_vtabstruct_9miniparla_7runtime_PyInnerTask __pyx_vtable_9miniparla_7runtime_PyInnerTask;

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyObject *__pyx_tp_new_9miniparla_7runtime_PyInnerTask(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 819 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime_PyInnerTask *p;

#line 819 "miniparla/runtime.pyx"
  PyObject *o;

#line 819 "miniparla/runtime.pyx"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 819 "miniparla/runtime.pyx"
    o = (*t->tp_alloc)(t, 0);

#line 819 "miniparla/runtime.pyx"
  } else {

#line 819 "miniparla/runtime.pyx"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  if (unlikely(!o)) return 0;

#line 819 "miniparla/runtime.pyx"
  p = ((struct __pyx_obj_9miniparla_7runtime_PyInnerTask *)o);

#line 819 "miniparla/runtime.pyx"
  p->__pyx_vtab = __pyx_vtabptr_9miniparla_7runtime_PyInnerTask;

#line 819 "miniparla/runtime.pyx"
  if (unlikely(__pyx_pw_9miniparla_7runtime_11PyInnerTask_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;

#line 819 "miniparla/runtime.pyx"
  return o;

#line 819 "miniparla/runtime.pyx"
  bad:

#line 819 "miniparla/runtime.pyx"
  Py_DECREF(o); o = 0;

#line 819 "miniparla/runtime.pyx"
  return NULL;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static void __pyx_tp_dealloc_9miniparla_7runtime_PyInnerTask(PyObject *o) {

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_USE_TP_FINALIZE

#line 819 "miniparla/runtime.pyx"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 819 "miniparla/runtime.pyx"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  {

#line 819 "miniparla/runtime.pyx"
    PyObject *etype, *eval, *etb;

#line 819 "miniparla/runtime.pyx"
    PyErr_Fetch(&etype, &eval, &etb);

#line 819 "miniparla/runtime.pyx"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);

#line 819 "miniparla/runtime.pyx"
    __pyx_pw_9miniparla_7runtime_11PyInnerTask_17__dealloc__(o);

#line 819 "miniparla/runtime.pyx"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);

#line 819 "miniparla/runtime.pyx"
    PyErr_Restore(etype, eval, etb);

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  (*Py_TYPE(o)->tp_free)(o);

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyMethodDef __pyx_methods_9miniparla_7runtime_PyInnerTask[] = {

#line 819 "miniparla/runtime.pyx"
  {"set_dependencies", (PyCFunction)__pyx_pw_9miniparla_7runtime_11PyInnerTask_5set_dependencies, METH_O, 0},

#line 819 "miniparla/runtime.pyx"
  {"add_dependency", (PyCFunction)__pyx_pw_9miniparla_7runtime_11PyInnerTask_7add_dependency, METH_O, 0},

#line 819 "miniparla/runtime.pyx"
  {"blocked", (PyCFunction)__pyx_pw_9miniparla_7runtime_11PyInnerTask_9blocked, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"blocked_unsafe", (PyCFunction)__pyx_pw_9miniparla_7runtime_11PyInnerTask_11blocked_unsafe, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"notify_dependents", (PyCFunction)__pyx_pw_9miniparla_7runtime_11PyInnerTask_13notify_dependents, METH_O, 0},

#line 819 "miniparla/runtime.pyx"
  {"get_num_deps", (PyCFunction)__pyx_pw_9miniparla_7runtime_11PyInnerTask_15get_num_deps, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9miniparla_7runtime_11PyInnerTask_19__reduce_cython__, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9miniparla_7runtime_11PyInnerTask_21__setstate_cython__, METH_O, 0},

#line 819 "miniparla/runtime.pyx"
  {0, 0, 0, 0}

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyTypeObject __pyx_type_9miniparla_7runtime_PyInnerTask = {

#line 819 "miniparla/runtime.pyx"
  PyVarObject_HEAD_INIT(0, 0)

#line 819 "miniparla/runtime.pyx"
  "miniparla.runtime.PyInnerTask", /*tp_name*/

#line 819 "miniparla/runtime.pyx"
  sizeof(struct __pyx_obj_9miniparla_7runtime_PyInnerTask), /*tp_basicsize*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_itemsize*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_dealloc_9miniparla_7runtime_PyInnerTask, /*tp_dealloc*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX < 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall_offset*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattr*/

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION < 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_compare*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION >= 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_async*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_repr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_number*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_sequence*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_mapping*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_hash*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_call*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_str*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_buffer*/

#line 819 "miniparla/runtime.pyx"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_doc*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_traverse*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_clear*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_richcompare*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklistoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iter*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iternext*/

#line 819 "miniparla/runtime.pyx"
  __pyx_methods_9miniparla_7runtime_PyInnerTask, /*tp_methods*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_members*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_base*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dict*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_get*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_set*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dictoffset*/

#line 819 "miniparla/runtime.pyx"
  __pyx_pw_9miniparla_7runtime_11PyInnerTask_3__init__, /*tp_init*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_alloc*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_new_9miniparla_7runtime_PyInnerTask, /*tp_new*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_free*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_is_gc*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_bases*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_mro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_cache*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_subclasses*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklist*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_del*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_version_tag*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030400a1

#line 819 "miniparla/runtime.pyx"
  0, /*tp_finalize*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_pypy_flags*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyObject *__pyx_tp_new_9miniparla_7runtime_PyInnerWorker(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 819 "miniparla/runtime.pyx"
  PyObject *o;

#line 819 "miniparla/runtime.pyx"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 819 "miniparla/runtime.pyx"
    o = (*t->tp_alloc)(t, 0);

#line 819 "miniparla/runtime.pyx"
  } else {

#line 819 "miniparla/runtime.pyx"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  if (unlikely(!o)) return 0;

#line 819 "miniparla/runtime.pyx"
  if (unlikely(__pyx_pw_9miniparla_7runtime_13PyInnerWorker_1__cinit__(o, a, k) < 0)) goto bad;

#line 819 "miniparla/runtime.pyx"
  return o;

#line 819 "miniparla/runtime.pyx"
  bad:

#line 819 "miniparla/runtime.pyx"
  Py_DECREF(o); o = 0;

#line 819 "miniparla/runtime.pyx"
  return NULL;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static void __pyx_tp_dealloc_9miniparla_7runtime_PyInnerWorker(PyObject *o) {

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_USE_TP_FINALIZE

#line 819 "miniparla/runtime.pyx"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 819 "miniparla/runtime.pyx"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  (*Py_TYPE(o)->tp_free)(o);

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyMethodDef __pyx_methods_9miniparla_7runtime_PyInnerWorker[] = {

#line 819 "miniparla/runtime.pyx"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9miniparla_7runtime_13PyInnerWorker_3__reduce_cython__, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9miniparla_7runtime_13PyInnerWorker_5__setstate_cython__, METH_O, 0},

#line 819 "miniparla/runtime.pyx"
  {0, 0, 0, 0}

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyTypeObject __pyx_type_9miniparla_7runtime_PyInnerWorker = {

#line 819 "miniparla/runtime.pyx"
  PyVarObject_HEAD_INIT(0, 0)

#line 819 "miniparla/runtime.pyx"
  "miniparla.runtime.PyInnerWorker", /*tp_name*/

#line 819 "miniparla/runtime.pyx"
  sizeof(struct __pyx_obj_9miniparla_7runtime_PyInnerWorker), /*tp_basicsize*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_itemsize*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_dealloc_9miniparla_7runtime_PyInnerWorker, /*tp_dealloc*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX < 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall_offset*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattr*/

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION < 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_compare*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION >= 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_async*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_repr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_number*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_sequence*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_mapping*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_hash*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_call*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_str*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_buffer*/

#line 819 "miniparla/runtime.pyx"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_doc*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_traverse*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_clear*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_richcompare*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklistoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iter*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iternext*/

#line 819 "miniparla/runtime.pyx"
  __pyx_methods_9miniparla_7runtime_PyInnerWorker, /*tp_methods*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_members*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_base*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dict*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_get*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_set*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dictoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_init*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_alloc*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_new_9miniparla_7runtime_PyInnerWorker, /*tp_new*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_free*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_is_gc*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_bases*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_mro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_cache*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_subclasses*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklist*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_del*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_version_tag*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030400a1

#line 819 "miniparla/runtime.pyx"
  0, /*tp_finalize*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_pypy_flags*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyObject *__pyx_tp_new_9miniparla_7runtime_PyInnerScheduler(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 819 "miniparla/runtime.pyx"
  PyObject *o;

#line 819 "miniparla/runtime.pyx"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 819 "miniparla/runtime.pyx"
    o = (*t->tp_alloc)(t, 0);

#line 819 "miniparla/runtime.pyx"
  } else {

#line 819 "miniparla/runtime.pyx"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  if (unlikely(!o)) return 0;

#line 819 "miniparla/runtime.pyx"
  if (unlikely(__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;

#line 819 "miniparla/runtime.pyx"
  return o;

#line 819 "miniparla/runtime.pyx"
  bad:

#line 819 "miniparla/runtime.pyx"
  Py_DECREF(o); o = 0;

#line 819 "miniparla/runtime.pyx"
  return NULL;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static void __pyx_tp_dealloc_9miniparla_7runtime_PyInnerScheduler(PyObject *o) {

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_USE_TP_FINALIZE

#line 819 "miniparla/runtime.pyx"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 819 "miniparla/runtime.pyx"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  {

#line 819 "miniparla/runtime.pyx"
    PyObject *etype, *eval, *etb;

#line 819 "miniparla/runtime.pyx"
    PyErr_Fetch(&etype, &eval, &etb);

#line 819 "miniparla/runtime.pyx"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);

#line 819 "miniparla/runtime.pyx"
    __pyx_pw_9miniparla_7runtime_16PyInnerScheduler_7__dealloc__(o);

#line 819 "miniparla/runtime.pyx"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);

#line 819 "miniparla/runtime.pyx"
    PyErr_Restore(etype, eval, etb);

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  (*Py_TYPE(o)->tp_free)(o);

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyMethodDef __pyx_methods_9miniparla_7runtime_PyInnerScheduler[] = {

#line 819 "miniparla/runtime.pyx"
  {"set_callback", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_5set_callback, METH_O, 0},

#line 819 "miniparla/runtime.pyx"
  {"run", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_9run, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"stop", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_11stop, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"incr_active_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_13incr_active_tasks, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"decr_active_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_15decr_active_tasks, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"incr_running_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_17incr_running_tasks, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"decr_running_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_19decr_running_tasks, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"incr_free_threads", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_21incr_free_threads, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"decr_free_threads", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_23decr_free_threads, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"incr_resources", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_25incr_resources, METH_O, 0},

#line 819 "miniparla/runtime.pyx"
  {"decr_resources", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_27decr_resources, METH_O, 0},

#line 819 "miniparla/runtime.pyx"
  {"get_active_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_29get_active_tasks, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"get_running_tasks", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_31get_running_tasks, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"get_free_threads", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_33get_free_threads, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"run_scheduler", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_35run_scheduler, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"enqueue_task", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_37enqueue_task, METH_O, 0},

#line 819 "miniparla/runtime.pyx"
  {"enqueue_worker", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_39enqueue_worker, METH_O, 0},

#line 819 "miniparla/runtime.pyx"
  {"get_status", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_41get_status, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_43__reduce_cython__, METH_NOARGS, 0},

#line 819 "miniparla/runtime.pyx"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9miniparla_7runtime_16PyInnerScheduler_45__setstate_cython__, METH_O, 0},

#line 819 "miniparla/runtime.pyx"
  {0, 0, 0, 0}

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyTypeObject __pyx_type_9miniparla_7runtime_PyInnerScheduler = {

#line 819 "miniparla/runtime.pyx"
  PyVarObject_HEAD_INIT(0, 0)

#line 819 "miniparla/runtime.pyx"
  "miniparla.runtime.PyInnerScheduler", /*tp_name*/

#line 819 "miniparla/runtime.pyx"
  sizeof(struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler), /*tp_basicsize*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_itemsize*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_dealloc_9miniparla_7runtime_PyInnerScheduler, /*tp_dealloc*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX < 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall_offset*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattr*/

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION < 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_compare*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION >= 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_async*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_repr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_number*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_sequence*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_mapping*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_hash*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_call*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_str*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_buffer*/

#line 819 "miniparla/runtime.pyx"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_doc*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_traverse*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_clear*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_richcompare*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklistoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iter*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iternext*/

#line 819 "miniparla/runtime.pyx"
  __pyx_methods_9miniparla_7runtime_PyInnerScheduler, /*tp_methods*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_members*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_base*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dict*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_get*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_set*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dictoffset*/

#line 819 "miniparla/runtime.pyx"
  __pyx_pw_9miniparla_7runtime_16PyInnerScheduler_3__init__, /*tp_init*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_alloc*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_new_9miniparla_7runtime_PyInnerScheduler, /*tp_new*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_free*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_is_gc*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_bases*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_mro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_cache*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_subclasses*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklist*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_del*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_version_tag*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030400a1

#line 819 "miniparla/runtime.pyx"
  0, /*tp_finalize*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_pypy_flags*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *__pyx_freelist_9miniparla_7runtime___pyx_scope_struct__full_name[8];

#line 819 "miniparla/runtime.pyx"
static int __pyx_freecount_9miniparla_7runtime___pyx_scope_struct__full_name = 0;

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyObject *__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct__full_name(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 819 "miniparla/runtime.pyx"
  PyObject *o;

#line 819 "miniparla/runtime.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9miniparla_7runtime___pyx_scope_struct__full_name > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name)))) {

#line 819 "miniparla/runtime.pyx"
    o = (PyObject*)__pyx_freelist_9miniparla_7runtime___pyx_scope_struct__full_name[--__pyx_freecount_9miniparla_7runtime___pyx_scope_struct__full_name];

#line 819 "miniparla/runtime.pyx"
    memset(o, 0, sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name));

#line 819 "miniparla/runtime.pyx"
    (void) PyObject_INIT(o, t);

#line 819 "miniparla/runtime.pyx"
    PyObject_GC_Track(o);

#line 819 "miniparla/runtime.pyx"
  } else {

#line 819 "miniparla/runtime.pyx"
    o = (*t->tp_alloc)(t, 0);

#line 819 "miniparla/runtime.pyx"
    if (unlikely(!o)) return 0;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  return o;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static void __pyx_tp_dealloc_9miniparla_7runtime___pyx_scope_struct__full_name(PyObject *o) {

#line 819 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *p = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *)o;

#line 819 "miniparla/runtime.pyx"
  PyObject_GC_UnTrack(o);

#line 819 "miniparla/runtime.pyx"
  Py_CLEAR(p->__pyx_v_self);

#line 819 "miniparla/runtime.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9miniparla_7runtime___pyx_scope_struct__full_name < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name)))) {

#line 819 "miniparla/runtime.pyx"
    __pyx_freelist_9miniparla_7runtime___pyx_scope_struct__full_name[__pyx_freecount_9miniparla_7runtime___pyx_scope_struct__full_name++] = ((struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *)o);

#line 819 "miniparla/runtime.pyx"
  } else {

#line 819 "miniparla/runtime.pyx"
    (*Py_TYPE(o)->tp_free)(o);

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static int __pyx_tp_traverse_9miniparla_7runtime___pyx_scope_struct__full_name(PyObject *o, visitproc v, void *a) {

#line 819 "miniparla/runtime.pyx"
  int e;

#line 819 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *p = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *)o;

#line 819 "miniparla/runtime.pyx"
  if (p->__pyx_v_self) {

#line 819 "miniparla/runtime.pyx"
    e = (*v)(p->__pyx_v_self, a); if (e) return e;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  return 0;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static int __pyx_tp_clear_9miniparla_7runtime___pyx_scope_struct__full_name(PyObject *o) {

#line 819 "miniparla/runtime.pyx"
  PyObject* tmp;

#line 819 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *p = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name *)o;

#line 819 "miniparla/runtime.pyx"
  tmp = ((PyObject*)p->__pyx_v_self);

#line 819 "miniparla/runtime.pyx"
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);

#line 819 "miniparla/runtime.pyx"
  Py_XDECREF(tmp);

#line 819 "miniparla/runtime.pyx"
  return 0;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyTypeObject __pyx_type_9miniparla_7runtime___pyx_scope_struct__full_name = {

#line 819 "miniparla/runtime.pyx"
  PyVarObject_HEAD_INIT(0, 0)

#line 819 "miniparla/runtime.pyx"
  "miniparla.runtime.__pyx_scope_struct__full_name", /*tp_name*/

#line 819 "miniparla/runtime.pyx"
  sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct__full_name), /*tp_basicsize*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_itemsize*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_dealloc_9miniparla_7runtime___pyx_scope_struct__full_name, /*tp_dealloc*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX < 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall_offset*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattr*/

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION < 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_compare*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION >= 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_async*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_repr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_number*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_sequence*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_mapping*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_hash*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_call*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_str*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_buffer*/

#line 819 "miniparla/runtime.pyx"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_doc*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_traverse_9miniparla_7runtime___pyx_scope_struct__full_name, /*tp_traverse*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_clear_9miniparla_7runtime___pyx_scope_struct__full_name, /*tp_clear*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_richcompare*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklistoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iter*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iternext*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_methods*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_members*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_base*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dict*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_get*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_set*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dictoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_init*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_alloc*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_new_9miniparla_7runtime___pyx_scope_struct__full_name, /*tp_new*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_free*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_is_gc*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_bases*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_mro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_cache*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_subclasses*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklist*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_del*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_version_tag*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030400a1

#line 819 "miniparla/runtime.pyx"
  0, /*tp_finalize*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_pypy_flags*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr *__pyx_freelist_9miniparla_7runtime___pyx_scope_struct_1_genexpr[8];

#line 819 "miniparla/runtime.pyx"
static int __pyx_freecount_9miniparla_7runtime___pyx_scope_struct_1_genexpr = 0;

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyObject *__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 819 "miniparla/runtime.pyx"
  PyObject *o;

#line 819 "miniparla/runtime.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr)))) {

#line 819 "miniparla/runtime.pyx"
    o = (PyObject*)__pyx_freelist_9miniparla_7runtime___pyx_scope_struct_1_genexpr[--__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_1_genexpr];

#line 819 "miniparla/runtime.pyx"
    memset(o, 0, sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr));

#line 819 "miniparla/runtime.pyx"
    (void) PyObject_INIT(o, t);

#line 819 "miniparla/runtime.pyx"
    PyObject_GC_Track(o);

#line 819 "miniparla/runtime.pyx"
  } else {

#line 819 "miniparla/runtime.pyx"
    o = (*t->tp_alloc)(t, 0);

#line 819 "miniparla/runtime.pyx"
    if (unlikely(!o)) return 0;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  return o;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static void __pyx_tp_dealloc_9miniparla_7runtime___pyx_scope_struct_1_genexpr(PyObject *o) {

#line 819 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr *)o;

#line 819 "miniparla/runtime.pyx"
  PyObject_GC_UnTrack(o);

#line 819 "miniparla/runtime.pyx"
  Py_CLEAR(p->__pyx_outer_scope);

#line 819 "miniparla/runtime.pyx"
  Py_CLEAR(p->__pyx_v_i);

#line 819 "miniparla/runtime.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr)))) {

#line 819 "miniparla/runtime.pyx"
    __pyx_freelist_9miniparla_7runtime___pyx_scope_struct_1_genexpr[__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr *)o);

#line 819 "miniparla/runtime.pyx"
  } else {

#line 819 "miniparla/runtime.pyx"
    (*Py_TYPE(o)->tp_free)(o);

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static int __pyx_tp_traverse_9miniparla_7runtime___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {

#line 819 "miniparla/runtime.pyx"
  int e;

#line 819 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr *)o;

#line 819 "miniparla/runtime.pyx"
  if (p->__pyx_outer_scope) {

#line 819 "miniparla/runtime.pyx"
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  if (p->__pyx_v_i) {

#line 819 "miniparla/runtime.pyx"
    e = (*v)(p->__pyx_v_i, a); if (e) return e;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  return 0;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyTypeObject __pyx_type_9miniparla_7runtime___pyx_scope_struct_1_genexpr = {

#line 819 "miniparla/runtime.pyx"
  PyVarObject_HEAD_INIT(0, 0)

#line 819 "miniparla/runtime.pyx"
  "miniparla.runtime.__pyx_scope_struct_1_genexpr", /*tp_name*/

#line 819 "miniparla/runtime.pyx"
  sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_1_genexpr), /*tp_basicsize*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_itemsize*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_dealloc_9miniparla_7runtime___pyx_scope_struct_1_genexpr, /*tp_dealloc*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX < 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall_offset*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattr*/

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION < 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_compare*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION >= 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_async*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_repr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_number*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_sequence*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_mapping*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_hash*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_call*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_str*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_buffer*/

#line 819 "miniparla/runtime.pyx"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_doc*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_traverse_9miniparla_7runtime___pyx_scope_struct_1_genexpr, /*tp_traverse*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_clear*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_richcompare*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklistoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iter*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iternext*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_methods*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_members*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_base*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dict*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_get*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_set*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dictoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_init*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_alloc*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_1_genexpr, /*tp_new*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_free*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_is_gc*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_bases*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_mro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_cache*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_subclasses*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklist*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_del*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_version_tag*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030400a1

#line 819 "miniparla/runtime.pyx"
  0, /*tp_finalize*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_pypy_flags*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ *__pyx_freelist_9miniparla_7runtime___pyx_scope_struct_2___await__[8];

#line 819 "miniparla/runtime.pyx"
static int __pyx_freecount_9miniparla_7runtime___pyx_scope_struct_2___await__ = 0;

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyObject *__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_2___await__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 819 "miniparla/runtime.pyx"
  PyObject *o;

#line 819 "miniparla/runtime.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_2___await__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__)))) {

#line 819 "miniparla/runtime.pyx"
    o = (PyObject*)__pyx_freelist_9miniparla_7runtime___pyx_scope_struct_2___await__[--__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_2___await__];

#line 819 "miniparla/runtime.pyx"
    memset(o, 0, sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__));

#line 819 "miniparla/runtime.pyx"
    (void) PyObject_INIT(o, t);

#line 819 "miniparla/runtime.pyx"
    PyObject_GC_Track(o);

#line 819 "miniparla/runtime.pyx"
  } else {

#line 819 "miniparla/runtime.pyx"
    o = (*t->tp_alloc)(t, 0);

#line 819 "miniparla/runtime.pyx"
    if (unlikely(!o)) return 0;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  return o;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static void __pyx_tp_dealloc_9miniparla_7runtime___pyx_scope_struct_2___await__(PyObject *o) {

#line 819 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ *p = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ *)o;

#line 819 "miniparla/runtime.pyx"
  PyObject_GC_UnTrack(o);

#line 819 "miniparla/runtime.pyx"
  Py_CLEAR(p->__pyx_v_self);

#line 819 "miniparla/runtime.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_2___await__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__)))) {

#line 819 "miniparla/runtime.pyx"
    __pyx_freelist_9miniparla_7runtime___pyx_scope_struct_2___await__[__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_2___await__++] = ((struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ *)o);

#line 819 "miniparla/runtime.pyx"
  } else {

#line 819 "miniparla/runtime.pyx"
    (*Py_TYPE(o)->tp_free)(o);

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static int __pyx_tp_traverse_9miniparla_7runtime___pyx_scope_struct_2___await__(PyObject *o, visitproc v, void *a) {

#line 819 "miniparla/runtime.pyx"
  int e;

#line 819 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ *p = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__ *)o;

#line 819 "miniparla/runtime.pyx"
  if (p->__pyx_v_self) {

#line 819 "miniparla/runtime.pyx"
    e = (*v)(p->__pyx_v_self, a); if (e) return e;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  return 0;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyTypeObject __pyx_type_9miniparla_7runtime___pyx_scope_struct_2___await__ = {

#line 819 "miniparla/runtime.pyx"
  PyVarObject_HEAD_INIT(0, 0)

#line 819 "miniparla/runtime.pyx"
  "miniparla.runtime.__pyx_scope_struct_2___await__", /*tp_name*/

#line 819 "miniparla/runtime.pyx"
  sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_2___await__), /*tp_basicsize*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_itemsize*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_dealloc_9miniparla_7runtime___pyx_scope_struct_2___await__, /*tp_dealloc*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX < 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall_offset*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattr*/

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION < 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_compare*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION >= 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_async*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_repr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_number*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_sequence*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_mapping*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_hash*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_call*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_str*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_buffer*/

#line 819 "miniparla/runtime.pyx"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_doc*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_traverse_9miniparla_7runtime___pyx_scope_struct_2___await__, /*tp_traverse*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_clear*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_richcompare*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklistoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iter*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iternext*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_methods*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_members*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_base*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dict*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_get*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_set*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dictoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_init*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_alloc*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_2___await__, /*tp_new*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_free*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_is_gc*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_bases*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_mro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_cache*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_subclasses*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklist*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_del*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_version_tag*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030400a1

#line 819 "miniparla/runtime.pyx"
  0, /*tp_finalize*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_pypy_flags*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ *__pyx_freelist_9miniparla_7runtime___pyx_scope_struct_3___await__[8];

#line 819 "miniparla/runtime.pyx"
static int __pyx_freecount_9miniparla_7runtime___pyx_scope_struct_3___await__ = 0;

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyObject *__pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_3___await__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 819 "miniparla/runtime.pyx"
  PyObject *o;

#line 819 "miniparla/runtime.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_3___await__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__)))) {

#line 819 "miniparla/runtime.pyx"
    o = (PyObject*)__pyx_freelist_9miniparla_7runtime___pyx_scope_struct_3___await__[--__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_3___await__];

#line 819 "miniparla/runtime.pyx"
    memset(o, 0, sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__));

#line 819 "miniparla/runtime.pyx"
    (void) PyObject_INIT(o, t);

#line 819 "miniparla/runtime.pyx"
    PyObject_GC_Track(o);

#line 819 "miniparla/runtime.pyx"
  } else {

#line 819 "miniparla/runtime.pyx"
    o = (*t->tp_alloc)(t, 0);

#line 819 "miniparla/runtime.pyx"
    if (unlikely(!o)) return 0;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  return o;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static void __pyx_tp_dealloc_9miniparla_7runtime___pyx_scope_struct_3___await__(PyObject *o) {

#line 819 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ *p = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ *)o;

#line 819 "miniparla/runtime.pyx"
  PyObject_GC_UnTrack(o);

#line 819 "miniparla/runtime.pyx"
  Py_CLEAR(p->__pyx_v_self);

#line 819 "miniparla/runtime.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_3___await__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__)))) {

#line 819 "miniparla/runtime.pyx"
    __pyx_freelist_9miniparla_7runtime___pyx_scope_struct_3___await__[__pyx_freecount_9miniparla_7runtime___pyx_scope_struct_3___await__++] = ((struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ *)o);

#line 819 "miniparla/runtime.pyx"
  } else {

#line 819 "miniparla/runtime.pyx"
    (*Py_TYPE(o)->tp_free)(o);

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static int __pyx_tp_traverse_9miniparla_7runtime___pyx_scope_struct_3___await__(PyObject *o, visitproc v, void *a) {

#line 819 "miniparla/runtime.pyx"
  int e;

#line 819 "miniparla/runtime.pyx"
  struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ *p = (struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__ *)o;

#line 819 "miniparla/runtime.pyx"
  if (p->__pyx_v_self) {

#line 819 "miniparla/runtime.pyx"
    e = (*v)(p->__pyx_v_self, a); if (e) return e;

#line 819 "miniparla/runtime.pyx"
  }

#line 819 "miniparla/runtime.pyx"
  return 0;

#line 819 "miniparla/runtime.pyx"
}

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyTypeObject __pyx_type_9miniparla_7runtime___pyx_scope_struct_3___await__ = {

#line 819 "miniparla/runtime.pyx"
  PyVarObject_HEAD_INIT(0, 0)

#line 819 "miniparla/runtime.pyx"
  "miniparla.runtime.__pyx_scope_struct_3___await__", /*tp_name*/

#line 819 "miniparla/runtime.pyx"
  sizeof(struct __pyx_obj_9miniparla_7runtime___pyx_scope_struct_3___await__), /*tp_basicsize*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_itemsize*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_dealloc_9miniparla_7runtime___pyx_scope_struct_3___await__, /*tp_dealloc*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX < 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall_offset*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattr*/

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION < 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_compare*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_MAJOR_VERSION >= 3

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_async*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  0, /*tp_repr*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_number*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_sequence*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_mapping*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_hash*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_call*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_str*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_setattro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_as_buffer*/

#line 819 "miniparla/runtime.pyx"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_doc*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_traverse_9miniparla_7runtime___pyx_scope_struct_3___await__, /*tp_traverse*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_clear*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_richcompare*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklistoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iter*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_iternext*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_methods*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_members*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_getset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_base*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dict*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_get*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_descr_set*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_dictoffset*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_init*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_alloc*/

#line 819 "miniparla/runtime.pyx"
  __pyx_tp_new_9miniparla_7runtime___pyx_scope_struct_3___await__, /*tp_new*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_free*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_is_gc*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_bases*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_mro*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_cache*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_subclasses*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_weaklist*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_del*/

#line 819 "miniparla/runtime.pyx"
  0, /*tp_version_tag*/

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030400a1

#line 819 "miniparla/runtime.pyx"
  0, /*tp_finalize*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)

#line 819 "miniparla/runtime.pyx"
  0, /*tp_vectorcall*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_print*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000

#line 819 "miniparla/runtime.pyx"
  0, /*tp_pypy_flags*/

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static PyMethodDef __pyx_methods[] = {

#line 819 "miniparla/runtime.pyx"
  {0, 0, 0, 0}

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
#if PY_MAJOR_VERSION >= 3

#line 819 "miniparla/runtime.pyx"
#if CYTHON_PEP489_MULTI_PHASE_INIT

#line 819 "miniparla/runtime.pyx"
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/

#line 819 "miniparla/runtime.pyx"
static int __pyx_pymod_exec_runtime(PyObject* module); /*proto*/

#line 819 "miniparla/runtime.pyx"
static PyModuleDef_Slot __pyx_moduledef_slots[] = {

#line 819 "miniparla/runtime.pyx"
  {Py_mod_create, (void*)__pyx_pymod_create},

#line 819 "miniparla/runtime.pyx"
  {Py_mod_exec, (void*)__pyx_pymod_exec_runtime},

#line 819 "miniparla/runtime.pyx"
  {0, NULL}

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"
#endif

#line 819 "miniparla/runtime.pyx"


#line 819 "miniparla/runtime.pyx"
static struct PyModuleDef __pyx_moduledef = {

#line 819 "miniparla/runtime.pyx"
    PyModuleDef_HEAD_INIT,

#line 819 "miniparla/runtime.pyx"
    "runtime",

#line 819 "miniparla/runtime.pyx"
    0, /* m_doc */

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_PEP489_MULTI_PHASE_INIT

#line 819 "miniparla/runtime.pyx"
    0, /* m_size */

#line 819 "miniparla/runtime.pyx"
  #else

#line 819 "miniparla/runtime.pyx"
    -1, /* m_size */

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
    __pyx_methods /* m_methods */,

#line 819 "miniparla/runtime.pyx"
  #if CYTHON_PEP489_MULTI_PHASE_INIT

#line 819 "miniparla/runtime.pyx"
    __pyx_moduledef_slots, /* m_slots */

#line 819 "miniparla/runtime.pyx"
  #else

#line 819 "miniparla/runtime.pyx"
    NULL, /* m_reload */

#line 819 "miniparla/runtime.pyx"
  #endif

#line 819 "miniparla/runtime.pyx"
    NULL, /* m_traverse */

#line 819 "miniparla/runtime.pyx"
    NULL, /* m_clear */

#line 819 "miniparla/runtime.pyx"
    NULL /* m_free */

#line 819 "miniparla/runtime.pyx"
};

#line 819 "miniparla/runtime.pyx"
#endif

#line 819 "miniparla/runtime.pyx"
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ABCMeta, __pyx_k_ABCMeta, sizeof(__pyx_k_ABCMeta), 0, 0, 1, 1},
  {&__pyx_n_s_Any, __pyx_k_Any, sizeof(__pyx_k_Any), 0, 0, 1, 1},
  {&__pyx_n_u_AwaitTasks, __pyx_k_AwaitTasks, sizeof(__pyx_k_AwaitTasks), 0, 1, 0, 1},
  {&__pyx_n_s_Awaitable, __pyx_k_Awaitable, sizeof(__pyx_k_Awaitable), 0, 0, 1, 1},
  {&__pyx_n_s_Collection, __pyx_k_Collection, sizeof(__pyx_k_Collection), 0, 0, 1, 1},
  {&__pyx_n_s_Condition, __pyx_k_Condition, sizeof(__pyx_k_Condition), 0, 0, 1, 1},
  {&__pyx_n_s_ControllableThread, __pyx_k_ControllableThread, sizeof(__pyx_k_ControllableThread), 0, 0, 1, 1},
  {&__pyx_n_s_ControllableThread___init, __pyx_k_ControllableThread___init, sizeof(__pyx_k_ControllableThread___init), 0, 0, 1, 1},
  {&__pyx_n_s_ControllableThread_run, __pyx_k_ControllableThread_run, sizeof(__pyx_k_ControllableThread_run), 0, 0, 1, 1},
  {&__pyx_n_s_ControllableThread_stop, __pyx_k_ControllableThread_stop, sizeof(__pyx_k_ControllableThread_stop), 0, 0, 1, 1},
  {&__pyx_kp_u_Created_Inner_Worker, __pyx_k_Created_Inner_Worker, sizeof(__pyx_k_Created_Inner_Worker), 0, 1, 0, 0},
  {&__pyx_n_s_Dict, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {&__pyx_kp_u_Hello_from_python, __pyx_k_Hello_from_python, sizeof(__pyx_k_Hello_from_python), 0, 1, 0, 0},
  {&__pyx_kp_u_How_did_I_get_here, __pyx_k_How_did_I_get_here, sizeof(__pyx_k_How_did_I_get_here), 0, 1, 0, 0},
  {&__pyx_n_s_Iterable, __pyx_k_Iterable, sizeof(__pyx_k_Iterable), 0, 0, 1, 1},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_n_s_Lock, __pyx_k_Lock, sizeof(__pyx_k_Lock), 0, 0, 1, 1},
  {&__pyx_kp_u_No_scheduler_context, __pyx_k_No_scheduler_context, sizeof(__pyx_k_No_scheduler_context), 0, 1, 0, 0},
  {&__pyx_kp_u_Parla_coroutine_tasks_must_yield, __pyx_k_Parla_coroutine_tasks_must_yield, sizeof(__pyx_k_Parla_coroutine_tasks_must_yield), 0, 1, 0, 0},
  {&__pyx_n_s_PyInnerScheduler, __pyx_k_PyInnerScheduler, sizeof(__pyx_k_PyInnerScheduler), 0, 0, 1, 1},
  {&__pyx_n_s_PyInnerTask, __pyx_k_PyInnerTask, sizeof(__pyx_k_PyInnerTask), 0, 0, 1, 1},
  {&__pyx_n_s_PyInnerWorker, __pyx_k_PyInnerWorker, sizeof(__pyx_k_PyInnerWorker), 0, 0, 1, 1},
  {&__pyx_n_s_Resources, __pyx_k_Resources, sizeof(__pyx_k_Resources), 0, 0, 1, 1},
  {&__pyx_n_s_Resources___init, __pyx_k_Resources___init, sizeof(__pyx_k_Resources___init), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler, __pyx_k_Scheduler, sizeof(__pyx_k_Scheduler), 0, 0, 1, 1},
  {&__pyx_n_s_SchedulerContext, __pyx_k_SchedulerContext, sizeof(__pyx_k_SchedulerContext), 0, 0, 1, 1},
  {&__pyx_n_s_SchedulerContext___enter, __pyx_k_SchedulerContext___enter, sizeof(__pyx_k_SchedulerContext___enter), 0, 0, 1, 1},
  {&__pyx_n_s_SchedulerContext___exit, __pyx_k_SchedulerContext___exit, sizeof(__pyx_k_SchedulerContext___exit), 0, 0, 1, 1},
  {&__pyx_n_s_SchedulerContext_spawn_task, __pyx_k_SchedulerContext_spawn_task, sizeof(__pyx_k_SchedulerContext_spawn_task), 0, 0, 1, 1},
  {&__pyx_n_s_SchedulerLocals, __pyx_k_SchedulerLocals, sizeof(__pyx_k_SchedulerLocals), 0, 0, 1, 1},
  {&__pyx_n_s_SchedulerLocals___init, __pyx_k_SchedulerLocals___init, sizeof(__pyx_k_SchedulerLocals___init), 0, 0, 1, 1},
  {&__pyx_n_s_SchedulerLocals_scheduler_conte, __pyx_k_SchedulerLocals_scheduler_conte, sizeof(__pyx_k_SchedulerLocals_scheduler_conte), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler___enter, __pyx_k_Scheduler___enter, sizeof(__pyx_k_Scheduler___enter), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler___exit, __pyx_k_Scheduler___exit, sizeof(__pyx_k_Scheduler___exit), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler___init, __pyx_k_Scheduler___init, sizeof(__pyx_k_Scheduler___init), 0, 0, 1, 1},
  {&__pyx_kp_u_Scheduler_context_can_only_be_en, __pyx_k_Scheduler_context_can_only_be_en, sizeof(__pyx_k_Scheduler_context_can_only_be_en), 0, 1, 0, 0},
  {&__pyx_n_s_Scheduler_cpp_callback, __pyx_k_Scheduler_cpp_callback, sizeof(__pyx_k_Scheduler_cpp_callback), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_current_resources, __pyx_k_Scheduler_current_resources, sizeof(__pyx_k_Scheduler_current_resources), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_decr_active_task, __pyx_k_Scheduler_decr_active_task, sizeof(__pyx_k_Scheduler_decr_active_task), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_decr_free_threads, __pyx_k_Scheduler_decr_free_threads, sizeof(__pyx_k_Scheduler_decr_free_threads), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_decr_resources, __pyx_k_Scheduler_decr_resources, sizeof(__pyx_k_Scheduler_decr_resources), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_decr_running_tasks, __pyx_k_Scheduler_decr_running_tasks, sizeof(__pyx_k_Scheduler_decr_running_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_enqueue_task, __pyx_k_Scheduler_enqueue_task, sizeof(__pyx_k_Scheduler_enqueue_task), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_enqueue_task_unsafe, __pyx_k_Scheduler_enqueue_task_unsafe, sizeof(__pyx_k_Scheduler_enqueue_task_unsafe), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_enqueue_worker, __pyx_k_Scheduler_enqueue_worker, sizeof(__pyx_k_Scheduler_enqueue_worker), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_get_active_tasks, __pyx_k_Scheduler_get_active_tasks, sizeof(__pyx_k_Scheduler_get_active_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_get_free_threads, __pyx_k_Scheduler_get_free_threads, sizeof(__pyx_k_Scheduler_get_free_threads), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_get_running_tasks, __pyx_k_Scheduler_get_running_tasks, sizeof(__pyx_k_Scheduler_get_running_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_incr_active_tasks, __pyx_k_Scheduler_incr_active_tasks, sizeof(__pyx_k_Scheduler_incr_active_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_incr_free_threads, __pyx_k_Scheduler_incr_free_threads, sizeof(__pyx_k_Scheduler_incr_free_threads), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_incr_resources, __pyx_k_Scheduler_incr_resources, sizeof(__pyx_k_Scheduler_incr_resources), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_incr_running_tasks, __pyx_k_Scheduler_incr_running_tasks, sizeof(__pyx_k_Scheduler_incr_running_tasks), 0, 0, 1, 1},
  {&__pyx_kp_u_Scheduler_ready, __pyx_k_Scheduler_ready, sizeof(__pyx_k_Scheduler_ready), 0, 1, 0, 0},
  {&__pyx_n_s_Scheduler_run, __pyx_k_Scheduler_run, sizeof(__pyx_k_Scheduler_run), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_run_scheduler, __pyx_k_Scheduler_run_scheduler, sizeof(__pyx_k_Scheduler_run_scheduler), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_scheduler, __pyx_k_Scheduler_scheduler, sizeof(__pyx_k_Scheduler_scheduler), 0, 0, 1, 1},
  {&__pyx_n_s_Scheduler_stop, __pyx_k_Scheduler_stop, sizeof(__pyx_k_Scheduler_stop), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_Task, __pyx_k_Task, sizeof(__pyx_k_Task), 0, 0, 1, 1},
  {&__pyx_n_s_TaskAwaitTasks, __pyx_k_TaskAwaitTasks, sizeof(__pyx_k_TaskAwaitTasks), 0, 0, 1, 1},
  {&__pyx_n_s_TaskCompleted, __pyx_k_TaskCompleted, sizeof(__pyx_k_TaskCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_TaskDict, __pyx_k_TaskDict, sizeof(__pyx_k_TaskDict), 0, 0, 1, 1},
  {&__pyx_n_s_TaskDict___init, __pyx_k_TaskDict___init, sizeof(__pyx_k_TaskDict___init), 0, 0, 1, 1},
  {&__pyx_n_s_TaskDict__dict, __pyx_k_TaskDict__dict, sizeof(__pyx_k_TaskDict__dict), 0, 0, 1, 1},
  {&__pyx_n_s_TaskDict__mutex, __pyx_k_TaskDict__mutex, sizeof(__pyx_k_TaskDict__mutex), 0, 0, 1, 1},
  {&__pyx_n_s_TaskDict_add, __pyx_k_TaskDict_add, sizeof(__pyx_k_TaskDict_add), 0, 0, 1, 1},
  {&__pyx_n_s_TaskDict_get, __pyx_k_TaskDict_get, sizeof(__pyx_k_TaskDict_get), 0, 0, 1, 1},
  {&__pyx_n_s_TaskDict_remove, __pyx_k_TaskDict_remove, sizeof(__pyx_k_TaskDict_remove), 0, 0, 1, 1},
  {&__pyx_n_s_TaskException, __pyx_k_TaskException, sizeof(__pyx_k_TaskException), 0, 0, 1, 1},
  {&__pyx_n_s_TaskID, __pyx_k_TaskID, sizeof(__pyx_k_TaskID), 0, 0, 1, 1},
  {&__pyx_n_s_TaskID___await, __pyx_k_TaskID___await, sizeof(__pyx_k_TaskID___await), 0, 0, 1, 1},
  {&__pyx_n_s_TaskID___hash, __pyx_k_TaskID___hash, sizeof(__pyx_k_TaskID___hash), 0, 0, 1, 1},
  {&__pyx_n_s_TaskID___init, __pyx_k_TaskID___init, sizeof(__pyx_k_TaskID___init), 0, 0, 1, 1},
  {&__pyx_n_s_TaskID_dependencies, __pyx_k_TaskID_dependencies, sizeof(__pyx_k_TaskID_dependencies), 0, 0, 1, 1},
  {&__pyx_n_s_TaskID_full_name, __pyx_k_TaskID_full_name, sizeof(__pyx_k_TaskID_full_name), 0, 0, 1, 1},
  {&__pyx_n_s_TaskID_full_name_locals_genexpr, __pyx_k_TaskID_full_name_locals_genexpr, sizeof(__pyx_k_TaskID_full_name_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_TaskID_id, __pyx_k_TaskID_id, sizeof(__pyx_k_TaskID_id), 0, 0, 1, 1},
  {&__pyx_n_s_TaskID_inner_task, __pyx_k_TaskID_inner_task, sizeof(__pyx_k_TaskID_inner_task), 0, 0, 1, 1},
  {&__pyx_n_s_TaskID_name, __pyx_k_TaskID_name, sizeof(__pyx_k_TaskID_name), 0, 0, 1, 1},
  {&__pyx_n_s_TaskID_task, __pyx_k_TaskID_task, sizeof(__pyx_k_TaskID_task), 0, 0, 1, 1},
  {&__pyx_n_s_TaskLocals, __pyx_k_TaskLocals, sizeof(__pyx_k_TaskLocals), 0, 0, 1, 1},
  {&__pyx_n_s_TaskLocals___init, __pyx_k_TaskLocals___init, sizeof(__pyx_k_TaskLocals___init), 0, 0, 1, 1},
  {&__pyx_n_s_TaskLocals_ctx, __pyx_k_TaskLocals_ctx, sizeof(__pyx_k_TaskLocals_ctx), 0, 0, 1, 1},
  {&__pyx_n_s_TaskLocals_global_tasks, __pyx_k_TaskLocals_global_tasks, sizeof(__pyx_k_TaskLocals_global_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_TaskRunning, __pyx_k_TaskRunning, sizeof(__pyx_k_TaskRunning), 0, 0, 1, 1},
  {&__pyx_n_s_TaskState, __pyx_k_TaskState, sizeof(__pyx_k_TaskState), 0, 0, 1, 1},
  {&__pyx_kp_u_Task_Queueing_Cont, __pyx_k_Task_Queueing_Cont, sizeof(__pyx_k_Task_Queueing_Cont), 0, 1, 0, 0},
  {&__pyx_kp_u_Task_Spawning_Continuation, __pyx_k_Task_Spawning_Continuation, sizeof(__pyx_k_Task_Spawning_Continuation), 0, 1, 0, 0},
  {&__pyx_n_s_Task___await, __pyx_k_Task___await, sizeof(__pyx_k_Task___await), 0, 0, 1, 1},
  {&__pyx_n_s_Task___init, __pyx_k_Task___init, sizeof(__pyx_k_Task___init), 0, 0, 1, 1},
  {&__pyx_n_s_Task__add_dependency, __pyx_k_Task__add_dependency, sizeof(__pyx_k_Task__add_dependency), 0, 0, 1, 1},
  {&__pyx_n_s_Task__cleanup, __pyx_k_Task__cleanup, sizeof(__pyx_k_Task__cleanup), 0, 0, 1, 1},
  {&__pyx_n_s_Task__execute_task, __pyx_k_Task__execute_task, sizeof(__pyx_k_Task__execute_task), 0, 0, 1, 1},
  {&__pyx_n_s_Task__finish, __pyx_k_Task__finish, sizeof(__pyx_k_Task__finish), 0, 0, 1, 1},
  {&__pyx_n_s_Task__notify_dependents, __pyx_k_Task__notify_dependents, sizeof(__pyx_k_Task__notify_dependents), 0, 0, 1, 1},
  {&__pyx_n_s_Task__set_state, __pyx_k_Task__set_state, sizeof(__pyx_k_Task__set_state), 0, 0, 1, 1},
  {&__pyx_n_s_Task_blocked, __pyx_k_Task_blocked, sizeof(__pyx_k_Task_blocked), 0, 0, 1, 1},
  {&__pyx_n_s_Task_blocked_unsafe, __pyx_k_Task_blocked_unsafe, sizeof(__pyx_k_Task_blocked_unsafe), 0, 0, 1, 1},
  {&__pyx_n_s_Task_req, __pyx_k_Task_req, sizeof(__pyx_k_Task_req), 0, 0, 1, 1},
  {&__pyx_n_s_Task_run, __pyx_k_Task_run, sizeof(__pyx_k_Task_run), 0, 0, 1, 1},
  {&__pyx_n_s_Task_set_dependencies, __pyx_k_Task_set_dependencies, sizeof(__pyx_k_Task_set_dependencies), 0, 0, 1, 1},
  {&__pyx_n_s_Task_task, __pyx_k_Task_task, sizeof(__pyx_k_Task_task), 0, 0, 1, 1},
  {&__pyx_n_s_Thread, __pyx_k_Thread, sizeof(__pyx_k_Thread), 0, 0, 1, 1},
  {&__pyx_n_s_Tuple, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_Union, __pyx_k_Union, sizeof(__pyx_k_Union), 0, 0, 1, 1},
  {&__pyx_kp_u_Unknown_Error, __pyx_k_Unknown_Error, sizeof(__pyx_k_Unknown_Error), 0, 1, 0, 0},
  {&__pyx_n_s_WorkerThread, __pyx_k_WorkerThread, sizeof(__pyx_k_WorkerThread), 0, 0, 1, 1},
  {&__pyx_n_s_WorkerThreadException, __pyx_k_WorkerThreadException, sizeof(__pyx_k_WorkerThreadException), 0, 0, 1, 1},
  {&__pyx_n_s_WorkerThread___init, __pyx_k_WorkerThread___init, sizeof(__pyx_k_WorkerThread___init), 0, 0, 1, 1},
  {&__pyx_n_s_WorkerThread__remove_task, __pyx_k_WorkerThread__remove_task, sizeof(__pyx_k_WorkerThread__remove_task), 0, 0, 1, 1},
  {&__pyx_n_s_WorkerThread_assign_task, __pyx_k_WorkerThread_assign_task, sizeof(__pyx_k_WorkerThread_assign_task), 0, 0, 1, 1},
  {&__pyx_n_s_WorkerThread_run, __pyx_k_WorkerThread_run, sizeof(__pyx_k_WorkerThread_run), 0, 0, 1, 1},
  {&__pyx_n_s_WorkerThread_scheduler, __pyx_k_WorkerThread_scheduler, sizeof(__pyx_k_WorkerThread_scheduler), 0, 0, 1, 1},
  {&__pyx_n_s_WorkerThread_stop, __pyx_k_WorkerThread_stop, sizeof(__pyx_k_WorkerThread_stop), 0, 0, 1, 1},
  {&__pyx_kp_u_Worker_already_has_a_task, __pyx_k_Worker_already_has_a_task, sizeof(__pyx_k_Worker_already_has_a_task), 0, 1, 0, 0},
  {&__pyx_kp_u_Worker_does_not_have_a_task, __pyx_k_Worker_does_not_have_a_task, sizeof(__pyx_k_Worker_does_not_have_a_task), 0, 1, 0, 0},
  {&__pyx_n_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 1},
  {&__pyx_n_s_abc, __pyx_k_abc, sizeof(__pyx_k_abc), 0, 0, 1, 1},
  {&__pyx_n_s_abstractmethod, __pyx_k_abstractmethod, sizeof(__pyx_k_abstractmethod), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_add_dependency, __pyx_k_add_dependency, sizeof(__pyx_k_add_dependency), 0, 0, 1, 1},
  {&__pyx_n_s_add_dependency_2, __pyx_k_add_dependency_2, sizeof(__pyx_k_add_dependency_2), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_args_2, __pyx_k_args_2, sizeof(__pyx_k_args_2), 0, 0, 1, 1},
  {&__pyx_n_s_assign_task, __pyx_k_assign_task, sizeof(__pyx_k_assign_task), 0, 0, 1, 1},
  {&__pyx_n_s_await, __pyx_k_await, sizeof(__pyx_k_await), 0, 0, 1, 1},
  {&__pyx_n_s_blocked, __pyx_k_blocked, sizeof(__pyx_k_blocked), 0, 0, 1, 1},
  {&__pyx_n_s_blocked_unsafe, __pyx_k_blocked_unsafe, sizeof(__pyx_k_blocked_unsafe), 0, 0, 1, 1},
  {&__pyx_n_s_body, __pyx_k_body, sizeof(__pyx_k_body), 0, 0, 1, 1},
  {&__pyx_n_s_cleanup, __pyx_k_cleanup, sizeof(__pyx_k_cleanup), 0, 0, 1, 1},
  {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_context, __pyx_k_context, sizeof(__pyx_k_context), 0, 0, 1, 1},
  {&__pyx_n_s_contextlib, __pyx_k_contextlib, sizeof(__pyx_k_contextlib), 0, 0, 1, 1},
  {&__pyx_n_s_contextmanager, __pyx_k_contextmanager, sizeof(__pyx_k_contextmanager), 0, 0, 1, 1},
  {&__pyx_n_s_cpp_callback, __pyx_k_cpp_callback, sizeof(__pyx_k_cpp_callback), 0, 0, 1, 1},
  {&__pyx_n_s_ctx, __pyx_k_ctx, sizeof(__pyx_k_ctx), 0, 0, 1, 1},
  {&__pyx_n_s_ctx_2, __pyx_k_ctx_2, sizeof(__pyx_k_ctx_2), 0, 0, 1, 1},
  {&__pyx_n_u_ctx_2, __pyx_k_ctx_2, sizeof(__pyx_k_ctx_2), 0, 1, 0, 1},
  {&__pyx_n_s_current_resources, __pyx_k_current_resources, sizeof(__pyx_k_current_resources), 0, 0, 1, 1},
  {&__pyx_n_s_decr_active_task, __pyx_k_decr_active_task, sizeof(__pyx_k_decr_active_task), 0, 0, 1, 1},
  {&__pyx_n_s_decr_active_tasks, __pyx_k_decr_active_tasks, sizeof(__pyx_k_decr_active_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_decr_free_threads, __pyx_k_decr_free_threads, sizeof(__pyx_k_decr_free_threads), 0, 0, 1, 1},
  {&__pyx_n_s_decr_resources, __pyx_k_decr_resources, sizeof(__pyx_k_decr_resources), 0, 0, 1, 1},
  {&__pyx_n_s_decr_running_tasks, __pyx_k_decr_running_tasks, sizeof(__pyx_k_decr_running_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_defaultdict, __pyx_k_defaultdict, sizeof(__pyx_k_defaultdict), 0, 0, 1, 1},
  {&__pyx_n_s_dependencies, __pyx_k_dependencies, sizeof(__pyx_k_dependencies), 0, 0, 1, 1},
  {&__pyx_n_s_dependencies_2, __pyx_k_dependencies_2, sizeof(__pyx_k_dependencies_2), 0, 0, 1, 1},
  {&__pyx_n_u_dependencies_2, __pyx_k_dependencies_2, sizeof(__pyx_k_dependencies_2), 0, 1, 0, 1},
  {&__pyx_n_s_deque, __pyx_k_deque, sizeof(__pyx_k_deque), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_done, __pyx_k_done, sizeof(__pyx_k_done), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_enqueue_task, __pyx_k_enqueue_task, sizeof(__pyx_k_enqueue_task), 0, 0, 1, 1},
  {&__pyx_n_s_enqueue_task_unsafe, __pyx_k_enqueue_task_unsafe, sizeof(__pyx_k_enqueue_task_unsafe), 0, 0, 1, 1},
  {&__pyx_n_s_enqueue_worker, __pyx_k_enqueue_worker, sizeof(__pyx_k_enqueue_worker), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_exc, __pyx_k_exc, sizeof(__pyx_k_exc), 0, 0, 1, 1},
  {&__pyx_n_s_exc_tb, __pyx_k_exc_tb, sizeof(__pyx_k_exc_tb), 0, 0, 1, 1},
  {&__pyx_n_s_exc_type, __pyx_k_exc_type, sizeof(__pyx_k_exc_type), 0, 0, 1, 1},
  {&__pyx_n_s_exc_val, __pyx_k_exc_val, sizeof(__pyx_k_exc_val), 0, 0, 1, 1},
  {&__pyx_n_s_exceptions, __pyx_k_exceptions, sizeof(__pyx_k_exceptions), 0, 0, 1, 1},
  {&__pyx_n_s_execute_task, __pyx_k_execute_task, sizeof(__pyx_k_execute_task), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_finish, __pyx_k_finish, sizeof(__pyx_k_finish), 0, 0, 1, 1},
  {&__pyx_n_s_flush, __pyx_k_flush, sizeof(__pyx_k_flush), 0, 0, 1, 1},
  {&__pyx_n_s_full_name, __pyx_k_full_name, sizeof(__pyx_k_full_name), 0, 0, 1, 1},
  {&__pyx_n_s_func, __pyx_k_func, sizeof(__pyx_k_func), 0, 0, 1, 1},
  {&__pyx_n_s_func_2, __pyx_k_func_2, sizeof(__pyx_k_func_2), 0, 0, 1, 1},
  {&__pyx_n_s_function, __pyx_k_function, sizeof(__pyx_k_function), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_active_tasks, __pyx_k_get_active_tasks, sizeof(__pyx_k_get_active_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_get_free_threads, __pyx_k_get_free_threads, sizeof(__pyx_k_get_free_threads), 0, 0, 1, 1},
  {&__pyx_n_s_get_num_deps, __pyx_k_get_num_deps, sizeof(__pyx_k_get_num_deps), 0, 0, 1, 1},
  {&__pyx_n_s_get_resources, __pyx_k_get_resources, sizeof(__pyx_k_get_resources), 0, 0, 1, 1},
  {&__pyx_n_s_get_running_tasks, __pyx_k_get_running_tasks, sizeof(__pyx_k_get_running_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_get_scheduler_context, __pyx_k_get_scheduler_context, sizeof(__pyx_k_get_scheduler_context), 0, 0, 1, 1},
  {&__pyx_n_s_get_status, __pyx_k_get_status, sizeof(__pyx_k_get_status), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_global_tasks, __pyx_k_global_tasks, sizeof(__pyx_k_global_tasks), 0, 0, 1, 1},
  {&__pyx_n_u_global_tasks, __pyx_k_global_tasks, sizeof(__pyx_k_global_tasks), 0, 1, 0, 1},
  {&__pyx_n_s_global_tasks_2, __pyx_k_global_tasks_2, sizeof(__pyx_k_global_tasks_2), 0, 0, 1, 1},
  {&__pyx_n_s_hash, __pyx_k_hash, sizeof(__pyx_k_hash), 0, 0, 1, 1},
  {&__pyx_n_s_hello, __pyx_k_hello, sizeof(__pyx_k_hello), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_id_2, __pyx_k_id_2, sizeof(__pyx_k_id_2), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_value, __pyx_k_in_value, sizeof(__pyx_k_in_value), 0, 0, 1, 1},
  {&__pyx_n_s_in_value_task, __pyx_k_in_value_task, sizeof(__pyx_k_in_value_task), 0, 0, 1, 1},
  {&__pyx_n_s_incr_active_tasks, __pyx_k_incr_active_tasks, sizeof(__pyx_k_incr_active_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_incr_free_threads, __pyx_k_incr_free_threads, sizeof(__pyx_k_incr_free_threads), 0, 0, 1, 1},
  {&__pyx_n_s_incr_resources, __pyx_k_incr_resources, sizeof(__pyx_k_incr_resources), 0, 0, 1, 1},
  {&__pyx_n_s_incr_running_tasks, __pyx_k_incr_running_tasks, sizeof(__pyx_k_incr_running_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_inner_scheduler, __pyx_k_inner_scheduler, sizeof(__pyx_k_inner_scheduler), 0, 0, 1, 1},
  {&__pyx_n_s_inner_task, __pyx_k_inner_task, sizeof(__pyx_k_inner_task), 0, 0, 1, 1},
  {&__pyx_n_s_inspect, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
  {&__pyx_n_s_is_terminal, __pyx_k_is_terminal, sizeof(__pyx_k_is_terminal), 0, 0, 1, 1},
  {&__pyx_n_s_iscoroutine, __pyx_k_iscoroutine, sizeof(__pyx_k_iscoroutine), 0, 0, 1, 1},
  {&__pyx_n_s_iscoroutinefunction, __pyx_k_iscoroutinefunction, sizeof(__pyx_k_iscoroutinefunction), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_launching_phase_monitor, __pyx_k_launching_phase_monitor, sizeof(__pyx_k_launching_phase_monitor), 0, 0, 1, 1},
  {&__pyx_n_s_local, __pyx_k_local, sizeof(__pyx_k_local), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_resources, __pyx_k_max_resources, sizeof(__pyx_k_max_resources), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_miniparla_runtime, __pyx_k_miniparla_runtime, sizeof(__pyx_k_miniparla_runtime), 0, 0, 1, 1},
  {&__pyx_kp_s_miniparla_runtime_pyx, __pyx_k_miniparla_runtime_pyx, sizeof(__pyx_k_miniparla_runtime_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_miniparla_task_states, __pyx_k_miniparla_task_states, sizeof(__pyx_k_miniparla_task_states), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_monitor, __pyx_k_monitor, sizeof(__pyx_k_monitor), 0, 0, 1, 1},
  {&__pyx_n_s_mutex, __pyx_k_mutex, sizeof(__pyx_k_mutex), 0, 0, 1, 1},
  {&__pyx_n_s_n_threads, __pyx_k_n_threads, sizeof(__pyx_k_n_threads), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_name_3, __pyx_k_name_3, sizeof(__pyx_k_name_3), 0, 0, 1, 1},
  {&__pyx_n_s_namedtuple, __pyx_k_namedtuple, sizeof(__pyx_k_namedtuple), 0, 0, 1, 1},
  {&__pyx_n_s_new_state, __pyx_k_new_state, sizeof(__pyx_k_new_state), 0, 0, 1, 1},
  {&__pyx_n_s_new_task_info, __pyx_k_new_task_info, sizeof(__pyx_k_new_task_info), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_notify, __pyx_k_notify, sizeof(__pyx_k_notify), 0, 0, 1, 1},
  {&__pyx_n_s_notify_all, __pyx_k_notify_all, sizeof(__pyx_k_notify_all), 0, 0, 1, 1},
  {&__pyx_n_s_notify_dependents, __pyx_k_notify_dependents, sizeof(__pyx_k_notify_dependents), 0, 0, 1, 1},
  {&__pyx_n_s_notify_dependents_2, __pyx_k_notify_dependents_2, sizeof(__pyx_k_notify_dependents_2), 0, 0, 1, 1},
  {&__pyx_n_s_num_threads, __pyx_k_num_threads, sizeof(__pyx_k_num_threads), 0, 0, 1, 1},
  {&__pyx_n_s_period, __pyx_k_period, sizeof(__pyx_k_period), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_python_task, __pyx_k_python_task, sizeof(__pyx_k_python_task), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_remove_task, __pyx_k_remove_task, sizeof(__pyx_k_remove_task), 0, 0, 1, 1},
  {&__pyx_n_s_req, __pyx_k_req, sizeof(__pyx_k_req), 0, 0, 1, 1},
  {&__pyx_n_s_req_2, __pyx_k_req_2, sizeof(__pyx_k_req_2), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
  {&__pyx_n_s_run_scheduler, __pyx_k_run_scheduler, sizeof(__pyx_k_run_scheduler), 0, 0, 1, 1},
  {&__pyx_n_s_scheduler, __pyx_k_scheduler, sizeof(__pyx_k_scheduler), 0, 0, 1, 1},
  {&__pyx_n_s_scheduler_2, __pyx_k_scheduler_2, sizeof(__pyx_k_scheduler_2), 0, 0, 1, 1},
  {&__pyx_n_s_scheduler_context, __pyx_k_scheduler_context, sizeof(__pyx_k_scheduler_context), 0, 0, 1, 1},
  {&__pyx_n_s_scheduler_context_stack, __pyx_k_scheduler_context_stack, sizeof(__pyx_k_scheduler_context_stack), 0, 0, 1, 1},
  {&__pyx_n_s_scheduler_locals, __pyx_k_scheduler_locals, sizeof(__pyx_k_scheduler_locals), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set_callback, __pyx_k_set_callback, sizeof(__pyx_k_set_callback), 0, 0, 1, 1},
  {&__pyx_n_s_set_dependencies, __pyx_k_set_dependencies, sizeof(__pyx_k_set_dependencies), 0, 0, 1, 1},
  {&__pyx_n_s_set_state, __pyx_k_set_state, sizeof(__pyx_k_set_state), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_setter, __pyx_k_setter, sizeof(__pyx_k_setter), 0, 0, 1, 1},
  {&__pyx_n_s_should_run, __pyx_k_should_run, sizeof(__pyx_k_should_run), 0, 0, 1, 1},
  {&__pyx_n_s_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
  {&__pyx_n_s_spawn_task, __pyx_k_spawn_task, sizeof(__pyx_k_spawn_task), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_success, __pyx_k_success, sizeof(__pyx_k_success), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_task, __pyx_k_task, sizeof(__pyx_k_task), 0, 0, 1, 1},
  {&__pyx_n_s_task_2, __pyx_k_task_2, sizeof(__pyx_k_task_2), 0, 0, 1, 1},
  {&__pyx_n_s_task_callback, __pyx_k_task_callback, sizeof(__pyx_k_task_callback), 0, 0, 1, 1},
  {&__pyx_n_s_task_inner, __pyx_k_task_inner, sizeof(__pyx_k_task_inner), 0, 0, 1, 1},
  {&__pyx_n_s_task_locals, __pyx_k_task_locals, sizeof(__pyx_k_task_locals), 0, 0, 1, 1},
  {&__pyx_n_s_task_scopes, __pyx_k_task_scopes, sizeof(__pyx_k_task_scopes), 0, 0, 1, 1},
  {&__pyx_n_s_task_state, __pyx_k_task_state, sizeof(__pyx_k_task_state), 0, 0, 1, 1},
  {&__pyx_n_s_taskid, __pyx_k_taskid, sizeof(__pyx_k_taskid), 0, 0, 1, 1},
  {&__pyx_n_s_taskid_2, __pyx_k_taskid_2, sizeof(__pyx_k_taskid_2), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_threading, __pyx_k_threading, sizeof(__pyx_k_threading), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_value_task, __pyx_k_value_task, sizeof(__pyx_k_value_task), 0, 0, 1, 1},
  {&__pyx_n_u_value_task, __pyx_k_value_task, sizeof(__pyx_k_value_task), 0, 1, 0, 1},
  {&__pyx_n_s_vcus, __pyx_k_vcus, sizeof(__pyx_k_vcus), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_wait, __pyx_k_wait, sizeof(__pyx_k_wait), 0, 0, 1, 1},
  {&__pyx_n_s_worker, __pyx_k_worker, sizeof(__pyx_k_worker), 0, 0, 1, 1},
  {&__pyx_n_s_worker_threads, __pyx_k_worker_threads, sizeof(__pyx_k_worker_threads), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) __PYX_ERR(0, 147, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(0, 255, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 699, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 845, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "miniparla/runtime.pyx":110
 * 
 * def hello(task):
 *     print("Hello from python", flush=True)             # <<<<<<<<<<<<<<
 *     print(task.id)
 * 
 */

#line 110 "miniparla/runtime.pyx"
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Hello_from_python); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 110, __pyx_L1_error)

#line 110 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple_);

#line 110 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__4);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__5);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "miniparla/runtime.pyx":254
 *         self._mutex = threading.Lock()
 * 
 *         with self._mutex:             # <<<<<<<<<<<<<<
 *             self.id = id(self)
 *             self._func = func
 */

#line 254 "miniparla/runtime.pyx"
  __pyx_tuple__6 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 254, __pyx_L1_error)

#line 254 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__6);

#line 254 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "miniparla/runtime.pyx":300
 *         try:
 *             with self._mutex:
 *                 task_state = TaskException(RuntimeError("Unknown Error"))             # <<<<<<<<<<<<<<
 * 
 *                 try:
 */

#line 300 "miniparla/runtime.pyx"
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Unknown_Error); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 300, __pyx_L1_error)

#line 300 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__7);

#line 300 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "miniparla/runtime.pyx":347
 * 
 *             if not self.blocked_unsafe():
 *                 print("Task Queueing Cont.", flush=True)             # <<<<<<<<<<<<<<
 *                 ctx.scheduler.enqueue_task(self)
 *             new_state.dependencies.clear()
 */

#line 347 "miniparla/runtime.pyx"
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Task_Queueing_Cont); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 347, __pyx_L1_error)

#line 347 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__8);

#line 347 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "miniparla/runtime.pyx":428
 *             return self._scheduler_context_stack[-1]
 *         else:
 *             raise Exception("No scheduler context")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 428 "miniparla/runtime.pyx"
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_No_scheduler_context); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 428, __pyx_L1_error)

#line 428 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__10);

#line 428 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "miniparla/runtime.pyx":455
 *     def __cinit__(self, worker):
 *         self.inner_worker = new InnerWorker(<void*> worker)
 *         print("Created Inner Worker", flush=True)             # <<<<<<<<<<<<<<
 * 
 * class WorkerThread(ControllableThread, SchedulerContext):
 */

#line 455 "miniparla/runtime.pyx"
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_Created_Inner_Worker); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 455, __pyx_L1_error)

#line 455 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__11);

#line 455 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__12);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__13);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "miniparla/runtime.pyx":475
 *             #print("Inisde monitor", flush=True)
 *             if self.task:
 *                 raise Exception("Worker already has a task")             # <<<<<<<<<<<<<<
 *             #print("Assigning task %s to worker %s" % (task.id, self.index), flush=True)
 *             self.task = task
 */

#line 475 "miniparla/runtime.pyx"
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_Worker_already_has_a_task); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 475, __pyx_L1_error)

#line 475 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__14);

#line 475 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "miniparla/runtime.pyx":484
 *         with self._monitor:
 *             if not self.task:
 *                 raise Exception("Worker does not have a task")             # <<<<<<<<<<<<<<
 *             self.scheduler.decr_running_tasks()
 *             self.scheduler.incr_resources(self.task.req.vcus)
 */

#line 484 "miniparla/runtime.pyx"
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_Worker_does_not_have_a_task); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 484, __pyx_L1_error)

#line 484 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__15);

#line 484 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__16);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__17);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "miniparla/runtime.pyx":713
 *             time.sleep(0.0001)
 * 
 *         print("Scheduler ready", flush=True)             # <<<<<<<<<<<<<<
 *         self.start()
 * 
 */

#line 713 "miniparla/runtime.pyx"
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Scheduler_ready); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 713, __pyx_L1_error)

#line 713 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__18);

#line 713 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "miniparla/runtime.pyx":723
 *     def __enter__(self):
 *         if self.get_active_tasks() != 1:
 *             raise Exception("Scheduler context can only be entered once")             # <<<<<<<<<<<<<<
 *         return super().__enter__()
 * 
 */

#line 723 "miniparla/runtime.pyx"
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_Scheduler_context_can_only_be_en); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 723, __pyx_L1_error)

#line 723 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__19);

#line 723 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "miniparla/runtime.pyx":837
 *                 task.value_task = None
 *                 if not isinstance(new_task_info, TaskAwaitTasks):
 *                     raise TypeError(             # <<<<<<<<<<<<<<
 *                         "Parla coroutine tasks must yield a TaskAwaitTasks")
 *                 dependencies = new_task_info.dependencies
 */

#line 837 "miniparla/runtime.pyx"
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_Parla_coroutine_tasks_must_yield); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 837, __pyx_L1_error)

#line 837 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__20);

#line 837 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "miniparla/runtime.pyx":109
 * 
 * 
 * def hello(task):             # <<<<<<<<<<<<<<
 *     print("Hello from python", flush=True)
 *     print(task.id)
 */

#line 109 "miniparla/runtime.pyx"
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_n_s_task_2); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 109, __pyx_L1_error)

#line 109 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__21);

#line 109 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__21);

#line 109 "miniparla/runtime.pyx"
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_hello, 109, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 109, __pyx_L1_error)

  /* "miniparla/runtime.pyx":137
 * 
 * 
 * class WorkerThreadException(RuntimeError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 137 "miniparla/runtime.pyx"
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_builtin_RuntimeError); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 137, __pyx_L1_error)

#line 137 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__23);

#line 137 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "miniparla/runtime.pyx":142
 * class TaskID:
 * 
 *     def __init__(self, name, id):             # <<<<<<<<<<<<<<
 *         self._name = name
 *         self._id = id
 */

#line 142 "miniparla/runtime.pyx"
  __pyx_tuple__24 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_id); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 142, __pyx_L1_error)

#line 142 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__24);

#line 142 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__24);

#line 142 "miniparla/runtime.pyx"
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_init, 142, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 142, __pyx_L1_error)

  /* "miniparla/runtime.pyx":148
 * 
 *     @property
 *     def task(self):             # <<<<<<<<<<<<<<
 *         if not self._task:
 *             return None
 */

#line 148 "miniparla/runtime.pyx"
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 148, __pyx_L1_error)

#line 148 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__26);

#line 148 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__26);

#line 148 "miniparla/runtime.pyx"
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_task_2, 148, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 148, __pyx_L1_error)

  /* "miniparla/runtime.pyx":154
 * 
 *     @property
 *     def inner_task(self):             # <<<<<<<<<<<<<<
 *         if not self._task:
 *             return None
 */

#line 154 "miniparla/runtime.pyx"
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 154, __pyx_L1_error)

#line 154 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__28);

#line 154 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__28);

#line 154 "miniparla/runtime.pyx"
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_inner_task, 154, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 154, __pyx_L1_error)

  /* "miniparla/runtime.pyx":160
 * 
 *     @task.setter
 *     def task(self, v):             # <<<<<<<<<<<<<<
 *         assert not self._task
 *         self._task = v
 */

#line 160 "miniparla/runtime.pyx"
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_v); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 160, __pyx_L1_error)

#line 160 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__30);

#line 160 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__30);

#line 160 "miniparla/runtime.pyx"
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_task_2, 160, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 160, __pyx_L1_error)

  /* "miniparla/runtime.pyx":165
 * 
 *     @property
 *     def id(self):             # <<<<<<<<<<<<<<
 *         return self._id
 * 
 */

#line 165 "miniparla/runtime.pyx"
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 165, __pyx_L1_error)

#line 165 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__32);

#line 165 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__32);

#line 165 "miniparla/runtime.pyx"
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_id, 165, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 165, __pyx_L1_error)

  /* "miniparla/runtime.pyx":169
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self._name
 * 
 */

#line 169 "miniparla/runtime.pyx"
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 169, __pyx_L1_error)

#line 169 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__34);

#line 169 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__34);

#line 169 "miniparla/runtime.pyx"
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_name, 169, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 169, __pyx_L1_error)

  /* "miniparla/runtime.pyx":173
 * 
 *     @property
 *     def full_name(self):             # <<<<<<<<<<<<<<
 *         return "_".join(str(i) for i in (self._name, *self._id))
 * 
 */

#line 173 "miniparla/runtime.pyx"
  __pyx_tuple__36 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 173, __pyx_L1_error)

#line 173 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__36);

#line 173 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__36);

#line 173 "miniparla/runtime.pyx"
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_full_name, 173, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 173, __pyx_L1_error)

  /* "miniparla/runtime.pyx":177
 * 
 *     @property
 *     def dependencies(self):             # <<<<<<<<<<<<<<
 *         return self._dependencies
 * 
 */

#line 177 "miniparla/runtime.pyx"
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 177, __pyx_L1_error)

#line 177 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__38);

#line 177 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__38);

#line 177 "miniparla/runtime.pyx"
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_dependencies_2, 177, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 177, __pyx_L1_error)

  /* "miniparla/runtime.pyx":181
 * 
 *     @dependencies.setter
 *     def dependencies(self, v):             # <<<<<<<<<<<<<<
 *         self._dependencies = v
 * 
 */

#line 181 "miniparla/runtime.pyx"
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_v); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 181, __pyx_L1_error)

#line 181 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__40);

#line 181 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__40);

#line 181 "miniparla/runtime.pyx"
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_dependencies_2, 181, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 181, __pyx_L1_error)

  /* "miniparla/runtime.pyx":184
 *         self._dependencies = v
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return hash(self.full_name)
 * 
 */

#line 184 "miniparla/runtime.pyx"
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 184, __pyx_L1_error)

#line 184 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__42);

#line 184 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__42);

#line 184 "miniparla/runtime.pyx"
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_hash, 184, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 184, __pyx_L1_error)

  /* "miniparla/runtime.pyx":187
 *         return hash(self.full_name)
 * 
 *     def __await__(self):             # <<<<<<<<<<<<<<
 *         return (yield TaskAwaitTasks([self.task], self.task))
 * 
 */

#line 187 "miniparla/runtime.pyx"
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 187, __pyx_L1_error)

#line 187 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__44);

#line 187 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__44);

#line 187 "miniparla/runtime.pyx"
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_await, 187, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 187, __pyx_L1_error)

  /* "miniparla/runtime.pyx":251
 * class Task:
 * 
 *     def __init__(self, func, args, dependencies, taskid, req, name):             # <<<<<<<<<<<<<<
 *         self._mutex = threading.Lock()
 * 
 */

#line 251 "miniparla/runtime.pyx"
  __pyx_tuple__45 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_func, __pyx_n_s_args, __pyx_n_s_dependencies_2, __pyx_n_s_taskid, __pyx_n_s_req, __pyx_n_s_name); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 251, __pyx_L1_error)

#line 251 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__45);

#line 251 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__45);

#line 251 "miniparla/runtime.pyx"
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(7, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_init, 251, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 251, __pyx_L1_error)

  /* "miniparla/runtime.pyx":280
 * 
 *     @property
 *     def req(self):             # <<<<<<<<<<<<<<
 *         return self._req
 * 
 */

#line 280 "miniparla/runtime.pyx"
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 280, __pyx_L1_error)

#line 280 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__47);

#line 280 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__47);

#line 280 "miniparla/runtime.pyx"
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_req, 280, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 280, __pyx_L1_error)

  /* "miniparla/runtime.pyx":283
 *         return self._req
 * 
 *     def _execute_task(self):             # <<<<<<<<<<<<<<
 *         return self._state.func(self, *self._state.args)
 * 
 */

#line 283 "miniparla/runtime.pyx"
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 283, __pyx_L1_error)

#line 283 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__49);

#line 283 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__49);

#line 283 "miniparla/runtime.pyx"
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_execute_task, 283, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 283, __pyx_L1_error)

  /* "miniparla/runtime.pyx":287
 * 
 *     @property
 *     def task(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

#line 287 "miniparla/runtime.pyx"
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 287, __pyx_L1_error)

#line 287 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__51);

#line 287 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__51);

#line 287 "miniparla/runtime.pyx"
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_task_2, 287, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 287, __pyx_L1_error)

  /* "miniparla/runtime.pyx":290
 *         return self
 * 
 *     def _finish(self, ctx):             # <<<<<<<<<<<<<<
 *         #ctx.remove_vcus(self.req.vcus)
 *         pass
 */

#line 290 "miniparla/runtime.pyx"
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_ctx); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 290, __pyx_L1_error)

#line 290 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__53);

#line 290 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__53);

#line 290 "miniparla/runtime.pyx"
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_finish, 290, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 290, __pyx_L1_error)

  /* "miniparla/runtime.pyx":294
 *         pass
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         #print("Running task", self._name, self.id, flush=True)
 * 
 */

#line 294 "miniparla/runtime.pyx"
  __pyx_tuple__55 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_task_state, __pyx_n_s_e, __pyx_n_s_ctx); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 294, __pyx_L1_error)

#line 294 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__55);

#line 294 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__55);

#line 294 "miniparla/runtime.pyx"
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_run, 294, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 294, __pyx_L1_error)

  /* "miniparla/runtime.pyx":320
 *             raise e
 * 
 *     def _cleanup(self):             # <<<<<<<<<<<<<<
 *         self._func = None
 *         self._args = None
 */

#line 320 "miniparla/runtime.pyx"
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 320, __pyx_L1_error)

#line 320 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__57);

#line 320 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__57);

#line 320 "miniparla/runtime.pyx"
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_cleanup, 320, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 320, __pyx_L1_error)

  /* "miniparla/runtime.pyx":325
 * 
 *     #@profile
 *     def _set_state(self, new_state, ctx):             # <<<<<<<<<<<<<<
 *         #print("Setting state", new_state, flush=True)
 *         self._state = new_state
 */

#line 325 "miniparla/runtime.pyx"
  __pyx_tuple__59 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_new_state, __pyx_n_s_ctx); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 325, __pyx_L1_error)

#line 325 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__59);

#line 325 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__59);

#line 325 "miniparla/runtime.pyx"
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_set_state, 325, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 325, __pyx_L1_error)

  /* "miniparla/runtime.pyx":360
 * 
 * 
 *     def __await__(self):             # <<<<<<<<<<<<<<
 *         return (yield TaskAwaitTasks([self], self))
 * 
 */

#line 360 "miniparla/runtime.pyx"
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 360, __pyx_L1_error)

#line 360 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__61);

#line 360 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__61);

#line 360 "miniparla/runtime.pyx"
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_await, 360, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 360, __pyx_L1_error)

  /* "miniparla/runtime.pyx":363
 *         return (yield TaskAwaitTasks([self], self))
 * 
 *     def _notify_dependents(self, scheduler):             # <<<<<<<<<<<<<<
 *         self.inner_task.notify_dependents(scheduler)
 * 
 */

#line 363 "miniparla/runtime.pyx"
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_scheduler); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 363, __pyx_L1_error)

#line 363 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__62);

#line 363 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__62);

#line 363 "miniparla/runtime.pyx"
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_notify_dependents_2, 363, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 363, __pyx_L1_error)

  /* "miniparla/runtime.pyx":366
 *         self.inner_task.notify_dependents(scheduler)
 * 
 *     def _add_dependency(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_task.add_dependency(task)
 * 
 */

#line 366 "miniparla/runtime.pyx"
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_task_2); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 366, __pyx_L1_error)

#line 366 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__64);

#line 366 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__64);

#line 366 "miniparla/runtime.pyx"
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_add_dependency_2, 366, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 366, __pyx_L1_error)

  /* "miniparla/runtime.pyx":369
 *         self.inner_task.add_dependency(task)
 * 
 *     def blocked(self):             # <<<<<<<<<<<<<<
 *         return self.inner_task.blocked()
 * 
 */

#line 369 "miniparla/runtime.pyx"
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 369, __pyx_L1_error)

#line 369 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__66);

#line 369 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__66);

#line 369 "miniparla/runtime.pyx"
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_blocked, 369, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 369, __pyx_L1_error)

  /* "miniparla/runtime.pyx":372
 *         return self.inner_task.blocked()
 * 
 *     def blocked_unsafe(self):             # <<<<<<<<<<<<<<
 *         return self.inner_task.blocked_unsafe()
 * 
 */

#line 372 "miniparla/runtime.pyx"
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 372, __pyx_L1_error)

#line 372 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__68);

#line 372 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__68);

#line 372 "miniparla/runtime.pyx"
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_blocked_unsafe, 372, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 372, __pyx_L1_error)

  /* "miniparla/runtime.pyx":375
 *         return self.inner_task.blocked_unsafe()
 * 
 *     def set_dependencies(self, v):             # <<<<<<<<<<<<<<
 *         #print("Setting dependencies of", self._taskid, flush=True)
 *         self.inner_task.set_dependencies(v)
 */

#line 375 "miniparla/runtime.pyx"
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_v); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 375, __pyx_L1_error)

#line 375 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__70);

#line 375 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__70);

#line 375 "miniparla/runtime.pyx"
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_set_dependencies, 375, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 375, __pyx_L1_error)

  /* "miniparla/runtime.pyx":381
 * 
 * class _TaskLocals(threading.local):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(_TaskLocals, self).__init__()
 *         self.task_scopes = []
 */

#line 381 "miniparla/runtime.pyx"
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 381, __pyx_L1_error)

#line 381 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__72);

#line 381 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__72);

#line 381 "miniparla/runtime.pyx"
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_init, 381, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 381, __pyx_L1_error)

  /* "miniparla/runtime.pyx":386
 * 
 *     @property
 *     def ctx(self):             # <<<<<<<<<<<<<<
 *         return getattr(self, "_ctx", None)
 * 
 */

#line 386 "miniparla/runtime.pyx"
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 386, __pyx_L1_error)

#line 386 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__74);

#line 386 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__74);

#line 386 "miniparla/runtime.pyx"
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_ctx, 386, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 386, __pyx_L1_error)

  /* "miniparla/runtime.pyx":390
 * 
 *     @ctx.setter
 *     def ctx(self, v):             # <<<<<<<<<<<<<<
 *         self._ctx = v
 * 
 */

#line 390 "miniparla/runtime.pyx"
  __pyx_tuple__76 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_v); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 390, __pyx_L1_error)

#line 390 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__76);

#line 390 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__76);

#line 390 "miniparla/runtime.pyx"
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_ctx, 390, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 390, __pyx_L1_error)

  /* "miniparla/runtime.pyx":394
 * 
 *     @property
 *     def global_tasks(self):             # <<<<<<<<<<<<<<
 *         return getattr(self, "_global_tasks", [])
 * 
 */

#line 394 "miniparla/runtime.pyx"
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 394, __pyx_L1_error)

#line 394 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__78);

#line 394 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__78);

#line 394 "miniparla/runtime.pyx"
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_global_tasks_2, 394, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 394, __pyx_L1_error)

  /* "miniparla/runtime.pyx":398
 * 
 *     @global_tasks.setter
 *     def global_tasks(self, v):             # <<<<<<<<<<<<<<
 *         self._global_tasks = v
 * 
 */

#line 398 "miniparla/runtime.pyx"
  __pyx_tuple__80 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_v); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 398, __pyx_L1_error)

#line 398 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__80);

#line 398 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__80);

#line 398 "miniparla/runtime.pyx"
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_global_tasks_2, 398, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 398, __pyx_L1_error)

  /* "miniparla/runtime.pyx":406
 * class SchedulerContext:
 * 
 *     def spawn_task(self, function, args, dependencies, taskid, req, name):             # <<<<<<<<<<<<<<
 *         return Task(function, args, dependencies=dependencies, taskid=taskid, req=req, name=name)
 * 
 */

#line 406 "miniparla/runtime.pyx"
  __pyx_tuple__82 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_function, __pyx_n_s_args, __pyx_n_s_dependencies_2, __pyx_n_s_taskid, __pyx_n_s_req, __pyx_n_s_name); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 406, __pyx_L1_error)

#line 406 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__82);

#line 406 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__82);

#line 406 "miniparla/runtime.pyx"
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(7, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_spawn_task, 406, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 406, __pyx_L1_error)

  /* "miniparla/runtime.pyx":409
 *         return Task(function, args, dependencies=dependencies, taskid=taskid, req=req, name=name)
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         #print("INNER")
 *         _scheduler_locals._scheduler_context_stack.append(self)
 */

#line 409 "miniparla/runtime.pyx"
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 409, __pyx_L1_error)

#line 409 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__84);

#line 409 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__84);

#line 409 "miniparla/runtime.pyx"
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_enter, 409, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 409, __pyx_L1_error)

  /* "miniparla/runtime.pyx":414
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         _scheduler_locals._scheduler_context_stack.pop()
 * 
 */

#line 414 "miniparla/runtime.pyx"
  __pyx_tuple__86 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_exc_type, __pyx_n_s_exc_val, __pyx_n_s_exc_tb); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 414, __pyx_L1_error)

#line 414 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__86);

#line 414 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__86);

#line 414 "miniparla/runtime.pyx"
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_exit, 414, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 414, __pyx_L1_error)

  /* "miniparla/runtime.pyx":419
 * 
 * class _SchedulerLocals(threading.local):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(_SchedulerLocals, self).__init__()
 *         self._scheduler_context_stack = []
 */

#line 419 "miniparla/runtime.pyx"
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 419, __pyx_L1_error)

#line 419 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__88);

#line 419 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__88);

#line 419 "miniparla/runtime.pyx"
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_init, 419, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 419, __pyx_L1_error)

  /* "miniparla/runtime.pyx":424
 * 
 *     @property
 *     def scheduler_context(self):             # <<<<<<<<<<<<<<
 *         if self._scheduler_context_stack:
 *             return self._scheduler_context_stack[-1]
 */

#line 424 "miniparla/runtime.pyx"
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 424, __pyx_L1_error)

#line 424 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__90);

#line 424 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__90);

#line 424 "miniparla/runtime.pyx"
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_scheduler_context, 424, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 424, __pyx_L1_error)

  /* "miniparla/runtime.pyx":433
 * _scheduler_locals = _SchedulerLocals()
 * 
 * def get_scheduler_context():             # <<<<<<<<<<<<<<
 *     return _scheduler_locals.scheduler_context
 * 
 */

#line 433 "miniparla/runtime.pyx"
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_get_scheduler_context, 433, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 433, __pyx_L1_error)

  /* "miniparla/runtime.pyx":438
 * class ControllableThread(threading.Thread):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._should_run = True
 */

#line 438 "miniparla/runtime.pyx"
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 438, __pyx_L1_error)

#line 438 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__93);

#line 438 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__93);

#line 438 "miniparla/runtime.pyx"
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_init, 438, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 438, __pyx_L1_error)

  /* "miniparla/runtime.pyx":442
 *         self._should_run = True
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         with self._monitor:
 *             self._should_run = False
 */

#line 442 "miniparla/runtime.pyx"
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 442, __pyx_L1_error)

#line 442 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__95);

#line 442 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__95);

#line 442 "miniparla/runtime.pyx"
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_stop, 442, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 442, __pyx_L1_error)

  /* "miniparla/runtime.pyx":447
 *             self._monitor.notify_all()
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 447 "miniparla/runtime.pyx"
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(0, 447, __pyx_L1_error)

#line 447 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__97);

#line 447 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__97);

#line 447 "miniparla/runtime.pyx"
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__97, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_run, 447, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(0, 447, __pyx_L1_error)

  /* "miniparla/runtime.pyx":458
 * 
 * class WorkerThread(ControllableThread, SchedulerContext):
 *     def __init__(self, scheduler, index):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._scheduler = scheduler
 */

#line 458 "miniparla/runtime.pyx"
  __pyx_tuple__99 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_scheduler, __pyx_n_s_index); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(0, 458, __pyx_L1_error)

#line 458 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__99);

#line 458 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__99);

#line 458 "miniparla/runtime.pyx"
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__99, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_init, 458, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(0, 458, __pyx_L1_error)

  /* "miniparla/runtime.pyx":467
 * 
 *     @property
 *     def scheduler(self):             # <<<<<<<<<<<<<<
 *         return self._scheduler
 * 
 */

#line 467 "miniparla/runtime.pyx"
  __pyx_tuple__101 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 467, __pyx_L1_error)

#line 467 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__101);

#line 467 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__101);

#line 467 "miniparla/runtime.pyx"
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__101, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_scheduler, 467, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(0, 467, __pyx_L1_error)

  /* "miniparla/runtime.pyx":470
 *         return self._scheduler
 * 
 *     def assign_task(self, task):             # <<<<<<<<<<<<<<
 *         #print("Trying to assign task", flush=True)
 *         with self._monitor:
 */

#line 470 "miniparla/runtime.pyx"
  __pyx_tuple__103 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_task_2); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 470, __pyx_L1_error)

#line 470 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__103);

#line 470 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__103);

#line 470 "miniparla/runtime.pyx"
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__103, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_assign_task, 470, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(0, 470, __pyx_L1_error)

  /* "miniparla/runtime.pyx":481
 *             self._monitor.notify()
 * 
 *     def _remove_task(self):             # <<<<<<<<<<<<<<
 *         with self._monitor:
 *             if not self.task:
 */

#line 481 "miniparla/runtime.pyx"
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 481, __pyx_L1_error)

#line 481 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__105);

#line 481 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__105);

#line 481 "miniparla/runtime.pyx"
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_remove_task, 481, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 481, __pyx_L1_error)

  /* "miniparla/runtime.pyx":489
 *             self.task = None
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         try:
 * 
 */

#line 489 "miniparla/runtime.pyx"
  __pyx_tuple__107 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_e); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 489, __pyx_L1_error)

#line 489 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__107);

#line 489 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__107);

#line 489 "miniparla/runtime.pyx"
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_run, 489, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 489, __pyx_L1_error)

  /* "miniparla/runtime.pyx":518
 *             raise e
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         super().stop()
 *         #print("Stopping Thread", self.index, flush=True)
 */

#line 518 "miniparla/runtime.pyx"
  __pyx_tuple__109 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 518, __pyx_L1_error)

#line 518 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__109);

#line 518 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__109);

#line 518 "miniparla/runtime.pyx"
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_stop, 518, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(0, 518, __pyx_L1_error)

  /* "miniparla/runtime.pyx":525
 * class TaskDict:
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.__dict = {}
 */

#line 525 "miniparla/runtime.pyx"
  __pyx_tuple__111 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(0, 525, __pyx_L1_error)

#line 525 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__111);

#line 525 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__111);

#line 525 "miniparla/runtime.pyx"
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__111, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_init, 525, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(0, 525, __pyx_L1_error)

  /* "miniparla/runtime.pyx":530
 *         self.__mutex = threading.Condition(threading.Lock())
 * 
 *     def add(self, task):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             self.__dict[task.id] = task
 */

#line 530 "miniparla/runtime.pyx"
  __pyx_tuple__113 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_task_2); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 530, __pyx_L1_error)

#line 530 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__113);

#line 530 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__113);

#line 530 "miniparla/runtime.pyx"
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_add, 530, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(0, 530, __pyx_L1_error)

  /* "miniparla/runtime.pyx":534
 *             self.__dict[task.id] = task
 * 
 *     def get(self, task_inner):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             return self.__dict.get(task_inner.id, None)
 */

#line 534 "miniparla/runtime.pyx"
  __pyx_tuple__115 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_task_inner); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(0, 534, __pyx_L1_error)

#line 534 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__115);

#line 534 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__115);

#line 534 "miniparla/runtime.pyx"
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_get, 534, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(0, 534, __pyx_L1_error)

  /* "miniparla/runtime.pyx":538
 *             return self.__dict.get(task_inner.id, None)
 * 
 *     def remove(self, task):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             del self.__dict[task.id]
 */

#line 538 "miniparla/runtime.pyx"
  __pyx_tuple__117 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_task_2); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(0, 538, __pyx_L1_error)

#line 538 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__117);

#line 538 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__117);

#line 538 "miniparla/runtime.pyx"
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__117, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_remove, 538, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 538, __pyx_L1_error)

  /* "miniparla/runtime.pyx":692
 * class Scheduler(ControllableThread, SchedulerContext):
 * 
 *     def __init__(self, n_threads=8, period=0.001):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._monitor = threading.Condition(threading.Lock())
 */

#line 692 "miniparla/runtime.pyx"
  __pyx_tuple__119 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_n_threads, __pyx_n_s_period, __pyx_n_s_t, __pyx_n_s_i); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 692, __pyx_L1_error)

#line 692 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__119);

#line 692 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__119);

#line 692 "miniparla/runtime.pyx"
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__119, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_init, 692, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(0, 692, __pyx_L1_error)

#line 692 "miniparla/runtime.pyx"
  __pyx_tuple__121 = PyTuple_Pack(2, ((PyObject *)__pyx_int_8), ((PyObject*)__pyx_float_0_001)); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(0, 692, __pyx_L1_error)

#line 692 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__121);

#line 692 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__121);

  /* "miniparla/runtime.pyx":718
 * 
 *     @property
 *     def scheduler(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

#line 718 "miniparla/runtime.pyx"
  __pyx_tuple__122 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 718, __pyx_L1_error)

#line 718 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__122);

#line 718 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__122);

#line 718 "miniparla/runtime.pyx"
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_scheduler, 718, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 718, __pyx_L1_error)

  /* "miniparla/runtime.pyx":721
 *         return self
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         if self.get_active_tasks() != 1:
 *             raise Exception("Scheduler context can only be entered once")
 */

#line 721 "miniparla/runtime.pyx"
  __pyx_tuple__124 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 721, __pyx_L1_error)

#line 721 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__124);

#line 721 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__124);

#line 721 "miniparla/runtime.pyx"
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_enter, 721, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 721, __pyx_L1_error)

  /* "miniparla/runtime.pyx":728
 * 
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         super().__exit__(exc_type, exc_val, exc_tb)
 *         self.decr_active_task()
 */

#line 728 "miniparla/runtime.pyx"
  __pyx_tuple__126 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_exc_type, __pyx_n_s_exc_val, __pyx_n_s_exc_tb, __pyx_n_s_t); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 728, __pyx_L1_error)

#line 728 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__126);

#line 728 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__126);

#line 728 "miniparla/runtime.pyx"
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_exit, 728, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(0, 728, __pyx_L1_error)

  /* "miniparla/runtime.pyx":742
 *                 raise self._exceptions[0]
 * 
 *     def incr_resources(self, vcus):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_resources(vcus)
 * 
 */

#line 742 "miniparla/runtime.pyx"
  __pyx_tuple__128 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_vcus); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 742, __pyx_L1_error)

#line 742 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__128);

#line 742 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__128);

#line 742 "miniparla/runtime.pyx"
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_incr_resources, 742, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 742, __pyx_L1_error)

  /* "miniparla/runtime.pyx":745
 *         self.inner_scheduler.incr_resources(vcus)
 * 
 *     def decr_resources(self, vcus):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_resources(vcus)
 * 
 */

#line 745 "miniparla/runtime.pyx"
  __pyx_tuple__130 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_vcus); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 745, __pyx_L1_error)

#line 745 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__130);

#line 745 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__130);

#line 745 "miniparla/runtime.pyx"
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_decr_resources, 745, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 745, __pyx_L1_error)

  /* "miniparla/runtime.pyx":748
 *         self.inner_scheduler.decr_resources(vcus)
 * 
 *     def current_resources(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_resources()
 * 
 */

#line 748 "miniparla/runtime.pyx"
  __pyx_tuple__132 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 748, __pyx_L1_error)

#line 748 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__132);

#line 748 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__132);

#line 748 "miniparla/runtime.pyx"
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_current_resources, 748, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(0, 748, __pyx_L1_error)

  /* "miniparla/runtime.pyx":751
 *         return self.inner_scheduler.get_resources()
 * 
 *     def incr_active_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_active_tasks()
 * 
 */

#line 751 "miniparla/runtime.pyx"
  __pyx_tuple__134 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 751, __pyx_L1_error)

#line 751 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__134);

#line 751 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__134);

#line 751 "miniparla/runtime.pyx"
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_incr_active_tasks, 751, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 751, __pyx_L1_error)

  /* "miniparla/runtime.pyx":754
 *         self.inner_scheduler.incr_active_tasks()
 * 
 *     def decr_active_task(self):             # <<<<<<<<<<<<<<
 *         done = self.inner_scheduler.decr_active_tasks()
 *         if done:
 */

#line 754 "miniparla/runtime.pyx"
  __pyx_tuple__136 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_done); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 754, __pyx_L1_error)

#line 754 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__136);

#line 754 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__136);

#line 754 "miniparla/runtime.pyx"
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_decr_active_task, 754, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(0, 754, __pyx_L1_error)

  /* "miniparla/runtime.pyx":759
 *             self.stop()
 * 
 *     def cpp_callback(self, task, worker):             # <<<<<<<<<<<<<<
 *         success = False
 *         worker.assign_task(task)
 */

#line 759 "miniparla/runtime.pyx"
  __pyx_tuple__138 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_task_2, __pyx_n_s_worker, __pyx_n_s_success); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(0, 759, __pyx_L1_error)

#line 759 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__138);

#line 759 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__138);

#line 759 "miniparla/runtime.pyx"
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_cpp_callback, 759, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(0, 759, __pyx_L1_error)

  /* "miniparla/runtime.pyx":765
 *         return success
 * 
 *     def incr_free_threads(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_free_threads()
 * 
 */

#line 765 "miniparla/runtime.pyx"
  __pyx_tuple__140 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 765, __pyx_L1_error)

#line 765 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__140);

#line 765 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__140);

#line 765 "miniparla/runtime.pyx"
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_incr_free_threads, 765, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(0, 765, __pyx_L1_error)

  /* "miniparla/runtime.pyx":768
 *         self.inner_scheduler.incr_free_threads()
 * 
 *     def decr_free_threads(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_free_threads()
 * 
 */

#line 768 "miniparla/runtime.pyx"
  __pyx_tuple__142 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 768, __pyx_L1_error)

#line 768 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__142);

#line 768 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__142);

#line 768 "miniparla/runtime.pyx"
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_decr_free_threads, 768, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(0, 768, __pyx_L1_error)

  /* "miniparla/runtime.pyx":771
 *         self.inner_scheduler.decr_free_threads()
 * 
 *     def get_free_threads(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_free_threads()
 * 
 */

#line 771 "miniparla/runtime.pyx"
  __pyx_tuple__144 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(0, 771, __pyx_L1_error)

#line 771 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__144);

#line 771 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__144);

#line 771 "miniparla/runtime.pyx"
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_get_free_threads, 771, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(0, 771, __pyx_L1_error)

  /* "miniparla/runtime.pyx":774
 *         return self.inner_scheduler.get_free_threads()
 * 
 *     def get_active_tasks(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_active_tasks()
 * 
 */

#line 774 "miniparla/runtime.pyx"
  __pyx_tuple__146 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(0, 774, __pyx_L1_error)

#line 774 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__146);

#line 774 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__146);

#line 774 "miniparla/runtime.pyx"
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_get_active_tasks, 774, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(0, 774, __pyx_L1_error)

  /* "miniparla/runtime.pyx":777
 *         return self.inner_scheduler.get_active_tasks()
 * 
 *     def incr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_running_tasks()
 * 
 */

#line 777 "miniparla/runtime.pyx"
  __pyx_tuple__148 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 777, __pyx_L1_error)

#line 777 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__148);

#line 777 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__148);

#line 777 "miniparla/runtime.pyx"
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_incr_running_tasks, 777, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(0, 777, __pyx_L1_error)

  /* "miniparla/runtime.pyx":780
 *         self.inner_scheduler.incr_running_tasks()
 * 
 *     def decr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_running_tasks()
 * 
 */

#line 780 "miniparla/runtime.pyx"
  __pyx_tuple__150 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 780, __pyx_L1_error)

#line 780 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__150);

#line 780 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__150);

#line 780 "miniparla/runtime.pyx"
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_decr_running_tasks, 780, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(0, 780, __pyx_L1_error)

  /* "miniparla/runtime.pyx":783
 *         self.inner_scheduler.decr_running_tasks()
 * 
 *     def get_running_tasks(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_running_tasks()
 * 
 */

#line 783 "miniparla/runtime.pyx"
  __pyx_tuple__152 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(0, 783, __pyx_L1_error)

#line 783 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__152);

#line 783 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__152);

#line 783 "miniparla/runtime.pyx"
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_get_running_tasks, 783, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(0, 783, __pyx_L1_error)

  /* "miniparla/runtime.pyx":786
 *         return self.inner_scheduler.get_running_tasks()
 * 
 *     def enqueue_worker(self, worker):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_worker(worker.worker)
 * 
 */

#line 786 "miniparla/runtime.pyx"
  __pyx_tuple__154 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_worker); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(0, 786, __pyx_L1_error)

#line 786 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__154);

#line 786 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__154);

#line 786 "miniparla/runtime.pyx"
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__154, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_enqueue_worker, 786, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) __PYX_ERR(0, 786, __pyx_L1_error)

  /* "miniparla/runtime.pyx":789
 *         self.inner_scheduler.enqueue_worker(worker.worker)
 * 
 *     def enqueue_task(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_task(task.inner_task)
 * 
 */

#line 789 "miniparla/runtime.pyx"
  __pyx_tuple__156 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_task_2); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(0, 789, __pyx_L1_error)

#line 789 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__156);

#line 789 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__156);

#line 789 "miniparla/runtime.pyx"
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__156, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_enqueue_task, 789, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) __PYX_ERR(0, 789, __pyx_L1_error)

  /* "miniparla/runtime.pyx":792
 *         self.inner_scheduler.enqueue_task(task.inner_task)
 * 
 *     def enqueue_task_unsafe(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_task_unsafe(task.inner_task)
 * 
 */

#line 792 "miniparla/runtime.pyx"
  __pyx_tuple__158 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_task_2); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(0, 792, __pyx_L1_error)

#line 792 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__158);

#line 792 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__158);

#line 792 "miniparla/runtime.pyx"
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__158, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_enqueue_task_unsafe, 792, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(0, 792, __pyx_L1_error)

  /* "miniparla/runtime.pyx":795
 *         self.inner_scheduler.enqueue_task_unsafe(task.inner_task)
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.run()
 * 
 */

#line 795 "miniparla/runtime.pyx"
  __pyx_tuple__160 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(0, 795, __pyx_L1_error)

#line 795 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__160);

#line 795 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__160);

#line 795 "miniparla/runtime.pyx"
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__160, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_run, 795, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) __PYX_ERR(0, 795, __pyx_L1_error)

  /* "miniparla/runtime.pyx":798
 *         self.inner_scheduler.run()
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         super().stop()
 * 
 */

#line 798 "miniparla/runtime.pyx"
  __pyx_tuple__162 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_w); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(0, 798, __pyx_L1_error)

#line 798 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__162);

#line 798 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__162);

#line 798 "miniparla/runtime.pyx"
  __pyx_codeobj__163 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__162, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_stop, 798, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__163)) __PYX_ERR(0, 798, __pyx_L1_error)

  /* "miniparla/runtime.pyx":805
 *         #print("ALL STOPPED", flush=True)
 * 
 *     def run_scheduler(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.run_scheduler()
 * 
 */

#line 805 "miniparla/runtime.pyx"
  __pyx_tuple__164 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__164)) __PYX_ERR(0, 805, __pyx_L1_error)

#line 805 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__164);

#line 805 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__164);

#line 805 "miniparla/runtime.pyx"
  __pyx_codeobj__165 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__164, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_run_scheduler, 805, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__165)) __PYX_ERR(0, 805, __pyx_L1_error)

  /* "miniparla/runtime.pyx":814
 * class Resources:
 * 
 *     def __init__(self, vcus):             # <<<<<<<<<<<<<<
 *         self.vcus = vcus
 * 
 */

#line 814 "miniparla/runtime.pyx"
  __pyx_tuple__166 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_vcus); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(0, 814, __pyx_L1_error)

#line 814 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__166);

#line 814 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__166);

#line 814 "miniparla/runtime.pyx"
  __pyx_codeobj__167 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__166, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_init, 814, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__167)) __PYX_ERR(0, 814, __pyx_L1_error)

  /* "miniparla/runtime.pyx":819
 * 
 * 
 * def _task_callback(task, body):             # <<<<<<<<<<<<<<
 *     """
 *     A function which forwards to a python function in the appropriate device context.
 */

#line 819 "miniparla/runtime.pyx"
  __pyx_tuple__168 = PyTuple_Pack(9, __pyx_n_s_task_2, __pyx_n_s_body, __pyx_n_s_in_value_task, __pyx_n_s_in_value, __pyx_n_s_new_task_info, __pyx_n_s_dependencies_2, __pyx_n_s_value_task, __pyx_n_s_e, __pyx_n_s_result); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(0, 819, __pyx_L1_error)

#line 819 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_tuple__168);

#line 819 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_tuple__168);

#line 819 "miniparla/runtime.pyx"
  __pyx_codeobj__169 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__168, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miniparla_runtime_pyx, __pyx_n_s_task_callback, 819, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__169)) __PYX_ERR(0, 819, __pyx_L1_error)

#line 819 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 819 "miniparla/runtime.pyx"
  return 0;

#line 819 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 819 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 819 "miniparla/runtime.pyx"
  return -1;

#line 819 "miniparla/runtime.pyx"
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyList_Type_pop.type = (PyObject*)&PyList_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_001 = PyFloat_FromDouble(0.001); if (unlikely(!__pyx_float_0_001)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_0_0001 = PyFloat_FromDouble(0.0001); if (unlikely(!__pyx_float_0_0001)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_9miniparla_7runtime_PyInnerTask = &__pyx_vtable_9miniparla_7runtime_PyInnerTask;
  __pyx_vtable_9miniparla_7runtime_PyInnerTask.set_dependencies = (PyObject *(*)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, PyObject *, int __pyx_skip_dispatch))__pyx_f_9miniparla_7runtime_11PyInnerTask_set_dependencies;
  __pyx_vtable_9miniparla_7runtime_PyInnerTask.add_dependency = (PyObject *(*)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, int __pyx_skip_dispatch))__pyx_f_9miniparla_7runtime_11PyInnerTask_add_dependency;
  __pyx_vtable_9miniparla_7runtime_PyInnerTask.blocked = (PyObject *(*)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, int __pyx_skip_dispatch))__pyx_f_9miniparla_7runtime_11PyInnerTask_blocked;
  __pyx_vtable_9miniparla_7runtime_PyInnerTask.blocked_unsafe = (PyObject *(*)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, int __pyx_skip_dispatch))__pyx_f_9miniparla_7runtime_11PyInnerTask_blocked_unsafe;
  __pyx_vtable_9miniparla_7runtime_PyInnerTask.notify_dependents = (PyObject *(*)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, struct __pyx_obj_9miniparla_7runtime_PyInnerScheduler *, int __pyx_skip_dispatch))__pyx_f_9miniparla_7runtime_11PyInnerTask_notify_dependents;
  __pyx_vtable_9miniparla_7runtime_PyInnerTask.get_num_deps = (PyObject *(*)(struct __pyx_obj_9miniparla_7runtime_PyInnerTask *, int __pyx_skip_dispatch))__pyx_f_9miniparla_7runtime_11PyInnerTask_get_num_deps;
  if (PyType_Ready(&__pyx_type_9miniparla_7runtime_PyInnerTask) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9miniparla_7runtime_PyInnerTask.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9miniparla_7runtime_PyInnerTask.tp_dictoffset && __pyx_type_9miniparla_7runtime_PyInnerTask.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9miniparla_7runtime_PyInnerTask.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9miniparla_7runtime_PyInnerTask.tp_dict, __pyx_vtabptr_9miniparla_7runtime_PyInnerTask) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyInnerTask, (PyObject *)&__pyx_type_9miniparla_7runtime_PyInnerTask) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9miniparla_7runtime_PyInnerTask) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __pyx_ptype_9miniparla_7runtime_PyInnerTask = &__pyx_type_9miniparla_7runtime_PyInnerTask;
  if (PyType_Ready(&__pyx_type_9miniparla_7runtime_PyInnerWorker) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9miniparla_7runtime_PyInnerWorker.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9miniparla_7runtime_PyInnerWorker.tp_dictoffset && __pyx_type_9miniparla_7runtime_PyInnerWorker.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9miniparla_7runtime_PyInnerWorker.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyInnerWorker, (PyObject *)&__pyx_type_9miniparla_7runtime_PyInnerWorker) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9miniparla_7runtime_PyInnerWorker) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  __pyx_ptype_9miniparla_7runtime_PyInnerWorker = &__pyx_type_9miniparla_7runtime_PyInnerWorker;
  if (PyType_Ready(&__pyx_type_9miniparla_7runtime_PyInnerScheduler) < 0) __PYX_ERR(0, 543, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9miniparla_7runtime_PyInnerScheduler.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9miniparla_7runtime_PyInnerScheduler.tp_dictoffset && __pyx_type_9miniparla_7runtime_PyInnerScheduler.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9miniparla_7runtime_PyInnerScheduler.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyInnerScheduler, (PyObject *)&__pyx_type_9miniparla_7runtime_PyInnerScheduler) < 0) __PYX_ERR(0, 543, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9miniparla_7runtime_PyInnerScheduler) < 0) __PYX_ERR(0, 543, __pyx_L1_error)
  __pyx_ptype_9miniparla_7runtime_PyInnerScheduler = &__pyx_type_9miniparla_7runtime_PyInnerScheduler;
  if (PyType_Ready(&__pyx_type_9miniparla_7runtime___pyx_scope_struct__full_name) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9miniparla_7runtime___pyx_scope_struct__full_name.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9miniparla_7runtime___pyx_scope_struct__full_name.tp_dictoffset && __pyx_type_9miniparla_7runtime___pyx_scope_struct__full_name.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9miniparla_7runtime___pyx_scope_struct__full_name.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9miniparla_7runtime___pyx_scope_struct__full_name = &__pyx_type_9miniparla_7runtime___pyx_scope_struct__full_name;
  if (PyType_Ready(&__pyx_type_9miniparla_7runtime___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9miniparla_7runtime___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9miniparla_7runtime___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_9miniparla_7runtime___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9miniparla_7runtime___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9miniparla_7runtime___pyx_scope_struct_1_genexpr = &__pyx_type_9miniparla_7runtime___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_9miniparla_7runtime___pyx_scope_struct_2___await__) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9miniparla_7runtime___pyx_scope_struct_2___await__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9miniparla_7runtime___pyx_scope_struct_2___await__.tp_dictoffset && __pyx_type_9miniparla_7runtime___pyx_scope_struct_2___await__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9miniparla_7runtime___pyx_scope_struct_2___await__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9miniparla_7runtime___pyx_scope_struct_2___await__ = &__pyx_type_9miniparla_7runtime___pyx_scope_struct_2___await__;
  if (PyType_Ready(&__pyx_type_9miniparla_7runtime___pyx_scope_struct_3___await__) < 0) __PYX_ERR(0, 360, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9miniparla_7runtime___pyx_scope_struct_3___await__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9miniparla_7runtime___pyx_scope_struct_3___await__.tp_dictoffset && __pyx_type_9miniparla_7runtime___pyx_scope_struct_3___await__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9miniparla_7runtime___pyx_scope_struct_3___await__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9miniparla_7runtime___pyx_scope_struct_3___await__ = &__pyx_type_9miniparla_7runtime___pyx_scope_struct_3___await__;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initruntime(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initruntime(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_runtime(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_runtime(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_runtime(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'runtime' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_runtime(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("runtime", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_miniparla__runtime) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_3, __pyx_n_s_main) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 2, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "miniparla.runtime")) {
      if (unlikely(PyDict_SetItemString(modules, "miniparla.runtime", __pyx_m) < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif

  /* "miniparla/runtime.pyx":2
 * 
 * from miniparla.task_states import TaskRunning, TaskCompleted, TaskState, TaskException             # <<<<<<<<<<<<<<
 * from collections import namedtuple, defaultdict, deque
 * import threading
 */

#line 2 "miniparla/runtime.pyx"
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_TaskRunning);

#line 2 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_TaskRunning);

#line 2 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_TaskRunning);

#line 2 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_TaskCompleted);

#line 2 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_TaskCompleted);

#line 2 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_TaskCompleted);

#line 2 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_TaskState);

#line 2 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_TaskState);

#line 2 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_TaskState);

#line 2 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_TaskException);

#line 2 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_TaskException);

#line 2 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_TaskException);

#line 2 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_miniparla_task_states, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TaskRunning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TaskRunning, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TaskCompleted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TaskCompleted, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TaskState); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TaskState, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TaskException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TaskException, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":3
 * 
 * from miniparla.task_states import TaskRunning, TaskCompleted, TaskState, TaskException
 * from collections import namedtuple, defaultdict, deque             # <<<<<<<<<<<<<<
 * import threading
 * import time
 */

#line 3 "miniparla/runtime.pyx"
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 3 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_namedtuple);

#line 3 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_namedtuple);

#line 3 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_namedtuple);

#line 3 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_defaultdict);

#line 3 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_defaultdict);

#line 3 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_defaultdict);

#line 3 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_deque);

#line 3 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_deque);

#line 3 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_deque);

#line 3 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 3 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 3 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 3 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_namedtuple, __pyx_t_2) < 0) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 3 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 3 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_defaultdict, __pyx_t_2) < 0) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 3 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 3 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_deque, __pyx_t_2) < 0) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 3 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":4
 * from miniparla.task_states import TaskRunning, TaskCompleted, TaskState, TaskException
 * from collections import namedtuple, defaultdict, deque
 * import threading             # <<<<<<<<<<<<<<
 * import time
 * from abc import abstractmethod, ABCMeta
 */

#line 4 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_threading, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)

#line 4 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_threading, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)

#line 4 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":5
 * from collections import namedtuple, defaultdict, deque
 * import threading
 * import time             # <<<<<<<<<<<<<<
 * from abc import abstractmethod, ABCMeta
 * from contextlib import contextmanager
 */

#line 5 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)

#line 5 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 5 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)

#line 5 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":6
 * import threading
 * import time
 * from abc import abstractmethod, ABCMeta             # <<<<<<<<<<<<<<
 * from contextlib import contextmanager
 * from typing import Awaitable, Collection, Iterable, Tuple, Union, List, Dict, Any
 */

#line 6 "miniparla/runtime.pyx"
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)

#line 6 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 6 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_abstractmethod);

#line 6 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_abstractmethod);

#line 6 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_abstractmethod);

#line 6 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_ABCMeta);

#line 6 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_ABCMeta);

#line 6 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ABCMeta);

#line 6 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_abc, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)

#line 6 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 6 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 6 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_abstractmethod); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)

#line 6 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 6 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_abstractmethod, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)

#line 6 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 6 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ABCMeta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)

#line 6 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 6 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ABCMeta, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)

#line 6 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 6 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":7
 * import time
 * from abc import abstractmethod, ABCMeta
 * from contextlib import contextmanager             # <<<<<<<<<<<<<<
 * from typing import Awaitable, Collection, Iterable, Tuple, Union, List, Dict, Any
 * 
 */

#line 7 "miniparla/runtime.pyx"
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)

#line 7 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 7 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_contextmanager);

#line 7 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_contextmanager);

#line 7 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_contextmanager);

#line 7 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_contextlib, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)

#line 7 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 7 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 7 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_contextmanager); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)

#line 7 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 7 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_contextmanager, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)

#line 7 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 7 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":8
 * from abc import abstractmethod, ABCMeta
 * from contextlib import contextmanager
 * from typing import Awaitable, Collection, Iterable, Tuple, Union, List, Dict, Any             # <<<<<<<<<<<<<<
 * 
 * import inspect
 */

#line 8 "miniparla/runtime.pyx"
  __pyx_t_1 = PyList_New(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_Awaitable);

#line 8 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_Awaitable);

#line 8 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Awaitable);

#line 8 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_Collection);

#line 8 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_Collection);

#line 8 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_Collection);

#line 8 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_Iterable);

#line 8 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_Iterable);

#line 8 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_Iterable);

#line 8 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_Tuple);

#line 8 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_Tuple);

#line 8 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_Tuple);

#line 8 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_Union);

#line 8 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_Union);

#line 8 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_Union);

#line 8 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_List);

#line 8 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_List);

#line 8 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_List);

#line 8 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_Dict);

#line 8 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_Dict);

#line 8 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_Dict);

#line 8 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_s_Any);

#line 8 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_s_Any);

#line 8 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_Any);

#line 8 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Awaitable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Awaitable, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Collection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Collection, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Iterable, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tuple, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Union); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Union, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_List); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Dict, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Any); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Any, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":10
 * from typing import Awaitable, Collection, Iterable, Tuple, Union, List, Dict, Any
 * 
 * import inspect             # <<<<<<<<<<<<<<
 * import logging
 * 
 */

#line 10 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_patch_inspect(__Pyx_Import(__pyx_n_s_inspect, 0, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)

#line 10 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 10 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inspect, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)

#line 10 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":11
 * 
 * import inspect
 * import logging             # <<<<<<<<<<<<<<
 * 
 * import cython
 */

#line 11 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_logging, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)

#line 11 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 11 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)

#line 11 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":17
 * from libcpp cimport bool
 * 
 * logger = logging.getLogger(__name__)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 17 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)

#line 17 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 17 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)

#line 17 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 17 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 17 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_name_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)

#line 17 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 17 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)

#line 17 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 17 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 17 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 17 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logger, __pyx_t_3) < 0) __PYX_ERR(0, 17, __pyx_L1_error)

#line 17 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "miniparla/runtime.pyx":20
 * 
 * 
 * TaskAwaitTasks = namedtuple("AwaitTasks", ["dependencies", "value_task"])             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "cpp_runtime.hpp" nogil:
 */

#line 20 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 20 "miniparla/runtime.pyx"
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 20 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_u_dependencies_2);

#line 20 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_u_dependencies_2);

#line 20 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_dependencies_2);

#line 20 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_u_value_task);

#line 20 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_u_value_task);

#line 20 "miniparla/runtime.pyx"
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_value_task);

#line 20 "miniparla/runtime.pyx"
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 20 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_n_u_AwaitTasks);

#line 20 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_n_u_AwaitTasks);

#line 20 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_AwaitTasks);

#line 20 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 20 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);

#line 20 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 20 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 20 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 20 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 20 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TaskAwaitTasks, __pyx_t_2) < 0) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":109
 * 
 * 
 * def hello(task):             # <<<<<<<<<<<<<<
 *     print("Hello from python", flush=True)
 *     print(task.id)
 */

#line 109 "miniparla/runtime.pyx"
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9miniparla_7runtime_1hello, NULL, __pyx_n_s_miniparla_runtime); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)

#line 109 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 109 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hello, __pyx_t_2) < 0) __PYX_ERR(0, 109, __pyx_L1_error)

#line 109 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":137
 * 
 * 
 * class WorkerThreadException(RuntimeError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 137 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__23); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)

#line 137 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 137 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_tuple__23, __pyx_n_s_WorkerThreadException, __pyx_n_s_WorkerThreadException, (PyObject *) NULL, __pyx_n_s_miniparla_runtime, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)

#line 137 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 137 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_WorkerThreadException, __pyx_tuple__23, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)

#line 137 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 137 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WorkerThreadException, __pyx_t_3) < 0) __PYX_ERR(0, 137, __pyx_L1_error)

#line 137 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 137 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 137 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":140
 *     pass
 * 
 * class TaskID:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, name, id):
 */

#line 140 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_TaskID, __pyx_n_s_TaskID, (PyObject *) NULL, __pyx_n_s_miniparla_runtime, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)

#line 140 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

  /* "miniparla/runtime.pyx":142
 * class TaskID:
 * 
 *     def __init__(self, name, id):             # <<<<<<<<<<<<<<
 *         self._name = name
 *         self._id = id
 */

#line 142 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_6TaskID_1__init__, 0, __pyx_n_s_TaskID___init, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)

#line 142 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 142 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 142, __pyx_L1_error)

#line 142 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":148
 * 
 *     @property
 *     def task(self):             # <<<<<<<<<<<<<<
 *         if not self._task:
 *             return None
 */

#line 148 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_6TaskID_3task, 0, __pyx_n_s_TaskID_task, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)

#line 148 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

  /* "miniparla/runtime.pyx":147
 *         self._task = None
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def task(self):
 *         if not self._task:
 */

#line 147 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)

#line 147 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 147 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 147 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_task_2, __pyx_t_3) < 0) __PYX_ERR(0, 148, __pyx_L1_error)

#line 147 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "miniparla/runtime.pyx":154
 * 
 *     @property
 *     def inner_task(self):             # <<<<<<<<<<<<<<
 *         if not self._task:
 *             return None
 */

#line 154 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_6TaskID_5inner_task, 0, __pyx_n_s_TaskID_inner_task, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)

#line 154 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

  /* "miniparla/runtime.pyx":153
 *         return self._task
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inner_task(self):
 *         if not self._task:
 */

#line 153 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)

#line 153 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 153 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 153 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_inner_task, __pyx_t_1) < 0) __PYX_ERR(0, 154, __pyx_L1_error)

#line 153 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":159
 *         return self._task.inner_task
 * 
 *     @task.setter             # <<<<<<<<<<<<<<
 *     def task(self, v):
 *         assert not self._task
 */

#line 159 "miniparla/runtime.pyx"
  __pyx_t_3 = PyObject_GetItem(__pyx_t_2, __pyx_n_s_task_2);

#line 159 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_3)) {

#line 159 "miniparla/runtime.pyx"
    PyErr_Clear();

#line 159 "miniparla/runtime.pyx"
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_task_2);

#line 159 "miniparla/runtime.pyx"
  }

#line 159 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)

#line 159 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 159 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_setter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)

#line 159 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 159 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "miniparla/runtime.pyx":160
 * 
 *     @task.setter
 *     def task(self, v):             # <<<<<<<<<<<<<<
 *         assert not self._task
 *         self._task = v
 */

#line 160 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_6TaskID_7task, 0, __pyx_n_s_TaskID_task, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)

#line 160 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 160 "miniparla/runtime.pyx"
  __pyx_t_5 = NULL;

#line 160 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 160 "miniparla/runtime.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 160 "miniparla/runtime.pyx"
    if (likely(__pyx_t_5)) {

#line 160 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 160 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 160 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 160 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 160 "miniparla/runtime.pyx"
    }

#line 160 "miniparla/runtime.pyx"
  }

#line 160 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);

#line 160 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 160 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 160 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)

#line 160 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 160 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 160 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_task_2, __pyx_t_1) < 0) __PYX_ERR(0, 160, __pyx_L1_error)

#line 160 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":165
 * 
 *     @property
 *     def id(self):             # <<<<<<<<<<<<<<
 *         return self._id
 * 
 */

#line 165 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_6TaskID_9id, 0, __pyx_n_s_TaskID_id, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)

#line 165 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

  /* "miniparla/runtime.pyx":164
 *         self._task = v
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def id(self):
 *         return self._id
 */

#line 164 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)

#line 164 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 164 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 164 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_id, __pyx_t_4) < 0) __PYX_ERR(0, 165, __pyx_L1_error)

#line 164 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":169
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self._name
 * 
 */

#line 169 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_6TaskID_11name, 0, __pyx_n_s_TaskID_name, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 169, __pyx_L1_error)

#line 169 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

  /* "miniparla/runtime.pyx":168
 *         return self._id
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self):
 *         return self._name
 */

#line 168 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)

#line 168 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 168 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 168 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_name, __pyx_t_1) < 0) __PYX_ERR(0, 169, __pyx_L1_error)

#line 168 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":173
 * 
 *     @property
 *     def full_name(self):             # <<<<<<<<<<<<<<
 *         return "_".join(str(i) for i in (self._name, *self._id))
 * 
 */

#line 173 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_6TaskID_13full_name, 0, __pyx_n_s_TaskID_full_name, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)

#line 173 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

  /* "miniparla/runtime.pyx":172
 *         return self._name
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def full_name(self):
 *         return "_".join(str(i) for i in (self._name, *self._id))
 */

#line 172 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 172, __pyx_L1_error)

#line 172 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 172 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 172 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_full_name, __pyx_t_4) < 0) __PYX_ERR(0, 173, __pyx_L1_error)

#line 172 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":177
 * 
 *     @property
 *     def dependencies(self):             # <<<<<<<<<<<<<<
 *         return self._dependencies
 * 
 */

#line 177 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_6TaskID_15dependencies, 0, __pyx_n_s_TaskID_dependencies, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)

#line 177 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

  /* "miniparla/runtime.pyx":176
 *         return "_".join(str(i) for i in (self._name, *self._id))
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def dependencies(self):
 *         return self._dependencies
 */

#line 176 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)

#line 176 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 176 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 176 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_dependencies_2, __pyx_t_1) < 0) __PYX_ERR(0, 177, __pyx_L1_error)

#line 176 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":180
 *         return self._dependencies
 * 
 *     @dependencies.setter             # <<<<<<<<<<<<<<
 *     def dependencies(self, v):
 *         self._dependencies = v
 */

#line 180 "miniparla/runtime.pyx"
  __pyx_t_4 = PyObject_GetItem(__pyx_t_2, __pyx_n_s_dependencies_2);

#line 180 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_4)) {

#line 180 "miniparla/runtime.pyx"
    PyErr_Clear();

#line 180 "miniparla/runtime.pyx"
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_dependencies_2);

#line 180 "miniparla/runtime.pyx"
  }

#line 180 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)

#line 180 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 180 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_setter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)

#line 180 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 180 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":181
 * 
 *     @dependencies.setter
 *     def dependencies(self, v):             # <<<<<<<<<<<<<<
 *         self._dependencies = v
 * 
 */

#line 181 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_6TaskID_17dependencies, 0, __pyx_n_s_TaskID_dependencies, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)

#line 181 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 181 "miniparla/runtime.pyx"
  __pyx_t_5 = NULL;

#line 181 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 181 "miniparla/runtime.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 181 "miniparla/runtime.pyx"
    if (likely(__pyx_t_5)) {

#line 181 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 181 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 181 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 181 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 181 "miniparla/runtime.pyx"
    }

#line 181 "miniparla/runtime.pyx"
  }

#line 181 "miniparla/runtime.pyx"
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);

#line 181 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 181 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 181 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)

#line 181 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 181 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 181 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_dependencies_2, __pyx_t_1) < 0) __PYX_ERR(0, 181, __pyx_L1_error)

#line 181 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":184
 *         self._dependencies = v
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return hash(self.full_name)
 * 
 */

#line 184 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_6TaskID_19__hash__, 0, __pyx_n_s_TaskID___hash, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)

#line 184 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 184 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_hash, __pyx_t_1) < 0) __PYX_ERR(0, 184, __pyx_L1_error)

#line 184 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":187
 *         return hash(self.full_name)
 * 
 *     def __await__(self):             # <<<<<<<<<<<<<<
 *         return (yield TaskAwaitTasks([self.task], self.task))
 * 
 */

#line 187 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_6TaskID_21__await__, 0, __pyx_n_s_TaskID___await, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)

#line 187 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 187 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_await, __pyx_t_1) < 0) __PYX_ERR(0, 187, __pyx_L1_error)

#line 187 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":140
 *     pass
 * 
 * class TaskID:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, name, id):
 */

#line 140 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_TaskID, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)

#line 140 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 140 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TaskID, __pyx_t_1) < 0) __PYX_ERR(0, 140, __pyx_L1_error)

#line 140 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 140 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":249
 *         del self.task
 * 
 * class Task:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, func, args, dependencies, taskid, req, name):
 */

#line 249 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Task, __pyx_n_s_Task, (PyObject *) NULL, __pyx_n_s_miniparla_runtime, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)

#line 249 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

  /* "miniparla/runtime.pyx":251
 * class Task:
 * 
 *     def __init__(self, func, args, dependencies, taskid, req, name):             # <<<<<<<<<<<<<<
 *         self._mutex = threading.Lock()
 * 
 */

#line 251 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_1__init__, 0, __pyx_n_s_Task___init, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)

#line 251 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 251 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 251, __pyx_L1_error)

#line 251 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":280
 * 
 *     @property
 *     def req(self):             # <<<<<<<<<<<<<<
 *         return self._req
 * 
 */

#line 280 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_3req, 0, __pyx_n_s_Task_req, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)

#line 280 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

  /* "miniparla/runtime.pyx":279
 *                 self.context.scheduler.enqueue_task(self)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def req(self):
 *         return self._req
 */

#line 279 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 279, __pyx_L1_error)

#line 279 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 279 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 279 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_req, __pyx_t_3) < 0) __PYX_ERR(0, 280, __pyx_L1_error)

#line 279 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "miniparla/runtime.pyx":283
 *         return self._req
 * 
 *     def _execute_task(self):             # <<<<<<<<<<<<<<
 *         return self._state.func(self, *self._state.args)
 * 
 */

#line 283 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_5_execute_task, 0, __pyx_n_s_Task__execute_task, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 283, __pyx_L1_error)

#line 283 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 283 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_execute_task, __pyx_t_3) < 0) __PYX_ERR(0, 283, __pyx_L1_error)

#line 283 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "miniparla/runtime.pyx":287
 * 
 *     @property
 *     def task(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

#line 287 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_7task, 0, __pyx_n_s_Task_task, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)

#line 287 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

  /* "miniparla/runtime.pyx":286
 *         return self._state.func(self, *self._state.args)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def task(self):
 *         return self
 */

#line 286 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)

#line 286 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 286 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 286 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_task_2, __pyx_t_1) < 0) __PYX_ERR(0, 287, __pyx_L1_error)

#line 286 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":290
 *         return self
 * 
 *     def _finish(self, ctx):             # <<<<<<<<<<<<<<
 *         #ctx.remove_vcus(self.req.vcus)
 *         pass
 */

#line 290 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_9_finish, 0, __pyx_n_s_Task__finish, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)

#line 290 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 290 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_finish, __pyx_t_1) < 0) __PYX_ERR(0, 290, __pyx_L1_error)

#line 290 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":294
 *         pass
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         #print("Running task", self._name, self.id, flush=True)
 * 
 */

#line 294 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_11run, 0, __pyx_n_s_Task_run, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)

#line 294 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 294 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_run, __pyx_t_1) < 0) __PYX_ERR(0, 294, __pyx_L1_error)

#line 294 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":320
 *             raise e
 * 
 *     def _cleanup(self):             # <<<<<<<<<<<<<<
 *         self._func = None
 *         self._args = None
 */

#line 320 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_13_cleanup, 0, __pyx_n_s_Task__cleanup, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)

#line 320 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 320 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_cleanup, __pyx_t_1) < 0) __PYX_ERR(0, 320, __pyx_L1_error)

#line 320 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":325
 * 
 *     #@profile
 *     def _set_state(self, new_state, ctx):             # <<<<<<<<<<<<<<
 *         #print("Setting state", new_state, flush=True)
 *         self._state = new_state
 */

#line 325 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_15_set_state, 0, __pyx_n_s_Task__set_state, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)

#line 325 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 325 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_set_state, __pyx_t_1) < 0) __PYX_ERR(0, 325, __pyx_L1_error)

#line 325 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":360
 * 
 * 
 *     def __await__(self):             # <<<<<<<<<<<<<<
 *         return (yield TaskAwaitTasks([self], self))
 * 
 */

#line 360 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_17__await__, 0, __pyx_n_s_Task___await, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)

#line 360 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 360 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_await, __pyx_t_1) < 0) __PYX_ERR(0, 360, __pyx_L1_error)

#line 360 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":363
 *         return (yield TaskAwaitTasks([self], self))
 * 
 *     def _notify_dependents(self, scheduler):             # <<<<<<<<<<<<<<
 *         self.inner_task.notify_dependents(scheduler)
 * 
 */

#line 363 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_20_notify_dependents, 0, __pyx_n_s_Task__notify_dependents, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)

#line 363 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 363 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_notify_dependents_2, __pyx_t_1) < 0) __PYX_ERR(0, 363, __pyx_L1_error)

#line 363 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":366
 *         self.inner_task.notify_dependents(scheduler)
 * 
 *     def _add_dependency(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_task.add_dependency(task)
 * 
 */

#line 366 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_22_add_dependency, 0, __pyx_n_s_Task__add_dependency, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)

#line 366 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 366 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_add_dependency_2, __pyx_t_1) < 0) __PYX_ERR(0, 366, __pyx_L1_error)

#line 366 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":369
 *         self.inner_task.add_dependency(task)
 * 
 *     def blocked(self):             # <<<<<<<<<<<<<<
 *         return self.inner_task.blocked()
 * 
 */

#line 369 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_24blocked, 0, __pyx_n_s_Task_blocked, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)

#line 369 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 369 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_blocked, __pyx_t_1) < 0) __PYX_ERR(0, 369, __pyx_L1_error)

#line 369 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":372
 *         return self.inner_task.blocked()
 * 
 *     def blocked_unsafe(self):             # <<<<<<<<<<<<<<
 *         return self.inner_task.blocked_unsafe()
 * 
 */

#line 372 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_26blocked_unsafe, 0, __pyx_n_s_Task_blocked_unsafe, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)

#line 372 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 372 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_blocked_unsafe, __pyx_t_1) < 0) __PYX_ERR(0, 372, __pyx_L1_error)

#line 372 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":375
 *         return self.inner_task.blocked_unsafe()
 * 
 *     def set_dependencies(self, v):             # <<<<<<<<<<<<<<
 *         #print("Setting dependencies of", self._taskid, flush=True)
 *         self.inner_task.set_dependencies(v)
 */

#line 375 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_4Task_28set_dependencies, 0, __pyx_n_s_Task_set_dependencies, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)

#line 375 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 375 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_set_dependencies, __pyx_t_1) < 0) __PYX_ERR(0, 375, __pyx_L1_error)

#line 375 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":249
 *         del self.task
 * 
 * class Task:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, func, args, dependencies, taskid, req, name):
 */

#line 249 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Task, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)

#line 249 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 249 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Task, __pyx_t_1) < 0) __PYX_ERR(0, 249, __pyx_L1_error)

#line 249 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 249 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":380
 * 
 * 
 * class _TaskLocals(threading.local):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         super(_TaskLocals, self).__init__()
 */

#line 380 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_threading); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)

#line 380 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 380 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_local); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)

#line 380 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 380 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 380 "miniparla/runtime.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)

#line 380 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 380 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 380 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 380 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 380 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)

#line 380 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 380 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_TaskLocals, __pyx_n_s_TaskLocals, (PyObject *) NULL, __pyx_n_s_miniparla_runtime, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)

#line 380 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

  /* "miniparla/runtime.pyx":381
 * 
 * class _TaskLocals(threading.local):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(_TaskLocals, self).__init__()
 *         self.task_scopes = []
 */

#line 381 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_11_TaskLocals_1__init__, 0, __pyx_n_s_TaskLocals___init, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 381, __pyx_L1_error)

#line 381 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 381 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 381, __pyx_L1_error)

#line 381 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":386
 * 
 *     @property
 *     def ctx(self):             # <<<<<<<<<<<<<<
 *         return getattr(self, "_ctx", None)
 * 
 */

#line 386 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_11_TaskLocals_3ctx, 0, __pyx_n_s_TaskLocals_ctx, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 386, __pyx_L1_error)

#line 386 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

  /* "miniparla/runtime.pyx":385
 *         self.task_scopes = []
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ctx(self):
 *         return getattr(self, "_ctx", None)
 */

#line 385 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 385, __pyx_L1_error)

#line 385 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 385 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 385 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ctx, __pyx_t_5) < 0) __PYX_ERR(0, 386, __pyx_L1_error)

#line 385 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "miniparla/runtime.pyx":389
 *         return getattr(self, "_ctx", None)
 * 
 *     @ctx.setter             # <<<<<<<<<<<<<<
 *     def ctx(self, v):
 *         self._ctx = v
 */

#line 389 "miniparla/runtime.pyx"
  __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_ctx);

#line 389 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_4)) {

#line 389 "miniparla/runtime.pyx"
    PyErr_Clear();

#line 389 "miniparla/runtime.pyx"
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctx);

#line 389 "miniparla/runtime.pyx"
  }

#line 389 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 389, __pyx_L1_error)

#line 389 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 389 "miniparla/runtime.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_setter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 389, __pyx_L1_error)

#line 389 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 389 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":390
 * 
 *     @ctx.setter
 *     def ctx(self, v):             # <<<<<<<<<<<<<<
 *         self._ctx = v
 * 
 */

#line 390 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_11_TaskLocals_5ctx, 0, __pyx_n_s_TaskLocals_ctx, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 390, __pyx_L1_error)

#line 390 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 390 "miniparla/runtime.pyx"
  __pyx_t_7 = NULL;

#line 390 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 390 "miniparla/runtime.pyx"
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);

#line 390 "miniparla/runtime.pyx"
    if (likely(__pyx_t_7)) {

#line 390 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 390 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_7);

#line 390 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 390 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 390 "miniparla/runtime.pyx"
    }

#line 390 "miniparla/runtime.pyx"
  }

#line 390 "miniparla/runtime.pyx"
  __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);

#line 390 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 390 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 390 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 389, __pyx_L1_error)

#line 390 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 390 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 390 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ctx, __pyx_t_5) < 0) __PYX_ERR(0, 390, __pyx_L1_error)

#line 390 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "miniparla/runtime.pyx":394
 * 
 *     @property
 *     def global_tasks(self):             # <<<<<<<<<<<<<<
 *         return getattr(self, "_global_tasks", [])
 * 
 */

#line 394 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_11_TaskLocals_7global_tasks, 0, __pyx_n_s_TaskLocals_global_tasks, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 394, __pyx_L1_error)

#line 394 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

  /* "miniparla/runtime.pyx":393
 *         self._ctx = v
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def global_tasks(self):
 *         return getattr(self, "_global_tasks", [])
 */

#line 393 "miniparla/runtime.pyx"
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 393, __pyx_L1_error)

#line 393 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 393 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 393 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_global_tasks_2, __pyx_t_6) < 0) __PYX_ERR(0, 394, __pyx_L1_error)

#line 393 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "miniparla/runtime.pyx":397
 *         return getattr(self, "_global_tasks", [])
 * 
 *     @global_tasks.setter             # <<<<<<<<<<<<<<
 *     def global_tasks(self, v):
 *         self._global_tasks = v
 */

#line 397 "miniparla/runtime.pyx"
  __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_global_tasks_2);

#line 397 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_5)) {

#line 397 "miniparla/runtime.pyx"
    PyErr_Clear();

#line 397 "miniparla/runtime.pyx"
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_global_tasks_2);

#line 397 "miniparla/runtime.pyx"
  }

#line 397 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 397, __pyx_L1_error)

#line 397 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 397 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_setter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 397, __pyx_L1_error)

#line 397 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 397 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "miniparla/runtime.pyx":398
 * 
 *     @global_tasks.setter
 *     def global_tasks(self, v):             # <<<<<<<<<<<<<<
 *         self._global_tasks = v
 * 
 */

#line 398 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_11_TaskLocals_9global_tasks, 0, __pyx_n_s_TaskLocals_global_tasks, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 398, __pyx_L1_error)

#line 398 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 398 "miniparla/runtime.pyx"
  __pyx_t_7 = NULL;

#line 398 "miniparla/runtime.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 398 "miniparla/runtime.pyx"
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);

#line 398 "miniparla/runtime.pyx"
    if (likely(__pyx_t_7)) {

#line 398 "miniparla/runtime.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 398 "miniparla/runtime.pyx"
      __Pyx_INCREF(__pyx_t_7);

#line 398 "miniparla/runtime.pyx"
      __Pyx_INCREF(function);

#line 398 "miniparla/runtime.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 398 "miniparla/runtime.pyx"
    }

#line 398 "miniparla/runtime.pyx"
  }

#line 398 "miniparla/runtime.pyx"
  __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);

#line 398 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 398 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 398 "miniparla/runtime.pyx"
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 397, __pyx_L1_error)

#line 398 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 398 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 398 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_global_tasks_2, __pyx_t_6) < 0) __PYX_ERR(0, 398, __pyx_L1_error)

#line 398 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "miniparla/runtime.pyx":380
 * 
 * 
 * class _TaskLocals(threading.local):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         super(_TaskLocals, self).__init__()
 */

#line 380 "miniparla/runtime.pyx"
  __pyx_t_6 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_TaskLocals, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 380, __pyx_L1_error)

#line 380 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 380 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TaskLocals, __pyx_t_6) < 0) __PYX_ERR(0, 380, __pyx_L1_error)

#line 380 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 380 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 380 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 380 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":402
 * 
 * 
 * task_locals = _TaskLocals()             # <<<<<<<<<<<<<<
 * 
 * class SchedulerContext:
 */

#line 402 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TaskLocals); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)

#line 402 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 402 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)

#line 402 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 402 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 402 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_task_locals, __pyx_t_1) < 0) __PYX_ERR(0, 402, __pyx_L1_error)

#line 402 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":404
 * task_locals = _TaskLocals()
 * 
 * class SchedulerContext:             # <<<<<<<<<<<<<<
 * 
 *     def spawn_task(self, function, args, dependencies, taskid, req, name):
 */

#line 404 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_SchedulerContext, __pyx_n_s_SchedulerContext, (PyObject *) NULL, __pyx_n_s_miniparla_runtime, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)

#line 404 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

  /* "miniparla/runtime.pyx":406
 * class SchedulerContext:
 * 
 *     def spawn_task(self, function, args, dependencies, taskid, req, name):             # <<<<<<<<<<<<<<
 *         return Task(function, args, dependencies=dependencies, taskid=taskid, req=req, name=name)
 * 
 */

#line 406 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_16SchedulerContext_1spawn_task, 0, __pyx_n_s_SchedulerContext_spawn_task, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)

#line 406 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 406 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_spawn_task, __pyx_t_2) < 0) __PYX_ERR(0, 406, __pyx_L1_error)

#line 406 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":409
 *         return Task(function, args, dependencies=dependencies, taskid=taskid, req=req, name=name)
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         #print("INNER")
 *         _scheduler_locals._scheduler_context_stack.append(self)
 */

#line 409 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_16SchedulerContext_3__enter__, 0, __pyx_n_s_SchedulerContext___enter, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 409, __pyx_L1_error)

#line 409 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 409 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_enter, __pyx_t_2) < 0) __PYX_ERR(0, 409, __pyx_L1_error)

#line 409 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":414
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         _scheduler_locals._scheduler_context_stack.pop()
 * 
 */

#line 414 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_16SchedulerContext_5__exit__, 0, __pyx_n_s_SchedulerContext___exit, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)

#line 414 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 414 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_exit, __pyx_t_2) < 0) __PYX_ERR(0, 414, __pyx_L1_error)

#line 414 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":404
 * task_locals = _TaskLocals()
 * 
 * class SchedulerContext:             # <<<<<<<<<<<<<<
 * 
 *     def spawn_task(self, function, args, dependencies, taskid, req, name):
 */

#line 404 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_SchedulerContext, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)

#line 404 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 404 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SchedulerContext, __pyx_t_2) < 0) __PYX_ERR(0, 404, __pyx_L1_error)

#line 404 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 404 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":418
 * 
 * 
 * class _SchedulerLocals(threading.local):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         super(_SchedulerLocals, self).__init__()
 */

#line 418 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_threading); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)

#line 418 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 418 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_local); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 418, __pyx_L1_error)

#line 418 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 418 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 418 "miniparla/runtime.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)

#line 418 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 418 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 418 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 418 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 418 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 418, __pyx_L1_error)

#line 418 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 418 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_SchedulerLocals, __pyx_n_s_SchedulerLocals, (PyObject *) NULL, __pyx_n_s_miniparla_runtime, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 418, __pyx_L1_error)

#line 418 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

  /* "miniparla/runtime.pyx":419
 * 
 * class _SchedulerLocals(threading.local):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(_SchedulerLocals, self).__init__()
 *         self._scheduler_context_stack = []
 */

#line 419 "miniparla/runtime.pyx"
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_16_SchedulerLocals_1__init__, 0, __pyx_n_s_SchedulerLocals___init, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 419, __pyx_L1_error)

#line 419 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 419 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_6) < 0) __PYX_ERR(0, 419, __pyx_L1_error)

#line 419 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "miniparla/runtime.pyx":424
 * 
 *     @property
 *     def scheduler_context(self):             # <<<<<<<<<<<<<<
 *         if self._scheduler_context_stack:
 *             return self._scheduler_context_stack[-1]
 */

#line 424 "miniparla/runtime.pyx"
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_16_SchedulerLocals_3scheduler_context, 0, __pyx_n_s_SchedulerLocals_scheduler_conte, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 424, __pyx_L1_error)

#line 424 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

  /* "miniparla/runtime.pyx":423
 *         self._scheduler_context_stack = []
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def scheduler_context(self):
 *         if self._scheduler_context_stack:
 */

#line 423 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 423, __pyx_L1_error)

#line 423 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 423 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 423 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scheduler_context, __pyx_t_4) < 0) __PYX_ERR(0, 424, __pyx_L1_error)

#line 423 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":418
 * 
 * 
 * class _SchedulerLocals(threading.local):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         super(_SchedulerLocals, self).__init__()
 */

#line 418 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_SchedulerLocals, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 418, __pyx_L1_error)

#line 418 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 418 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SchedulerLocals, __pyx_t_4) < 0) __PYX_ERR(0, 418, __pyx_L1_error)

#line 418 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 418 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 418 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 418 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":431
 * 
 * 
 * _scheduler_locals = _SchedulerLocals()             # <<<<<<<<<<<<<<
 * 
 * def get_scheduler_context():
 */

#line 431 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_SchedulerLocals); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)

#line 431 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 431 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)

#line 431 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 431 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 431 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_scheduler_locals, __pyx_t_2) < 0) __PYX_ERR(0, 431, __pyx_L1_error)

#line 431 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":433
 * _scheduler_locals = _SchedulerLocals()
 * 
 * def get_scheduler_context():             # <<<<<<<<<<<<<<
 *     return _scheduler_locals.scheduler_context
 * 
 */

#line 433 "miniparla/runtime.pyx"
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9miniparla_7runtime_3get_scheduler_context, NULL, __pyx_n_s_miniparla_runtime); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)

#line 433 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 433 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_scheduler_context, __pyx_t_2) < 0) __PYX_ERR(0, 433, __pyx_L1_error)

#line 433 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":436
 *     return _scheduler_locals.scheduler_context
 * 
 * class ControllableThread(threading.Thread):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 436 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_threading); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)

#line 436 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 436 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Thread); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)

#line 436 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 436 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 436 "miniparla/runtime.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)

#line 436 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 436 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 436 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 436 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 436 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)

#line 436 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 436 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_ControllableThread, __pyx_n_s_ControllableThread, (PyObject *) NULL, __pyx_n_s_miniparla_runtime, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)

#line 436 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 436 "miniparla/runtime.pyx"
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 436, __pyx_L1_error)

#line 436 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

  /* "miniparla/runtime.pyx":438
 * class ControllableThread(threading.Thread):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._should_run = True
 */

#line 438 "miniparla/runtime.pyx"
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_18ControllableThread_1__init__, 0, __pyx_n_s_ControllableThread___init, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 438, __pyx_L1_error)

#line 438 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 438 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_6);

#line 438 "miniparla/runtime.pyx"
  PyList_Append(__pyx_t_4, __pyx_t_6);

#line 438 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 438 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_6) < 0) __PYX_ERR(0, 438, __pyx_L1_error)

#line 438 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "miniparla/runtime.pyx":442
 *         self._should_run = True
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         with self._monitor:
 *             self._should_run = False
 */

#line 442 "miniparla/runtime.pyx"
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_18ControllableThread_3stop, 0, __pyx_n_s_ControllableThread_stop, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 442, __pyx_L1_error)

#line 442 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 442 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_stop, __pyx_t_6) < 0) __PYX_ERR(0, 442, __pyx_L1_error)

#line 442 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "miniparla/runtime.pyx":447
 *             self._monitor.notify_all()
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 447 "miniparla/runtime.pyx"
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_18ControllableThread_5run, 0, __pyx_n_s_ControllableThread_run, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 447, __pyx_L1_error)

#line 447 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 447 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_run, __pyx_t_6) < 0) __PYX_ERR(0, 447, __pyx_L1_error)

#line 447 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "miniparla/runtime.pyx":436
 *     return _scheduler_locals.scheduler_context
 * 
 * class ControllableThread(threading.Thread):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 436 "miniparla/runtime.pyx"
  __pyx_t_6 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_ControllableThread, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 436, __pyx_L1_error)

#line 436 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 436 "miniparla/runtime.pyx"
  if (__Pyx_CyFunction_InitClassCell(__pyx_t_4, __pyx_t_6) < 0) __PYX_ERR(0, 436, __pyx_L1_error)

#line 436 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 436 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ControllableThread, __pyx_t_6) < 0) __PYX_ERR(0, 436, __pyx_L1_error)

#line 436 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 436 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 436 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 436 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":457
 *         print("Created Inner Worker", flush=True)
 * 
 * class WorkerThread(ControllableThread, SchedulerContext):             # <<<<<<<<<<<<<<
 *     def __init__(self, scheduler, index):
 *         super().__init__()
 */

#line 457 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ControllableThread); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 457, __pyx_L1_error)

#line 457 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 457 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_SchedulerContext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 457, __pyx_L1_error)

#line 457 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 457 "miniparla/runtime.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)

#line 457 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 457 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 457 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 457 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 457 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 457 "miniparla/runtime.pyx"
  __pyx_t_2 = 0;

#line 457 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 457 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 457, __pyx_L1_error)

#line 457 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 457 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_3, __pyx_n_s_WorkerThread, __pyx_n_s_WorkerThread, (PyObject *) NULL, __pyx_n_s_miniparla_runtime, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 457, __pyx_L1_error)

#line 457 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 457 "miniparla/runtime.pyx"
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 457, __pyx_L1_error)

#line 457 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

  /* "miniparla/runtime.pyx":458
 * 
 * class WorkerThread(ControllableThread, SchedulerContext):
 *     def __init__(self, scheduler, index):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._scheduler = scheduler
 */

#line 458 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_12WorkerThread_1__init__, 0, __pyx_n_s_WorkerThread___init, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 458, __pyx_L1_error)

#line 458 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 458 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_4);

#line 458 "miniparla/runtime.pyx"
  PyList_Append(__pyx_t_6, __pyx_t_4);

#line 458 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 458 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 458, __pyx_L1_error)

#line 458 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":467
 * 
 *     @property
 *     def scheduler(self):             # <<<<<<<<<<<<<<
 *         return self._scheduler
 * 
 */

#line 467 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_12WorkerThread_3scheduler, 0, __pyx_n_s_WorkerThread_scheduler, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 467, __pyx_L1_error)

#line 467 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

  /* "miniparla/runtime.pyx":466
 *         self.task = None
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def scheduler(self):
 *         return self._scheduler
 */

#line 466 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 466, __pyx_L1_error)

#line 466 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 466 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 466 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_scheduler, __pyx_t_5) < 0) __PYX_ERR(0, 467, __pyx_L1_error)

#line 466 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "miniparla/runtime.pyx":470
 *         return self._scheduler
 * 
 *     def assign_task(self, task):             # <<<<<<<<<<<<<<
 *         #print("Trying to assign task", flush=True)
 *         with self._monitor:
 */

#line 470 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_12WorkerThread_5assign_task, 0, __pyx_n_s_WorkerThread_assign_task, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 470, __pyx_L1_error)

#line 470 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 470 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_assign_task, __pyx_t_5) < 0) __PYX_ERR(0, 470, __pyx_L1_error)

#line 470 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "miniparla/runtime.pyx":481
 *             self._monitor.notify()
 * 
 *     def _remove_task(self):             # <<<<<<<<<<<<<<
 *         with self._monitor:
 *             if not self.task:
 */

#line 481 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_12WorkerThread_7_remove_task, 0, __pyx_n_s_WorkerThread__remove_task, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 481, __pyx_L1_error)

#line 481 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 481 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_remove_task, __pyx_t_5) < 0) __PYX_ERR(0, 481, __pyx_L1_error)

#line 481 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "miniparla/runtime.pyx":489
 *             self.task = None
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         try:
 * 
 */

#line 489 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_12WorkerThread_9run, 0, __pyx_n_s_WorkerThread_run, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 489, __pyx_L1_error)

#line 489 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 489 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_run, __pyx_t_5) < 0) __PYX_ERR(0, 489, __pyx_L1_error)

#line 489 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "miniparla/runtime.pyx":518
 *             raise e
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         super().stop()
 *         #print("Stopping Thread", self.index, flush=True)
 */

#line 518 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_12WorkerThread_11stop, 0, __pyx_n_s_WorkerThread_stop, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 518, __pyx_L1_error)

#line 518 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 518 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_5);

#line 518 "miniparla/runtime.pyx"
  PyList_Append(__pyx_t_6, __pyx_t_5);

#line 518 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 518 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_stop, __pyx_t_5) < 0) __PYX_ERR(0, 518, __pyx_L1_error)

#line 518 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "miniparla/runtime.pyx":457
 *         print("Created Inner Worker", flush=True)
 * 
 * class WorkerThread(ControllableThread, SchedulerContext):             # <<<<<<<<<<<<<<
 *     def __init__(self, scheduler, index):
 *         super().__init__()
 */

#line 457 "miniparla/runtime.pyx"
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_WorkerThread, __pyx_t_3, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 457, __pyx_L1_error)

#line 457 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 457 "miniparla/runtime.pyx"
  if (__Pyx_CyFunction_InitClassCell(__pyx_t_6, __pyx_t_5) < 0) __PYX_ERR(0, 457, __pyx_L1_error)

#line 457 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 457 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WorkerThread, __pyx_t_5) < 0) __PYX_ERR(0, 457, __pyx_L1_error)

#line 457 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 457 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 457 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 457 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "miniparla/runtime.pyx":523
 * 
 * 
 * class TaskDict:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 523 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_TaskDict, __pyx_n_s_TaskDict, (PyObject *) NULL, __pyx_n_s_miniparla_runtime, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L1_error)

#line 523 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

  /* "miniparla/runtime.pyx":525
 * class TaskDict:
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.__dict = {}
 */

#line 525 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_8TaskDict_1__init__, 0, __pyx_n_s_TaskDict___init, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)

#line 525 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 525 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 525, __pyx_L1_error)

#line 525 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":530
 *         self.__mutex = threading.Condition(threading.Lock())
 * 
 *     def add(self, task):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             self.__dict[task.id] = task
 */

#line 530 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_8TaskDict_3add, 0, __pyx_n_s_TaskDict_add, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)

#line 530 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 530 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_add, __pyx_t_1) < 0) __PYX_ERR(0, 530, __pyx_L1_error)

#line 530 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":534
 *             self.__dict[task.id] = task
 * 
 *     def get(self, task_inner):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             return self.__dict.get(task_inner.id, None)
 */

#line 534 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_8TaskDict_5get, 0, __pyx_n_s_TaskDict_get, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)

#line 534 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 534 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_get, __pyx_t_1) < 0) __PYX_ERR(0, 534, __pyx_L1_error)

#line 534 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":538
 *             return self.__dict.get(task_inner.id, None)
 * 
 *     def remove(self, task):             # <<<<<<<<<<<<<<
 *         with self.__mutex:
 *             del self.__dict[task.id]
 */

#line 538 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_8TaskDict_7remove, 0, __pyx_n_s_TaskDict_remove, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)

#line 538 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 538 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_remove, __pyx_t_1) < 0) __PYX_ERR(0, 538, __pyx_L1_error)

#line 538 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":523
 * 
 * 
 * class TaskDict:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 523 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_TaskDict, __pyx_empty_tuple, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)

#line 523 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 523 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TaskDict, __pyx_t_1) < 0) __PYX_ERR(0, 523, __pyx_L1_error)

#line 523 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 523 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "miniparla/runtime.pyx":690
 * 
 * 
 * class Scheduler(ControllableThread, SchedulerContext):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, n_threads=8, period=0.001):
 */

#line 690 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ControllableThread); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 690 "miniparla/runtime.pyx"
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_SchedulerContext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 690 "miniparla/runtime.pyx"
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 690 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 690 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 690 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 690 "miniparla/runtime.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);

#line 690 "miniparla/runtime.pyx"
  __pyx_t_3 = 0;

#line 690 "miniparla/runtime.pyx"
  __pyx_t_1 = 0;

#line 690 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 690 "miniparla/runtime.pyx"
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_Scheduler, __pyx_n_s_Scheduler, (PyObject *) NULL, __pyx_n_s_miniparla_runtime, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 690 "miniparla/runtime.pyx"
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_5);

  /* "miniparla/runtime.pyx":692
 * class Scheduler(ControllableThread, SchedulerContext):
 * 
 *     def __init__(self, n_threads=8, period=0.001):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._monitor = threading.Condition(threading.Lock())
 */

#line 692 "miniparla/runtime.pyx"
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_1__init__, 0, __pyx_n_s_Scheduler___init, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__120)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 692, __pyx_L1_error)

#line 692 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 692 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_6);

#line 692 "miniparla/runtime.pyx"
  PyList_Append(__pyx_t_5, __pyx_t_6);

#line 692 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 692 "miniparla/runtime.pyx"
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_tuple__121);

#line 692 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_6) < 0) __PYX_ERR(0, 692, __pyx_L1_error)

#line 692 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "miniparla/runtime.pyx":718
 * 
 *     @property
 *     def scheduler(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

#line 718 "miniparla/runtime.pyx"
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_3scheduler, 0, __pyx_n_s_Scheduler_scheduler, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 718, __pyx_L1_error)

#line 718 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_6);

  /* "miniparla/runtime.pyx":717
 * 
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def scheduler(self):
 *         return self
 */

#line 717 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 717, __pyx_L1_error)

#line 717 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 717 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 717 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scheduler, __pyx_t_4) < 0) __PYX_ERR(0, 718, __pyx_L1_error)

#line 717 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":721
 *         return self
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         if self.get_active_tasks() != 1:
 *             raise Exception("Scheduler context can only be entered once")
 */

#line 721 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_5__enter__, 0, __pyx_n_s_Scheduler___enter, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 721, __pyx_L1_error)

#line 721 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 721 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_4);

#line 721 "miniparla/runtime.pyx"
  PyList_Append(__pyx_t_5, __pyx_t_4);

#line 721 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 721 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_enter, __pyx_t_4) < 0) __PYX_ERR(0, 721, __pyx_L1_error)

#line 721 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":728
 * 
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         super().__exit__(exc_type, exc_val, exc_tb)
 *         self.decr_active_task()
 */

#line 728 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_7__exit__, 0, __pyx_n_s_Scheduler___exit, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 728, __pyx_L1_error)

#line 728 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 728 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_4);

#line 728 "miniparla/runtime.pyx"
  PyList_Append(__pyx_t_5, __pyx_t_4);

#line 728 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 728 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_exit, __pyx_t_4) < 0) __PYX_ERR(0, 728, __pyx_L1_error)

#line 728 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":742
 *                 raise self._exceptions[0]
 * 
 *     def incr_resources(self, vcus):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_resources(vcus)
 * 
 */

#line 742 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_9incr_resources, 0, __pyx_n_s_Scheduler_incr_resources, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 742, __pyx_L1_error)

#line 742 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 742 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_incr_resources, __pyx_t_4) < 0) __PYX_ERR(0, 742, __pyx_L1_error)

#line 742 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":745
 *         self.inner_scheduler.incr_resources(vcus)
 * 
 *     def decr_resources(self, vcus):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_resources(vcus)
 * 
 */

#line 745 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_11decr_resources, 0, __pyx_n_s_Scheduler_decr_resources, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__131)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 745, __pyx_L1_error)

#line 745 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 745 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_decr_resources, __pyx_t_4) < 0) __PYX_ERR(0, 745, __pyx_L1_error)

#line 745 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":748
 *         self.inner_scheduler.decr_resources(vcus)
 * 
 *     def current_resources(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_resources()
 * 
 */

#line 748 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_13current_resources, 0, __pyx_n_s_Scheduler_current_resources, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__133)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 748, __pyx_L1_error)

#line 748 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 748 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_current_resources, __pyx_t_4) < 0) __PYX_ERR(0, 748, __pyx_L1_error)

#line 748 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":751
 *         return self.inner_scheduler.get_resources()
 * 
 *     def incr_active_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_active_tasks()
 * 
 */

#line 751 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_15incr_active_tasks, 0, __pyx_n_s_Scheduler_incr_active_tasks, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 751, __pyx_L1_error)

#line 751 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 751 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_incr_active_tasks, __pyx_t_4) < 0) __PYX_ERR(0, 751, __pyx_L1_error)

#line 751 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":754
 *         self.inner_scheduler.incr_active_tasks()
 * 
 *     def decr_active_task(self):             # <<<<<<<<<<<<<<
 *         done = self.inner_scheduler.decr_active_tasks()
 *         if done:
 */

#line 754 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_17decr_active_task, 0, __pyx_n_s_Scheduler_decr_active_task, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 754, __pyx_L1_error)

#line 754 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 754 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_decr_active_task, __pyx_t_4) < 0) __PYX_ERR(0, 754, __pyx_L1_error)

#line 754 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":759
 *             self.stop()
 * 
 *     def cpp_callback(self, task, worker):             # <<<<<<<<<<<<<<
 *         success = False
 *         worker.assign_task(task)
 */

#line 759 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_19cpp_callback, 0, __pyx_n_s_Scheduler_cpp_callback, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)

#line 759 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 759 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_cpp_callback, __pyx_t_4) < 0) __PYX_ERR(0, 759, __pyx_L1_error)

#line 759 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":765
 *         return success
 * 
 *     def incr_free_threads(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_free_threads()
 * 
 */

#line 765 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_21incr_free_threads, 0, __pyx_n_s_Scheduler_incr_free_threads, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 765, __pyx_L1_error)

#line 765 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 765 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_incr_free_threads, __pyx_t_4) < 0) __PYX_ERR(0, 765, __pyx_L1_error)

#line 765 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":768
 *         self.inner_scheduler.incr_free_threads()
 * 
 *     def decr_free_threads(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_free_threads()
 * 
 */

#line 768 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_23decr_free_threads, 0, __pyx_n_s_Scheduler_decr_free_threads, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__143)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 768, __pyx_L1_error)

#line 768 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 768 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_decr_free_threads, __pyx_t_4) < 0) __PYX_ERR(0, 768, __pyx_L1_error)

#line 768 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":771
 *         self.inner_scheduler.decr_free_threads()
 * 
 *     def get_free_threads(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_free_threads()
 * 
 */

#line 771 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_25get_free_threads, 0, __pyx_n_s_Scheduler_get_free_threads, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__145)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 771, __pyx_L1_error)

#line 771 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 771 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_get_free_threads, __pyx_t_4) < 0) __PYX_ERR(0, 771, __pyx_L1_error)

#line 771 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":774
 *         return self.inner_scheduler.get_free_threads()
 * 
 *     def get_active_tasks(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_active_tasks()
 * 
 */

#line 774 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_27get_active_tasks, 0, __pyx_n_s_Scheduler_get_active_tasks, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__147)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 774, __pyx_L1_error)

#line 774 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 774 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_get_active_tasks, __pyx_t_4) < 0) __PYX_ERR(0, 774, __pyx_L1_error)

#line 774 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":777
 *         return self.inner_scheduler.get_active_tasks()
 * 
 *     def incr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.incr_running_tasks()
 * 
 */

#line 777 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_29incr_running_tasks, 0, __pyx_n_s_Scheduler_incr_running_tasks, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__149)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 777, __pyx_L1_error)

#line 777 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 777 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_incr_running_tasks, __pyx_t_4) < 0) __PYX_ERR(0, 777, __pyx_L1_error)

#line 777 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":780
 *         self.inner_scheduler.incr_running_tasks()
 * 
 *     def decr_running_tasks(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.decr_running_tasks()
 * 
 */

#line 780 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_31decr_running_tasks, 0, __pyx_n_s_Scheduler_decr_running_tasks, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 780, __pyx_L1_error)

#line 780 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 780 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_decr_running_tasks, __pyx_t_4) < 0) __PYX_ERR(0, 780, __pyx_L1_error)

#line 780 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":783
 *         self.inner_scheduler.decr_running_tasks()
 * 
 *     def get_running_tasks(self):             # <<<<<<<<<<<<<<
 *         return self.inner_scheduler.get_running_tasks()
 * 
 */

#line 783 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_33get_running_tasks, 0, __pyx_n_s_Scheduler_get_running_tasks, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__153)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 783, __pyx_L1_error)

#line 783 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 783 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_get_running_tasks, __pyx_t_4) < 0) __PYX_ERR(0, 783, __pyx_L1_error)

#line 783 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":786
 *         return self.inner_scheduler.get_running_tasks()
 * 
 *     def enqueue_worker(self, worker):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_worker(worker.worker)
 * 
 */

#line 786 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_35enqueue_worker, 0, __pyx_n_s_Scheduler_enqueue_worker, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__155)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 786, __pyx_L1_error)

#line 786 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 786 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_enqueue_worker, __pyx_t_4) < 0) __PYX_ERR(0, 786, __pyx_L1_error)

#line 786 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":789
 *         self.inner_scheduler.enqueue_worker(worker.worker)
 * 
 *     def enqueue_task(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_task(task.inner_task)
 * 
 */

#line 789 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_37enqueue_task, 0, __pyx_n_s_Scheduler_enqueue_task, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__157)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 789, __pyx_L1_error)

#line 789 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 789 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_enqueue_task, __pyx_t_4) < 0) __PYX_ERR(0, 789, __pyx_L1_error)

#line 789 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":792
 *         self.inner_scheduler.enqueue_task(task.inner_task)
 * 
 *     def enqueue_task_unsafe(self, task):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.enqueue_task_unsafe(task.inner_task)
 * 
 */

#line 792 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_39enqueue_task_unsafe, 0, __pyx_n_s_Scheduler_enqueue_task_unsafe, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__159)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 792, __pyx_L1_error)

#line 792 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 792 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_enqueue_task_unsafe, __pyx_t_4) < 0) __PYX_ERR(0, 792, __pyx_L1_error)

#line 792 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":795
 *         self.inner_scheduler.enqueue_task_unsafe(task.inner_task)
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.run()
 * 
 */

#line 795 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_41run, 0, __pyx_n_s_Scheduler_run, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__161)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 795, __pyx_L1_error)

#line 795 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 795 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_run, __pyx_t_4) < 0) __PYX_ERR(0, 795, __pyx_L1_error)

#line 795 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":798
 *         self.inner_scheduler.run()
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         super().stop()
 * 
 */

#line 798 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_43stop, 0, __pyx_n_s_Scheduler_stop, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__163)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 798, __pyx_L1_error)

#line 798 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 798 "miniparla/runtime.pyx"
  __Pyx_INCREF(__pyx_t_4);

#line 798 "miniparla/runtime.pyx"
  PyList_Append(__pyx_t_5, __pyx_t_4);

#line 798 "miniparla/runtime.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 798 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_stop, __pyx_t_4) < 0) __PYX_ERR(0, 798, __pyx_L1_error)

#line 798 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":805
 *         #print("ALL STOPPED", flush=True)
 * 
 *     def run_scheduler(self):             # <<<<<<<<<<<<<<
 *         self.inner_scheduler.run_scheduler()
 * 
 */

#line 805 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Scheduler_45run_scheduler, 0, __pyx_n_s_Scheduler_run_scheduler, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__165)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 805, __pyx_L1_error)

#line 805 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 805 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_run_scheduler, __pyx_t_4) < 0) __PYX_ERR(0, 805, __pyx_L1_error)

#line 805 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "miniparla/runtime.pyx":690
 * 
 * 
 * class Scheduler(ControllableThread, SchedulerContext):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, n_threads=8, period=0.001):
 */

#line 690 "miniparla/runtime.pyx"
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_Scheduler, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 690 "miniparla/runtime.pyx"
  if (__Pyx_CyFunction_InitClassCell(__pyx_t_5, __pyx_t_4) < 0) __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 690 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Scheduler, __pyx_t_4) < 0) __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 690 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 690 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 690 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":812
 * 
 * 
 * class Resources:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, vcus):
 */

#line 812 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Resources, __pyx_n_s_Resources, (PyObject *) NULL, __pyx_n_s_miniparla_runtime, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 812, __pyx_L1_error)

#line 812 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

  /* "miniparla/runtime.pyx":814
 * class Resources:
 * 
 *     def __init__(self, vcus):             # <<<<<<<<<<<<<<
 *         self.vcus = vcus
 * 
 */

#line 814 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9miniparla_7runtime_9Resources_1__init__, 0, __pyx_n_s_Resources___init, NULL, __pyx_n_s_miniparla_runtime, __pyx_d, ((PyObject *)__pyx_codeobj__167)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)

#line 814 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 814 "miniparla/runtime.pyx"
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 814, __pyx_L1_error)

#line 814 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miniparla/runtime.pyx":812
 * 
 * 
 * class Resources:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, vcus):
 */

#line 812 "miniparla/runtime.pyx"
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Resources, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)

#line 812 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 812 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Resources, __pyx_t_1) < 0) __PYX_ERR(0, 812, __pyx_L1_error)

#line 812 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 812 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":819
 * 
 * 
 * def _task_callback(task, body):             # <<<<<<<<<<<<<<
 *     """
 *     A function which forwards to a python function in the appropriate device context.
 */

#line 819 "miniparla/runtime.pyx"
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9miniparla_7runtime_5_task_callback, NULL, __pyx_n_s_miniparla_runtime); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)

#line 819 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 819 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_task_callback, __pyx_t_2) < 0) __PYX_ERR(0, 819, __pyx_L1_error)

#line 819 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "miniparla/runtime.pyx":2
 * 
 * from miniparla.task_states import TaskRunning, TaskCompleted, TaskState, TaskException             # <<<<<<<<<<<<<<
 * from collections import namedtuple, defaultdict, deque
 * import threading
 */

#line 2 "miniparla/runtime.pyx"
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2 "miniparla/runtime.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)

#line 2 "miniparla/runtime.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 2 "miniparla/runtime.pyx"


#line 2 "miniparla/runtime.pyx"
  /*--- Wrapped vars code ---*/

#line 2 "miniparla/runtime.pyx"


#line 2 "miniparla/runtime.pyx"
  goto __pyx_L0;

#line 2 "miniparla/runtime.pyx"
  __pyx_L1_error:;

#line 2 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 2 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 2 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 2 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 2 "miniparla/runtime.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 2 "miniparla/runtime.pyx"
  if (__pyx_m) {

#line 2 "miniparla/runtime.pyx"
    if (__pyx_d) {

#line 2 "miniparla/runtime.pyx"
      __Pyx_AddTraceback("init miniparla.runtime", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2 "miniparla/runtime.pyx"
    }

#line 2 "miniparla/runtime.pyx"
    Py_CLEAR(__pyx_m);

#line 2 "miniparla/runtime.pyx"
  } else if (!PyErr_Occurred()) {

#line 2 "miniparla/runtime.pyx"
    PyErr_SetString(PyExc_ImportError, "init miniparla.runtime");

#line 2 "miniparla/runtime.pyx"
  }

#line 2 "miniparla/runtime.pyx"
  __pyx_L0:;

#line 2 "miniparla/runtime.pyx"
  __Pyx_RefNannyFinishContext();

#line 2 "miniparla/runtime.pyx"
  #if CYTHON_PEP489_MULTI_PHASE_INIT

#line 2 "miniparla/runtime.pyx"
  return (__pyx_m != NULL) ? 0 : -1;

#line 2 "miniparla/runtime.pyx"
  #elif PY_MAJOR_VERSION >= 3

#line 2 "miniparla/runtime.pyx"
  return __pyx_m;

#line 2 "miniparla/runtime.pyx"
  #else

#line 2 "miniparla/runtime.pyx"
  return;

#line 2 "miniparla/runtime.pyx"
  #endif

#line 2 "miniparla/runtime.pyx"
}

#line 1 "cython_utility"

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ReturnWithStopIteration */
static void __Pyx__ReturnWithStopIteration(PyObject* value) {
    PyObject *exc, *args;
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_PYSTON
    __Pyx_PyThreadState_declare
    if ((PY_VERSION_HEX >= 0x03030000 && PY_VERSION_HEX < 0x030500B1)
            || unlikely(PyTuple_Check(value) || PyExceptionInstance_Check(value))) {
        args = PyTuple_New(1);
        if (unlikely(!args)) return;
        Py_INCREF(value);
        PyTuple_SET_ITEM(args, 0, value);
        exc = PyType_Type.tp_call(PyExc_StopIteration, args, NULL);
        Py_DECREF(args);
        if (!exc) return;
    } else {
        Py_INCREF(value);
        exc = value;
    }
    #if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    #if CYTHON_USE_EXC_INFO_STACK
    if (!__pyx_tstate->exc_info->exc_type)
    #else
    if (!__pyx_tstate->exc_type)
    #endif
    {
        Py_INCREF(PyExc_StopIteration);
        __Pyx_ErrRestore(PyExc_StopIteration, exc, NULL);
        return;
    }
    #endif
#else
    args = PyTuple_Pack(1, value);
    if (unlikely(!args)) return;
    exc = PyObject_Call(PyExc_StopIteration, args, NULL);
    Py_DECREF(args);
    if (unlikely(!exc)) return;
#endif
    PyErr_SetObject(PyExc_StopIteration, exc);
    Py_DECREF(exc);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* pop */
static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L) {
    if (Py_TYPE(L) == &PySet_Type) {
        return PySet_Pop(L);
    }
    return __Pyx_PyObject_CallMethod0(L, __pyx_n_s_pop);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L) {
    if (likely(PyList_GET_SIZE(L) > (((PyListObject*)L)->allocated >> 1))) {
        __Pyx_SET_SIZE(L, Py_SIZE(L) - 1);
        return PyList_GET_ITEM(L, PyList_GET_SIZE(L));
    }
    return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyList_Type_pop, L);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_3);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchInspect */
static PyObject* __Pyx_patch_inspect(PyObject* module) {
#if defined(__Pyx_Generator_USED) && (!defined(CYTHON_PATCH_INSPECT) || CYTHON_PATCH_INSPECT)
    static int inspect_patched = 0;
    if (unlikely((!inspect_patched) && module)) {
        module = __Pyx_Coroutine_patch_module(
            module, ""
"old_types = getattr(_module.isgenerator, '_cython_generator_types', None)\n"
"if old_types is None or not isinstance(old_types, set):\n"
"    old_types = set()\n"
"    def cy_wrap(orig_func, type=type, cython_generator_types=old_types):\n"
"        def cy_isgenerator(obj): return type(obj) in cython_generator_types or orig_func(obj)\n"
"        cy_isgenerator._cython_generator_types = cython_generator_types\n"
"        return cy_isgenerator\n"
"    _module.isgenerator = cy_wrap(_module.isgenerator)\n"
"old_types.add(_cython_generator_type)\n"
        );
        inspect_patched = 1;
    }
#else
    if ((0)) return __Pyx_Coroutine_patch_module(module, NULL);
#endif
    return module;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CyFunctionClassCell */
static int __Pyx_CyFunction_InitClassCell(PyObject *cyfunctions, PyObject *classobj) {
    Py_ssize_t i, count = PyList_GET_SIZE(cyfunctions);
    for (i = 0; i < count; i++) {
        __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *)
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyList_GET_ITEM(cyfunctions, i);
#else
            PySequence_ITEM(cyfunctions, i);
        if (unlikely(!m))
            return -1;
#endif
        Py_INCREF(classobj);
        m->func_classobj = classobj;
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF((PyObject*)m);
#endif
    }
    return 0;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
